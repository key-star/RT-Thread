<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\RT-Thread.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\RT-Thread.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Thu Sep 02 13:13:26 2021
<BR><P>
<H3>Maximum Stack Usage =       1732 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_lv_disp_refr_task &rArr; lv_refr_areas &rArr; lv_refr_area &rArr; lv_refr_area_part &rArr; lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr; lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[292]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1e]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">NMI_Handler</a><BR>
 <LI><a href="#[20]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">MemManage_Handler</a><BR>
 <LI><a href="#[21]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">BusFault_Handler</a><BR>
 <LI><a href="#[22]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">UsageFault_Handler</a><BR>
 <LI><a href="#[23]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">SVC_Handler</a><BR>
 <LI><a href="#[24]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">DebugMon_Handler</a><BR>
 <LI><a href="#[39]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39]">ADC_IRQHandler</a><BR>
 <LI><a href="#[2e4]">rt_assert_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[331]">rt_kprintf</a><BR>
 <LI><a href="#[5a2]">draw_value_str</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[59f]">lv_draw_label</a><BR>
 <LI><a href="#[358]">_lv_area_is_point_on</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[358]">_lv_area_is_point_on</a><BR>
 <LI><a href="#[59a]">draw_pattern</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[59f]">lv_draw_label</a><BR>
 <LI><a href="#[80e]">lv_refr_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[80e]">lv_refr_obj</a><BR>
 <LI><a href="#[809]">lv_refr_get_top_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[809]">lv_refr_get_top_obj</a><BR>
 <LI><a href="#[3b0]">_lv_obj_get_style_ptr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ac]">update_style_cache</a><BR>
 <LI><a href="#[3ab]">_lv_obj_get_style_int</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ac]">update_style_cache</a><BR>
 <LI><a href="#[7c5]">lv_obj_get_style_opa_scale</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ae]">_lv_obj_get_style_opa</a><BR>
 <LI><a href="#[7dc]">lv_obj_get_style_image_recolor_opa</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ae]">_lv_obj_get_style_opa</a><BR>
 <LI><a href="#[7c2]">lv_obj_get_style_bg_opa</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ae]">_lv_obj_get_style_opa</a><BR>
 <LI><a href="#[778]">lv_event_send_func</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[636]">lv_event_send</a><BR>
 <LI><a href="#[7fb]">refresh_children_position</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7fb]">refresh_children_position</a><BR>
 <LI><a href="#[6d3]">lv_indev_search_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6d3]">lv_indev_search_obj</a><BR>
 <LI><a href="#[4b6]">copydir</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4b6]">copydir</a><BR>
 <LI><a href="#[48c]">directory_delete_for_msh</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[48c]">directory_delete_for_msh</a><BR>
 <LI><a href="#[8bb]">msh_exec_script</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[631]">msh_exec</a><BR>
 <LI><a href="#[83e]">netconn_drain</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[83e]">netconn_drain</a><BR>
 <LI><a href="#[865]">lwip_send</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[861]">lwip_sendto</a><BR>
 <LI><a href="#[7f8]">refresh_children_style</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7f8]">refresh_children_style</a><BR>
 <LI><a href="#[6f4]">update_style_cache_children</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6f4]">update_style_cache_children</a><BR>
 <LI><a href="#[7fa]">report_style_mod_core</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7fa]">report_style_mod_core</a><BR>
 <LI><a href="#[423]">apply_theme</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[423]">apply_theme</a><BR>
 <LI><a href="#[a1d]">webclient_get</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a1d]">webclient_get</a><BR>
 <LI><a href="#[2fe]">redraw</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[564]">show_status_line</a><BR>
 <LI><a href="#[45e]">undo_queue_commit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[577]">undo_push</a><BR>
 <LI><a href="#[577]">undo_push</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[577]">undo_push</a><BR>
 <LI><a href="#[56d]">undo_pop</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[56d]">undo_pop</a><BR>
 <LI><a href="#[573]">find_range</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[563]">do_cmd</a><BR>
 <LI><a href="#[8f4]">optparse</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8f4]">optparse</a><BR>
 <LI><a href="#[4b0]">color_tree_cleanup</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4b0]">color_tree_cleanup</a><BR>
 <LI><a href="#[7bd]">obj_del_core</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7bd]">obj_del_core</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[39]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">BusFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[67]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[68]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[69]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[66]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[75]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[60]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[61]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[62]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[63]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6b]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6c]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6d]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[114]">DMA_RxConfig</a> from drv_sdio.o(i.DMA_RxConfig) referenced from drv_sdio.o(i.rt_hw_sdio_init)
 <LI><a href="#[115]">DMA_TxConfig</a> from drv_sdio.o(i.DMA_TxConfig) referenced from drv_sdio.o(i.rt_hw_sdio_init)
 <LI><a href="#[24]">DebugMon_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[64]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[65]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">EXTI0_IRQHandler</a> from drv_gpio.o(i.EXTI0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">EXTI15_10_IRQHandler</a> from drv_gpio.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">EXTI1_IRQHandler</a> from drv_gpio.o(i.EXTI1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">EXTI2_IRQHandler</a> from drv_gpio.o(i.EXTI2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">EXTI3_IRQHandler</a> from drv_gpio.o(i.EXTI3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">EXTI4_IRQHandler</a> from drv_gpio.o(i.EXTI4_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">EXTI9_5_IRQHandler</a> from drv_gpio.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[77]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[76]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[70]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6f]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a]">LCD_BlitLine</a> from drv_lcd.o(i.LCD_BlitLine) referenced 2 times from drv_lcd.o(.data)
 <LI><a href="#[7]">LCD_Fast_DrawPoint</a> from drv_lcd.o(i.LCD_Fast_DrawPoint) referenced 2 times from drv_lcd.o(.data)
 <LI><a href="#[9]">LCD_HLine</a> from drv_lcd.o(i.LCD_HLine) referenced 2 times from drv_lcd.o(.data)
 <LI><a href="#[8]">LCD_ReadPoint</a> from drv_lcd.o(i.LCD_ReadPoint) referenced 2 times from drv_lcd.o(.data)
 <LI><a href="#[20]">MemManage_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">NMI_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6a]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[72]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[71]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[74]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[73]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">SDIO_IRQHandler</a> from drv_sdio.o(i.SDIO_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[93]">SPI_DMAError</a> from stm32f4xx_hal_spi.o(i.SPI_DMAError) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
 <LI><a href="#[93]">SPI_DMAError</a> from stm32f4xx_hal_spi.o(i.SPI_DMAError) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[93]">SPI_DMAError</a> from stm32f4xx_hal_spi.o(i.SPI_DMAError) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
 <LI><a href="#[91]">SPI_DMAHalfReceiveCplt</a> from stm32f4xx_hal_spi.o(i.SPI_DMAHalfReceiveCplt) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
 <LI><a href="#[91]">SPI_DMAHalfReceiveCplt</a> from stm32f4xx_hal_spi.o(i.SPI_DMAHalfReceiveCplt) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[96]">SPI_DMAHalfTransmitCplt</a> from stm32f4xx_hal_spi.o(i.SPI_DMAHalfTransmitCplt) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
 <LI><a href="#[94]">SPI_DMAHalfTransmitReceiveCplt</a> from stm32f4xx_hal_spi.o(i.SPI_DMAHalfTransmitReceiveCplt) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[92]">SPI_DMAReceiveCplt</a> from stm32f4xx_hal_spi.o(i.SPI_DMAReceiveCplt) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
 <LI><a href="#[92]">SPI_DMAReceiveCplt</a> from stm32f4xx_hal_spi.o(i.SPI_DMAReceiveCplt) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[97]">SPI_DMATransmitCplt</a> from stm32f4xx_hal_spi.o(i.SPI_DMATransmitCplt) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
 <LI><a href="#[95]">SPI_DMATransmitReceiveCplt</a> from stm32f4xx_hal_spi.o(i.SPI_DMATransmitReceiveCplt) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[23]">SVC_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">SysTick_Handler</a> from drv_common.o(i.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[78]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[29]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">TIM2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[98]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[9b]">UART_DMAError</a> from stm32f4xx_hal_uart.o(i.UART_DMAError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[9b]">UART_DMAError</a> from stm32f4xx_hal_uart.o(i.UART_DMAError) referenced from stm32f4xx_hal_uart.o(i.UART_Start_Receive_DMA)
 <LI><a href="#[9c]">UART_DMAReceiveCplt</a> from stm32f4xx_hal_uart.o(i.UART_DMAReceiveCplt) referenced from stm32f4xx_hal_uart.o(i.UART_Start_Receive_DMA)
 <LI><a href="#[9d]">UART_DMARxHalfCplt</a> from stm32f4xx_hal_uart.o(i.UART_DMARxHalfCplt) referenced from stm32f4xx_hal_uart.o(i.UART_Start_Receive_DMA)
 <LI><a href="#[99]">UART_DMATransmitCplt</a> from stm32f4xx_hal_uart.o(i.UART_DMATransmitCplt) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[9a]">UART_DMATxHalfCplt</a> from stm32f4xx_hal_uart.o(i.UART_DMATxHalfCplt) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[4c]">USART1_IRQHandler</a> from drv_usart.o(i.USART1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">USART2_IRQHandler</a> from drv_usart.o(i.USART2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">USART3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6e]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">UsageFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d7]">i2c(int, char**)</a> from i2c_tools.o(i._Z3i2ciPPc) referenced from i2c_tools.o(FSymTab)
 <LI><a href="#[1f1]">__main</a> from __main.o(!!!main) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[83]">__rt_SIGABRT_inner</a> from defsig.o(CL$$defsig) referenced from defsig.o(CL$$defsig)
 <LI><a href="#[8f]">__rt_SIGCPPL_inner</a> from defsig.o(CL$$defsig) referenced from defsig.o(CL$$defsig)
 <LI><a href="#[84]">__rt_SIGFPE_inner</a> from defsig_fpe_inner.o(.text) referenced from defsig.o(CL$$defsig)
 <LI><a href="#[85]">__rt_SIGILL_inner</a> from defsig.o(CL$$defsig) referenced from defsig.o(CL$$defsig)
 <LI><a href="#[86]">__rt_SIGINT_inner</a> from defsig.o(CL$$defsig) referenced from defsig.o(CL$$defsig)
 <LI><a href="#[8e]">__rt_SIGPVFN_inner</a> from defsig.o(CL$$defsig) referenced from defsig.o(CL$$defsig)
 <LI><a href="#[8b]">__rt_SIGRTMEM_inner</a> from defsig_rtmem_inner.o(.text) referenced from defsig.o(CL$$defsig)
 <LI><a href="#[8a]">__rt_SIGRTRED_inner</a> from defsig_rtred_inner.o(.text) referenced from defsig.o(CL$$defsig)
 <LI><a href="#[87]">__rt_SIGSEGV_inner</a> from defsig.o(CL$$defsig) referenced from defsig.o(CL$$defsig)
 <LI><a href="#[89]">__rt_SIGSTAK_inner</a> from defsig.o(CL$$defsig) referenced from defsig.o(CL$$defsig)
 <LI><a href="#[88]">__rt_SIGTERM_inner</a> from defsig.o(CL$$defsig) referenced from defsig.o(CL$$defsig)
 <LI><a href="#[8c]">__rt_SIGUSR1_inner</a> from defsig.o(CL$$defsig) referenced from defsig.o(CL$$defsig)
 <LI><a href="#[8d]">__rt_SIGUSR2_inner</a> from defsig.o(CL$$defsig) referenced from defsig.o(CL$$defsig)
 <LI><a href="#[90]">__rt_sigother_inner</a> from defsig.o(CL$$defsig) referenced from defsig.o(CL$$defsig)
 <LI><a href="#[137]">__wqueue_default_wake</a> from waitqueue.o(i.__wqueue_default_wake) referenced from waitqueue.o(i.rt_wqueue_wait)
 <LI><a href="#[a3]">__wqueue_pollwake</a> from poll.o(i.__wqueue_pollwake) referenced from poll.o(i._poll_add)
 <LI><a href="#[a6]">_delayed_work_timeout_handler</a> from workqueue.o(i._delayed_work_timeout_handler) referenced from workqueue.o(i._workqueue_submit_delayed_work)
 <LI><a href="#[7a]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[d2]">_lv_disp_refr_task</a> from lv_refr.o(i._lv_disp_refr_task) referenced from lv_hal_disp.o(i.lv_disp_drv_register)
 <LI><a href="#[db]">_lv_indev_read_task</a> from lv_indev.o(i._lv_indev_read_task) referenced from lv_hal_indev.o(i.lv_indev_drv_register)
 <LI><a href="#[d6]">_lv_ll_get_head</a> from lv_ll.o(i._lv_ll_get_head) referenced from lv_group.o(i.lv_group_focus_next)
 <LI><a href="#[d5]">_lv_ll_get_next</a> from lv_ll.o(i._lv_ll_get_next) referenced from lv_group.o(i.lv_group_focus_next)
 <LI><a href="#[d7]">_lv_ll_get_prev</a> from lv_ll.o(i._lv_ll_get_prev) referenced from lv_group.o(i.lv_group_focus_prev)
 <LI><a href="#[d8]">_lv_ll_get_tail</a> from lv_ll.o(i._lv_ll_get_tail) referenced from lv_group.o(i.lv_group_focus_prev)
 <LI><a href="#[112]">_pin_control</a> from pin.o(i._pin_control) referenced from pin.o(i.rt_device_pin_register)
 <LI><a href="#[110]">_pin_read</a> from pin.o(i._pin_read) referenced from pin.o(i.rt_device_pin_register)
 <LI><a href="#[111]">_pin_write</a> from pin.o(i._pin_write) referenced from pin.o(i.rt_device_pin_register)
 <LI><a href="#[10e]">_poll_add</a> from poll.o(i._poll_add) referenced from poll.o(i.poll_table_init)
 <LI><a href="#[7f]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[7e]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[81]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[7d]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[7b]">_snputc</a> from _snputc.o(.text) referenced 2 times from vsnprintf.o(.text)
 <LI><a href="#[130]">_spi_bus_device_control</a> from spi_dev.o(i._spi_bus_device_control) referenced from spi_dev.o(i.rt_spi_bus_device_init)
 <LI><a href="#[12e]">_spi_bus_device_read</a> from spi_dev.o(i._spi_bus_device_read) referenced from spi_dev.o(i.rt_spi_bus_device_init)
 <LI><a href="#[12f]">_spi_bus_device_write</a> from spi_dev.o(i._spi_bus_device_write) referenced from spi_dev.o(i.rt_spi_bus_device_init)
 <LI><a href="#[133]">_spidev_device_control</a> from spi_dev.o(i._spidev_device_control) referenced from spi_dev.o(i.rt_spidev_device_init)
 <LI><a href="#[131]">_spidev_device_read</a> from spi_dev.o(i._spidev_device_read) referenced from spi_dev.o(i.rt_spidev_device_init)
 <LI><a href="#[132]">_spidev_device_write</a> from spi_dev.o(i._spidev_device_write) referenced from spi_dev.o(i.rt_spidev_device_init)
 <LI><a href="#[7c]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[136]">_workqueue_thread_entry</a> from workqueue.o(i._workqueue_thread_entry) referenced from workqueue.o(i.rt_workqueue_create)
 <LI><a href="#[9e]">anim_task</a> from lv_anim.o(i.anim_task) referenced from lv_anim.o(i._lv_anim_core_init)
 <LI><a href="#[c2]">blk_dev_control</a> from fal_rtt.o(i.blk_dev_control) referenced from fal_rtt.o(i.fal_blk_device_create)
 <LI><a href="#[c0]">blk_dev_read</a> from fal_rtt.o(i.blk_dev_read) referenced from fal_rtt.o(i.fal_blk_device_create)
 <LI><a href="#[c1]">blk_dev_write</a> from fal_rtt.o(i.blk_dev_write) referenced from fal_rtt.o(i.fal_blk_device_create)
 <LI><a href="#[1ac]">cJSON_hook_init</a> from cjson_port.o(i.cJSON_hook_init) referenced from cjson_port.o(.rti_fn.4)
 <LI><a href="#[1db]">cat</a> from dfs_file.o(i.cat) referenced from dfs_file.o(FSymTab)
 <LI><a href="#[16d]">char_dev_fopen</a> from fal_rtt.o(i.char_dev_fopen) referenced from fal_rtt.o(.constdata)
 <LI><a href="#[16e]">char_dev_fread</a> from fal_rtt.o(i.char_dev_fread) referenced from fal_rtt.o(.constdata)
 <LI><a href="#[16f]">char_dev_fwrite</a> from fal_rtt.o(i.char_dev_fwrite) referenced from fal_rtt.o(.constdata)
 <LI><a href="#[1e0]">chdir</a> from dfs_posix.o(i.chdir) referenced from dfs_posix.o(FSymTab)
 <LI><a href="#[138]">check_netdev_internet_up_work</a> from sal_socket.o(i.check_netdev_internet_up_work) referenced from sal_socket.o(i.sal_check_netdev_internet_up)
 <LI><a href="#[1bc]">clear</a> from cmd.o(i.clear) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[1cf]">cmd_cat</a> from msh_file.o(i.cmd_cat) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1d1]">cmd_cd</a> from msh_file.o(i.cmd_cd) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1cd]">cmd_cp</a> from msh_file.o(i.cmd_cp) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1d5]">cmd_df</a> from msh_file.o(i.cmd_df) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1d6]">cmd_echo</a> from msh_file.o(i.cmd_echo) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1cb]">cmd_free</a> from msh.o(i.cmd_free) referenced from msh.o(FSymTab)
 <LI><a href="#[1cc]">cmd_ls</a> from msh_file.o(i.cmd_ls) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1d3]">cmd_mkdir</a> from msh_file.o(i.cmd_mkdir) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1d4]">cmd_mkfs</a> from msh_file.o(i.cmd_mkfs) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1ce]">cmd_mv</a> from msh_file.o(i.cmd_mv) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1ca]">cmd_ps</a> from msh.o(i.cmd_ps) referenced from msh.o(FSymTab)
 <LI><a href="#[1d2]">cmd_pwd</a> from msh_file.o(i.cmd_pwd) referenced from msh_file.o(FSymTab)
 <LI><a href="#[1d0]">cmd_rm</a> from msh_file.o(i.cmd_rm) referenced from msh_file.o(FSymTab)
 <LI><a href="#[c3]">color_blend_true_color_additive</a> from lv_draw_blend.o(i.color_blend_true_color_additive) referenced from lv_draw_blend.o(i.fill_blended)
 <LI><a href="#[c3]">color_blend_true_color_additive</a> from lv_draw_blend.o(i.color_blend_true_color_additive) referenced from lv_draw_blend.o(i.map_blended)
 <LI><a href="#[c4]">color_blend_true_color_subtractive</a> from lv_draw_blend.o(i.color_blend_true_color_subtractive) referenced from lv_draw_blend.o(i.fill_blended)
 <LI><a href="#[c4]">color_blend_true_color_subtractive</a> from lv_draw_blend.o(i.color_blend_true_color_subtractive) referenced from lv_draw_blend.o(i.map_blended)
 <LI><a href="#[1dc]">copy</a> from dfs_file.o(i.copy) referenced from dfs_file.o(FSymTab)
 <LI><a href="#[a9]">cyclic_timer</a> from timeouts.o(i.cyclic_timer) referenced from timeouts.o(i.cyclic_timer)
 <LI><a href="#[a9]">cyclic_timer</a> from timeouts.o(i.cyclic_timer) referenced from timeouts.o(i.sys_timeouts_init)
 <LI><a href="#[d1]">decoder_close</a> from lv_bmp.o(i.decoder_close) referenced from lv_bmp.o(i.lv_bmp_init)
 <LI><a href="#[e3]">decoder_close</a> from lv_png.o(i.decoder_close) referenced from lv_png.o(i.lv_png_init)
 <LI><a href="#[f4]">decoder_close</a> from lv_sjpg.o(i.decoder_close) referenced from lv_sjpg.o(i.lv_split_jpeg_init)
 <LI><a href="#[ce]">decoder_info</a> from lv_bmp.o(i.decoder_info) referenced from lv_bmp.o(i.lv_bmp_init)
 <LI><a href="#[e1]">decoder_info</a> from lv_png.o(i.decoder_info) referenced from lv_png.o(i.lv_png_init)
 <LI><a href="#[f2]">decoder_info</a> from lv_sjpg.o(i.decoder_info) referenced from lv_sjpg.o(i.lv_split_jpeg_init)
 <LI><a href="#[cf]">decoder_open</a> from lv_bmp.o(i.decoder_open) referenced from lv_bmp.o(i.lv_bmp_init)
 <LI><a href="#[e2]">decoder_open</a> from lv_png.o(i.decoder_open) referenced from lv_png.o(i.lv_png_init)
 <LI><a href="#[f3]">decoder_open</a> from lv_sjpg.o(i.decoder_open) referenced from lv_sjpg.o(i.lv_split_jpeg_init)
 <LI><a href="#[d0]">decoder_read_line</a> from lv_bmp.o(i.decoder_read_line) referenced from lv_bmp.o(i.lv_bmp_init)
 <LI><a href="#[f5]">decoder_read_line</a> from lv_sjpg.o(i.decoder_read_line) referenced from lv_sjpg.o(i.lv_split_jpeg_init)
 <LI><a href="#[1de]">df</a> from dfs_fs.o(i.df) referenced from dfs_fs.o(FSymTab)
 <LI><a href="#[171]">dfs_device_fs_close</a> from devfs.o(i.dfs_device_fs_close) referenced from devfs.o(.constdata)
 <LI><a href="#[175]">dfs_device_fs_getdents</a> from devfs.o(i.dfs_device_fs_getdents) referenced from devfs.o(.constdata)
 <LI><a href="#[172]">dfs_device_fs_ioctl</a> from devfs.o(i.dfs_device_fs_ioctl) referenced from devfs.o(.constdata)
 <LI><a href="#[177]">dfs_device_fs_mount</a> from devfs.o(i.dfs_device_fs_mount) referenced from devfs.o(.constdata)
 <LI><a href="#[170]">dfs_device_fs_open</a> from devfs.o(i.dfs_device_fs_open) referenced from devfs.o(.constdata)
 <LI><a href="#[176]">dfs_device_fs_poll</a> from devfs.o(i.dfs_device_fs_poll) referenced from devfs.o(.constdata)
 <LI><a href="#[173]">dfs_device_fs_read</a> from devfs.o(i.dfs_device_fs_read) referenced from devfs.o(.constdata)
 <LI><a href="#[178]">dfs_device_fs_stat</a> from devfs.o(i.dfs_device_fs_stat) referenced from devfs.o(.constdata)
 <LI><a href="#[174]">dfs_device_fs_write</a> from devfs.o(i.dfs_device_fs_write) referenced from devfs.o(.constdata)
 <LI><a href="#[17a]">dfs_elm_close</a> from dfs_elm.o(i.dfs_elm_close) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[17e]">dfs_elm_flush</a> from dfs_elm.o(i.dfs_elm_flush) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[180]">dfs_elm_getdents</a> from dfs_elm.o(i.dfs_elm_getdents) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[17b]">dfs_elm_ioctl</a> from dfs_elm.o(i.dfs_elm_ioctl) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[17f]">dfs_elm_lseek</a> from dfs_elm.o(i.dfs_elm_lseek) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[183]">dfs_elm_mkfs</a> from dfs_elm.o(i.dfs_elm_mkfs) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[181]">dfs_elm_mount</a> from dfs_elm.o(i.dfs_elm_mount) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[179]">dfs_elm_open</a> from dfs_elm.o(i.dfs_elm_open) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[17c]">dfs_elm_read</a> from dfs_elm.o(i.dfs_elm_read) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[187]">dfs_elm_rename</a> from dfs_elm.o(i.dfs_elm_rename) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[186]">dfs_elm_stat</a> from dfs_elm.o(i.dfs_elm_stat) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[184]">dfs_elm_statfs</a> from dfs_elm.o(i.dfs_elm_statfs) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[185]">dfs_elm_unlink</a> from dfs_elm.o(i.dfs_elm_unlink) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[182]">dfs_elm_unmount</a> from dfs_elm.o(i.dfs_elm_unmount) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[17d]">dfs_elm_write</a> from dfs_elm.o(i.dfs_elm_write) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[1a1]">dfs_init</a> from dfs.o(i.dfs_init) referenced from dfs.o(.rti_fn.2)
 <LI><a href="#[193]">dfs_net_close</a> from dfs_net.o(i.dfs_net_close) referenced from dfs_net.o(.constdata)
 <LI><a href="#[194]">dfs_net_ioctl</a> from dfs_net.o(i.dfs_net_ioctl) referenced from dfs_net.o(.constdata)
 <LI><a href="#[197]">dfs_net_poll</a> from dfs_net.o(i.dfs_net_poll) referenced from dfs_net.o(.constdata)
 <LI><a href="#[195]">dfs_net_read</a> from dfs_net.o(i.dfs_net_read) referenced from dfs_net.o(.constdata)
 <LI><a href="#[196]">dfs_net_write</a> from dfs_net.o(i.dfs_net_write) referenced from dfs_net.o(.constdata)
 <LI><a href="#[ac]">dns_recv</a> from dns.o(i.dns_recv) referenced from dns.o(i.dns_alloc_random_port)
 <LI><a href="#[18b]">dns_tmr</a> from dns.o(i.dns_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[ae]">drv_lcd_control</a> from drv_lcd.o(i.drv_lcd_control) referenced from drv_lcd.o(i.drv_lcd_hw_init)
 <LI><a href="#[1a3]">drv_lcd_hw_init</a> from drv_lcd.o(i.drv_lcd_hw_init) referenced from drv_lcd.o(.rti_fn.3)
 <LI><a href="#[ad]">drv_lcd_init</a> from drv_lcd.o(i.drv_lcd_init) referenced from drv_lcd.o(i.drv_lcd_hw_init)
 <LI><a href="#[1aa]">elm_init</a> from dfs_elm.o(i.elm_init) referenced from dfs_elm.o(.rti_fn.4)
 <LI><a href="#[1ad]">elmfat_mount</a> from mount_table.o(i.elmfat_mount) referenced from mount_table.o(.rti_fn.5)
 <LI><a href="#[1b9]">enc28j60</a> from enc28j60.o(i.enc28j60) referenced from enc28j60.o(FSymTab)
 <LI><a href="#[b1]">enc28j60_close</a> from enc28j60.o(i.enc28j60_close) referenced from enc28j60.o(i.enc28j60_attach)
 <LI><a href="#[b4]">enc28j60_control</a> from enc28j60.o(i.enc28j60_control) referenced from enc28j60.o(i.enc28j60_attach)
 <LI><a href="#[1a5]">enc28j60_init</a> from enc28j60_init.o(i.enc28j60_init) referenced from enc28j60_init.o(.rti_fn.3)
 <LI><a href="#[af]">enc28j60_init</a> from enc28j60.o(i.enc28j60_init) referenced from enc28j60.o(i.enc28j60_attach)
 <LI><a href="#[b7]">enc28j60_isr</a> from enc28j60.o(i.enc28j60_isr) referenced from enc28j60_init.o(i.enc28j60_init)
 <LI><a href="#[b0]">enc28j60_open</a> from enc28j60.o(i.enc28j60_open) referenced from enc28j60.o(i.enc28j60_attach)
 <LI><a href="#[b2]">enc28j60_read</a> from enc28j60.o(i.enc28j60_read) referenced from enc28j60.o(i.enc28j60_attach)
 <LI><a href="#[b5]">enc28j60_rx</a> from enc28j60.o(i.enc28j60_rx) referenced from enc28j60.o(i.enc28j60_attach)
 <LI><a href="#[b6]">enc28j60_tx</a> from enc28j60.o(i.enc28j60_tx) referenced from enc28j60.o(i.enc28j60_attach)
 <LI><a href="#[b3]">enc28j60_write</a> from enc28j60.o(i.enc28j60_write) referenced from enc28j60.o(i.enc28j60_attach)
 <LI><a href="#[e]">erase</a> from fal_flash_sfud_port.o(i.erase) referenced 2 times from fal_flash_sfud_port.o(.data)
 <LI><a href="#[fb]">err_tcp</a> from api_msg.o(i.err_tcp) referenced from api_msg.o(i.lwip_netconn_do_close_internal)
 <LI><a href="#[fb]">err_tcp</a> from api_msg.o(i.err_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[bb]">eth_netif_device_init</a> from ethernetif.o(i.eth_netif_device_init) referenced from ethernetif.o(i.eth_device_init_with_flag)
 <LI><a href="#[be]">eth_rx_thread_entry</a> from ethernetif.o(i.eth_rx_thread_entry) referenced from ethernetif.o(i.eth_system_device_init_private)
 <LI><a href="#[bf]">eth_tx_thread_entry</a> from ethernetif.o(i.eth_tx_thread_entry) referenced from ethernetif.o(i.eth_system_device_init_private)
 <LI><a href="#[b8]">etharp_output</a> from etharp.o(i.etharp_output) referenced from ethernetif.o(i.eth_device_init_with_flag)
 <LI><a href="#[189]">etharp_tmr</a> from etharp.o(i.etharp_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[144]">ethernet_input</a> from ethernet.o(i.ethernet_input) referenced from tcpip.o(i.tcpip_input)
 <LI><a href="#[b9]">ethernetif_linkoutput</a> from ethernetif.o(i.ethernetif_linkoutput) referenced from ethernetif.o(i.eth_device_init_with_flag)
 <LI><a href="#[fd]">event_callback</a> from sockets.o(i.event_callback) referenced from sockets.o(i.lwip_socket)
 <LI><a href="#[1ba]">fal</a> from fal_rtt.o(i.fal) referenced from fal_rtt.o(FSymTab)
 <LI><a href="#[1ed]">fal_elmfat_sample</a> from fal_sample.o(i.fal_elmfat_sample) referenced from fal_sample.o(FSymTab)
 <LI><a href="#[15c]">fal_flash_erase_128k</a> from drv_flash_f4.o(i.fal_flash_erase_128k) referenced from drv_flash_f4.o(.constdata)
 <LI><a href="#[156]">fal_flash_erase_16k</a> from drv_flash_f4.o(i.fal_flash_erase_16k) referenced from drv_flash_f4.o(.constdata)
 <LI><a href="#[159]">fal_flash_erase_64k</a> from drv_flash_f4.o(i.fal_flash_erase_64k) referenced from drv_flash_f4.o(.constdata)
 <LI><a href="#[15a]">fal_flash_read_128k</a> from drv_flash_f4.o(i.fal_flash_read_128k) referenced from drv_flash_f4.o(.constdata)
 <LI><a href="#[154]">fal_flash_read_16k</a> from drv_flash_f4.o(i.fal_flash_read_16k) referenced from drv_flash_f4.o(.constdata)
 <LI><a href="#[157]">fal_flash_read_64k</a> from drv_flash_f4.o(i.fal_flash_read_64k) referenced from drv_flash_f4.o(.constdata)
 <LI><a href="#[15b]">fal_flash_write_128k</a> from drv_flash_f4.o(i.fal_flash_write_128k) referenced from drv_flash_f4.o(.constdata)
 <LI><a href="#[155]">fal_flash_write_16k</a> from drv_flash_f4.o(i.fal_flash_write_16k) referenced from drv_flash_f4.o(.constdata)
 <LI><a href="#[158]">fal_flash_write_64k</a> from drv_flash_f4.o(i.fal_flash_write_64k) referenced from drv_flash_f4.o(.constdata)
 <LI><a href="#[1ec]">fal_sample</a> from fal_sample.o(i.fal_sample) referenced from fal_sample.o(FSymTab)
 <LI><a href="#[1ae]">finsh_system_init</a> from shell.o(i.finsh_system_init) referenced from shell.o(.rti_fn.6)
 <LI><a href="#[c5]">finsh_thread_entry</a> from shell.o(i.finsh_thread_entry) referenced from shell.o(i.finsh_system_init)
 <LI><a href="#[80]">fputc</a> from fputc.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[12]">free</a> from mem_std.o(i.free) referenced 2 times from cjson.o(.data)
 <LI><a href="#[12]">free</a> from mem_std.o(i.free) referenced from cjson.o(i.cJSON_InitHooks)
 <LI><a href="#[e5]">fs_close</a> from lv_port_fs.o(i.fs_close) referenced from lv_port_fs.o(i.lv_port_fs_init)
 <LI><a href="#[ef]">fs_dir_close</a> from lv_port_fs.o(i.fs_dir_close) referenced from lv_port_fs.o(i.lv_port_fs_init)
 <LI><a href="#[f0]">fs_dir_open</a> from lv_port_fs.o(i.fs_dir_open) referenced from lv_port_fs.o(i.lv_port_fs_init)
 <LI><a href="#[f1]">fs_dir_read</a> from lv_port_fs.o(i.fs_dir_read) referenced from lv_port_fs.o(i.lv_port_fs_init)
 <LI><a href="#[ea]">fs_free</a> from lv_port_fs.o(i.fs_free) referenced from lv_port_fs.o(i.lv_port_fs_init)
 <LI><a href="#[e4]">fs_open</a> from lv_port_fs.o(i.fs_open) referenced from lv_port_fs.o(i.lv_port_fs_init)
 <LI><a href="#[e6]">fs_read</a> from lv_port_fs.o(i.fs_read) referenced from lv_port_fs.o(i.lv_port_fs_init)
 <LI><a href="#[ec]">fs_remove</a> from lv_port_fs.o(i.fs_remove) referenced from lv_port_fs.o(i.lv_port_fs_init)
 <LI><a href="#[ed]">fs_rename</a> from lv_port_fs.o(i.fs_rename) referenced from lv_port_fs.o(i.lv_port_fs_init)
 <LI><a href="#[e8]">fs_seek</a> from lv_port_fs.o(i.fs_seek) referenced from lv_port_fs.o(i.lv_port_fs_init)
 <LI><a href="#[eb]">fs_size</a> from lv_port_fs.o(i.fs_size) referenced from lv_port_fs.o(i.lv_port_fs_init)
 <LI><a href="#[e9]">fs_tell</a> from lv_port_fs.o(i.fs_tell) referenced from lv_port_fs.o(i.lv_port_fs_init)
 <LI><a href="#[ee]">fs_trunc</a> from lv_port_fs.o(i.fs_trunc) referenced from lv_port_fs.o(i.lv_port_fs_init)
 <LI><a href="#[e7]">fs_write</a> from lv_port_fs.o(i.fs_write) referenced from lv_port_fs.o(i.lv_port_fs_init)
 <LI><a href="#[10]">gt917s_control</a> from gt917s.o(i.gt917s_control) referenced 2 times from gt917s.o(.data)
 <LI><a href="#[ca]">gt917s_entry</a> from gt917s_sample.o(i.gt917s_entry) referenced from gt917s_sample.o(i.gt917s_sample)
 <LI><a href="#[f]">gt917s_read_point</a> from gt917s.o(i.gt917s_read_point) referenced 2 times from gt917s.o(.data)
 <LI><a href="#[1af]">gt917s_sample_demo</a> from gt917s_sample.o(i.gt917s_sample_demo) referenced from gt917s_sample.o(.rti_fn.6)
 <LI><a href="#[1bb]">hello</a> from cmd.o(i.hello) referenced from cmd.o(FSymTab)
 <LI><a href="#[16c]">i2c_bit_xfer</a> from i2c-bit-ops.o(i.i2c_bit_xfer) referenced from i2c-bit-ops.o(.constdata)
 <LI><a href="#[122]">i2c_bus_device_control</a> from i2c_dev.o(i.i2c_bus_device_control) referenced from i2c_dev.o(i.rt_i2c_bus_device_device_init)
 <LI><a href="#[120]">i2c_bus_device_read</a> from i2c_dev.o(i.i2c_bus_device_read) referenced from i2c_dev.o(i.rt_i2c_bus_device_device_init)
 <LI><a href="#[121]">i2c_bus_device_write</a> from i2c_dev.o(i.i2c_bus_device_write) referenced from i2c_dev.o(i.rt_i2c_bus_device_device_init)
 <LI><a href="#[18a]">igmp_tmr</a> from igmp.o(i.igmp_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[ab]">img_data_cb</a> from lv_sjpg.o(i.img_data_cb) referenced from lv_sjpg.o(i.decoder_read_line)
 <LI><a href="#[b]">init</a> from fal_flash_sfud_port.o(i.init) referenced 2 times from fal_flash_sfud_port.o(.data)
 <LI><a href="#[aa]">input_func</a> from lv_sjpg.o(i.input_func) referenced from lv_sjpg.o(i.decoder_info)
 <LI><a href="#[aa]">input_func</a> from lv_sjpg.o(i.input_func) referenced 2 times from lv_sjpg.o(i.decoder_open)
 <LI><a href="#[aa]">input_func</a> from lv_sjpg.o(i.input_func) referenced from lv_sjpg.o(i.decoder_read_line)
 <LI><a href="#[cd]">input_read</a> from littlevgl2rtt.o(i.input_read) referenced from littlevgl2rtt.o(i.littlevgl2rtt_init)
 <LI><a href="#[145]">ip4_input</a> from ip4.o(i.ip4_input) referenced from tcpip.o(i.tcpip_input)
 <LI><a href="#[82]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[c8]">kern_pair_16_compare</a> from lv_font_fmt_txt.o(i.kern_pair_16_compare) referenced from lv_font_fmt_txt.o(i.get_kern_value)
 <LI><a href="#[c7]">kern_pair_8_compare</a> from lv_font_fmt_txt.o(i.kern_pair_8_compare) referenced from lv_font_fmt_txt.o(i.get_kern_value)
 <LI><a href="#[cc]">lcd_fb_flush</a> from littlevgl2rtt.o(i.lcd_fb_flush) referenced from littlevgl2rtt.o(i.littlevgl2rtt_init)
 <LI><a href="#[cb]">lcd_flush</a> from littlevgl2rtt.o(i.lcd_flush) referenced from littlevgl2rtt.o(i.littlevgl2rtt_init)
 <LI><a href="#[1a9]">libc_system_init</a> from libc.o(i.libc_system_init) referenced from libc.o(.rti_fn.4)
 <LI><a href="#[1c8]">list</a> from cmd.o(i.list) referenced from cmd.o(FSymTab)
 <LI><a href="#[1c7]">list_device</a> from cmd.o(i.list_device) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[1c0]">list_event</a> from cmd.o(i.list_event) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[1d8]">list_fd</a> from dfs.o(i.list_fd) referenced from dfs.o(FSymTab)
 <LI><a href="#[1e4]">list_if</a> from ethernetif.o(i.list_if) referenced from ethernetif.o(FSymTab)
 <LI><a href="#[1c2]">list_mailbox</a> from cmd.o(i.list_mailbox) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[1c4]">list_memheap</a> from cmd.o(i.list_memheap) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[1c5]">list_mempool</a> from cmd.o(i.list_mempool) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[1c3]">list_msgqueue</a> from cmd.o(i.list_msgqueue) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[1c1]">list_mutex</a> from cmd.o(i.list_mutex) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[1bf]">list_sem</a> from cmd.o(i.list_sem) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[1e5]">list_tcps</a> from ethernetif.o(i.list_tcps) referenced from ethernetif.o(FSymTab)
 <LI><a href="#[1be]">list_thread</a> from cmd.o(i.list_thread) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[1c6]">list_timer</a> from cmd.o(i.list_timer) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[1e6]">list_udps</a> from ethernetif.o(i.list_udps) referenced from ethernetif.o(FSymTab)
 <LI><a href="#[1d9]">ls</a> from dfs_file.o(i.ls) referenced from dfs_file.o(FSymTab)
 <LI><a href="#[198]">lv_anim_path_linear</a> from lv_anim.o(i.lv_anim_path_linear) referenced from lv_anim.o(.constdata)
 <LI><a href="#[d3]">lv_draw_mask_line</a> from lv_draw_mask.o(i.lv_draw_mask_line) referenced from lv_draw_mask.o(i.lv_draw_mask_line_points_init)
 <LI><a href="#[d4]">lv_draw_mask_radius</a> from lv_draw_mask.o(i.lv_draw_mask_radius) referenced from lv_draw_mask.o(i.lv_draw_mask_radius_init)
 <LI><a href="#[14]">lv_font_get_bitmap_fmt_txt</a> from lv_font_fmt_txt.o(i.lv_font_get_bitmap_fmt_txt) referenced 2 times from lv_font_montserrat_14.o(.data)
 <LI><a href="#[13]">lv_font_get_glyph_dsc_fmt_txt</a> from lv_font_fmt_txt.o(i.lv_font_get_glyph_dsc_fmt_txt) referenced 2 times from lv_font_montserrat_14.o(.data)
 <LI><a href="#[a2]">lv_img_decoder_built_in_close</a> from lv_img_decoder.o(i.lv_img_decoder_built_in_close) referenced from lv_img_decoder.o(i._lv_img_decoder_init)
 <LI><a href="#[9f]">lv_img_decoder_built_in_info</a> from lv_img_decoder.o(i.lv_img_decoder_built_in_info) referenced from lv_img_decoder.o(i._lv_img_decoder_init)
 <LI><a href="#[a0]">lv_img_decoder_built_in_open</a> from lv_img_decoder.o(i.lv_img_decoder_built_in_open) referenced from lv_img_decoder.o(i._lv_img_decoder_init)
 <LI><a href="#[a1]">lv_img_decoder_built_in_read_line</a> from lv_img_decoder.o(i.lv_img_decoder_built_in_read_line) referenced from lv_img_decoder.o(i._lv_img_decoder_init)
 <LI><a href="#[da]">lv_img_design</a> from lv_img.o(i.lv_img_design) referenced from lv_img.o(i.lv_img_create)
 <LI><a href="#[d9]">lv_img_signal</a> from lv_img.o(i.lv_img_signal) referenced from lv_img.o(i.lv_img_create)
 <LI><a href="#[dd]">lv_obj_design</a> from lv_obj.o(i.lv_obj_design) referenced from lv_obj.o(i.lv_obj_create)
 <LI><a href="#[dc]">lv_obj_signal</a> from lv_obj.o(i.lv_obj_signal) referenced from lv_obj.o(i.lv_obj_create)
 <LI><a href="#[16]">lv_txt_unicode_to_utf8</a> from lv_txt.o(i.lv_txt_unicode_to_utf8) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[17]">lv_txt_utf8_conv_wc</a> from lv_txt.o(i.lv_txt_utf8_conv_wc) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[1a]">lv_txt_utf8_get_byte_id</a> from lv_txt.o(i.lv_txt_utf8_get_byte_id) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[1b]">lv_txt_utf8_get_char_id</a> from lv_txt.o(i.lv_txt_utf8_get_char_id) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[1c]">lv_txt_utf8_get_length</a> from lv_txt.o(i.lv_txt_utf8_get_length) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[18]">lv_txt_utf8_next</a> from lv_txt.o(i.lv_txt_utf8_next) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[19]">lv_txt_utf8_prev</a> from lv_txt.o(i.lv_txt_utf8_prev) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[15]">lv_txt_utf8_size</a> from lv_txt.o(i.lv_txt_utf8_size) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[123]">lvgl_demo_run</a> from littlevgl2rtt_demo.o(i.lvgl_demo_run) referenced from littlevgl2rtt_demo.o(i.rt_lvgl_demo_init)
 <LI><a href="#[f7]">lvgl_task_run</a> from littlevgl2rtt.o(i.lvgl_task_run) referenced from littlevgl2rtt.o(i.lvgl_task_handler_init)
 <LI><a href="#[f8]">lvgl_tick_run</a> from littlevgl2rtt.o(i.lvgl_tick_run) referenced from littlevgl2rtt.o(i.lvgl_tick_handler_init)
 <LI><a href="#[ff]">lwip_netconn_do_close</a> from api_msg.o(i.lwip_netconn_do_close) referenced from api_lib.o(i.netconn_close_shutdown)
 <LI><a href="#[100]">lwip_netconn_do_delconn</a> from api_msg.o(i.lwip_netconn_do_delconn) referenced from api_lib.o(i.netconn_delete)
 <LI><a href="#[fc]">lwip_netconn_do_dns_found</a> from api_msg.o(i.lwip_netconn_do_dns_found) referenced from api_msg.o(i.lwip_netconn_do_gethostbyname)
 <LI><a href="#[101]">lwip_netconn_do_getaddr</a> from api_msg.o(i.lwip_netconn_do_getaddr) referenced from api_lib.o(i.netconn_getaddr)
 <LI><a href="#[102]">lwip_netconn_do_gethostbyname</a> from api_msg.o(i.lwip_netconn_do_gethostbyname) referenced from api_lib.o(i.netconn_gethostbyname)
 <LI><a href="#[103]">lwip_netconn_do_join_leave_group</a> from api_msg.o(i.lwip_netconn_do_join_leave_group) referenced from api_lib.o(i.netconn_join_leave_group)
 <LI><a href="#[104]">lwip_netconn_do_newconn</a> from api_msg.o(i.lwip_netconn_do_newconn) referenced from api_lib.o(i.netconn_new_with_proto_and_callback)
 <LI><a href="#[105]">lwip_netconn_do_recv</a> from api_msg.o(i.lwip_netconn_do_recv) referenced from api_lib.o(i.netconn_recv_data)
 <LI><a href="#[106]">lwip_netconn_do_send</a> from api_msg.o(i.lwip_netconn_do_send) referenced from api_lib.o(i.netconn_send)
 <LI><a href="#[107]">lwip_netconn_do_write</a> from api_msg.o(i.lwip_netconn_do_write) referenced from api_lib.o(i.netconn_write_partly)
 <LI><a href="#[191]">lwip_netdev_netstat</a> from ethernetif.o(i.lwip_netdev_netstat) referenced from ethernetif.o(.constdata)
 <LI><a href="#[190]">lwip_netdev_ping</a> from ethernetif.o(i.lwip_netdev_ping) referenced from ethernetif.o(.constdata)
 <LI><a href="#[18e]">lwip_netdev_set_addr_info</a> from ethernetif.o(i.lwip_netdev_set_addr_info) referenced from ethernetif.o(.constdata)
 <LI><a href="#[192]">lwip_netdev_set_default</a> from ethernetif.o(i.lwip_netdev_set_default) referenced from ethernetif.o(.constdata)
 <LI><a href="#[18f]">lwip_netdev_set_dns_server</a> from ethernetif.o(i.lwip_netdev_set_dns_server) referenced from ethernetif.o(.constdata)
 <LI><a href="#[18d]">lwip_netdev_set_down</a> from ethernetif.o(i.lwip_netdev_set_down) referenced from ethernetif.o(.constdata)
 <LI><a href="#[18c]">lwip_netdev_set_up</a> from ethernetif.o(i.lwip_netdev_set_up) referenced from ethernetif.o(.constdata)
 <LI><a href="#[1a2]">lwip_system_init</a> from sys_arch.o(i.lwip_system_init) referenced from sys_arch.o(.rti_fn.2)
 <LI><a href="#[1ee]">main_2048</a> from 2048.o(i.main_2048) referenced from 2048.o(FSymTab)
 <LI><a href="#[10f]">main_thread_entry</a> from components.o(i.main_thread_entry) referenced from components.o(i.rt_application_init)
 <LI><a href="#[11]">malloc</a> from mem_std.o(i.malloc) referenced 2 times from cjson.o(.data)
 <LI><a href="#[11]">malloc</a> from mem_std.o(i.malloc) referenced from cjson.o(i.cJSON_InitHooks)
 <LI><a href="#[1df]">mkdir</a> from dfs_posix.o(i.mkdir) referenced from dfs_posix.o(FSymTab)
 <LI><a href="#[1dd]">mkfs</a> from dfs_fs.o(i.mkfs) referenced from dfs_fs.o(FSymTab)
 <LI><a href="#[12a]">mmcsd_detect</a> from mmcsd_core.o(i.mmcsd_detect) referenced from mmcsd_core.o(i.rt_mmcsd_core_init)
 <LI><a href="#[1c9]">msh_help</a> from msh.o(i.msh_help) referenced from msh.o(FSymTab)
 <LI><a href="#[1e9]">netdev_dns</a> from netdev.o(i.netdev_dns) referenced from netdev.o(FSymTab)
 <LI><a href="#[1e7]">netdev_ifconfig</a> from netdev.o(i.netdev_ifconfig) referenced from netdev.o(FSymTab)
 <LI><a href="#[1ea]">netdev_netstat</a> from netdev.o(i.netdev_netstat) referenced from netdev.o(FSymTab)
 <LI><a href="#[1e8]">netdev_ping</a> from netdev.o(i.netdev_ping) referenced from netdev.o(FSymTab)
 <LI><a href="#[143]">netif_device_init</a> from sys_arch.o(i.netif_device_init) referenced from sys_arch.o(i.tcpip_init_done_callback)
 <LI><a href="#[bd]">netif_set_link_down</a> from netif.o(i.netif_set_link_down) referenced from ethernetif.o(i.eth_rx_thread_entry)
 <LI><a href="#[bc]">netif_set_link_up</a> from netif.o(i.netif_set_link_up) referenced from ethernetif.o(i.eth_rx_thread_entry)
 <LI><a href="#[108]">netifapi_do_netif_add</a> from netifapi.o(i.netifapi_do_netif_add) referenced from netifapi.o(i.netifapi_netif_add)
 <LI><a href="#[109]">netifapi_do_netif_common</a> from netifapi.o(i.netifapi_do_netif_common) referenced from netifapi.o(i.netifapi_netif_common)
 <LI><a href="#[10a]">netifapi_do_netif_set_addr</a> from netifapi.o(i.netifapi_do_netif_set_addr) referenced from netifapi.o(i.netifapi_netif_set_addr)
 <LI><a href="#[10b]">pbuf_free_ooseq_callback</a> from pbuf.o(i.pbuf_free_ooseq_callback) referenced from pbuf.o(i.pbuf_pool_is_empty)
 <LI><a href="#[fa]">poll_tcp</a> from api_msg.o(i.poll_tcp) referenced from api_msg.o(i.lwip_netconn_do_close_internal)
 <LI><a href="#[fa]">poll_tcp</a> from api_msg.o(i.poll_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[c]">read</a> from fal_flash_sfud_port.o(i.read) referenced 2 times from fal_flash_sfud_port.o(.data)
 <LI><a href="#[1b2]">reboot</a> from drv_common.o(i.reboot) referenced from drv_common.o(FSymTab)
 <LI><a href="#[10c]">recv_raw</a> from api_msg.o(i.recv_raw) referenced from api_msg.o(i.pcb_new)
 <LI><a href="#[13b]">recv_tcp</a> from api_msg.o(i.recv_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[10d]">recv_udp</a> from api_msg.o(i.recv_udp) referenced from api_msg.o(i.pcb_new)
 <LI><a href="#[13f]">retry_delay_100us</a> from spi_flash_sfud.o(i.retry_delay_100us) referenced from spi_flash_sfud.o(i.sfud_spi_port_init)
 <LI><a href="#[1da]">rm</a> from dfs_file.o(i.rm) referenced from dfs_file.o(FSymTab)
 <LI><a href="#[a8]">rt_free</a> from memheap.o(i.rt_free) referenced from cjson_port.o(i.cJSON_hook_init)
 <LI><a href="#[1a7]">rt_hw_gt917s_port</a> from touch_init.o(i.rt_hw_gt917s_port) referenced from touch_init.o(.rti_fn.3)
 <LI><a href="#[19d]">rt_hw_i2c_init</a> from drv_soft_i2c.o(i.rt_hw_i2c_init) referenced from drv_soft_i2c.o(.rti_fn.1)
 <LI><a href="#[1a4]">rt_hw_sdio_init</a> from drv_sdio.o(i.rt_hw_sdio_init) referenced from drv_sdio.o(.rti_fn.3)
 <LI><a href="#[1a6]">rt_hw_spi_flash_init</a> from spi_flash_init.o(i.rt_hw_spi_flash_init) referenced from spi_flash_init.o(.rti_fn.3)
 <LI><a href="#[19b]">rt_hw_spi_init</a> from drv_spi.o(i.rt_hw_spi_init) referenced from drv_spi.o(.rti_fn.1)
 <LI><a href="#[19c]">rt_hw_sram_init</a> from drv_sram.o(i.rt_hw_sram_init) referenced from drv_sram.o(.rti_fn.1)
 <LI><a href="#[1a8]">rt_i2c_core_init</a> from i2c_core.o(i.rt_i2c_core_init) referenced from i2c_core.o(.rti_fn.4)
 <LI><a href="#[1b0]">rt_lvgl_demo_init</a> from littlevgl2rtt_demo.o(i.rt_lvgl_demo_init) referenced from littlevgl2rtt_demo.o(.rti_fn.6)
 <LI><a href="#[a7]">rt_malloc</a> from memheap.o(i.rt_malloc) referenced from cjson_port.o(i.cJSON_hook_init)
 <LI><a href="#[126]">rt_mmcsd_close</a> from block_dev.o(i.rt_mmcsd_close) referenced from block_dev.o(i.rt_mmcsd_blk_probe)
 <LI><a href="#[129]">rt_mmcsd_control</a> from block_dev.o(i.rt_mmcsd_control) referenced from block_dev.o(i.rt_mmcsd_blk_probe)
 <LI><a href="#[1a0]">rt_mmcsd_core_init</a> from mmcsd_core.o(i.rt_mmcsd_core_init) referenced from mmcsd_core.o(.rti_fn.2)
 <LI><a href="#[124]">rt_mmcsd_init</a> from block_dev.o(i.rt_mmcsd_init) referenced from block_dev.o(i.rt_mmcsd_blk_probe)
 <LI><a href="#[125]">rt_mmcsd_open</a> from block_dev.o(i.rt_mmcsd_open) referenced from block_dev.o(i.rt_mmcsd_blk_probe)
 <LI><a href="#[127]">rt_mmcsd_read</a> from block_dev.o(i.rt_mmcsd_read) referenced from block_dev.o(i.rt_mmcsd_blk_probe)
 <LI><a href="#[128]">rt_mmcsd_write</a> from block_dev.o(i.rt_mmcsd_write) referenced from block_dev.o(i.rt_mmcsd_blk_probe)
 <LI><a href="#[1b7]">rt_pin_get</a> from pin.o(i.rt_pin_get) referenced from pin.o(FSymTab)
 <LI><a href="#[1b4]">rt_pin_mode</a> from pin.o(i.rt_pin_mode) referenced from pin.o(FSymTab)
 <LI><a href="#[1b6]">rt_pin_read</a> from pin.o(i.rt_pin_read) referenced from pin.o(FSymTab)
 <LI><a href="#[1b5]">rt_pin_write</a> from pin.o(i.rt_pin_write) referenced from pin.o(FSymTab)
 <LI><a href="#[118]">rt_serial_close</a> from serial.o(i.rt_serial_close) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[11b]">rt_serial_control</a> from serial.o(i.rt_serial_control) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[116]">rt_serial_init</a> from serial.o(i.rt_serial_init) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[117]">rt_serial_open</a> from serial.o(i.rt_serial_open) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[119]">rt_serial_read</a> from serial.o(i.rt_serial_read) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[11a]">rt_serial_write</a> from serial.o(i.rt_serial_write) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[12d]">rt_sfud_control</a> from spi_flash_sfud.o(i.rt_sfud_control) referenced from spi_flash_sfud.o(i.rt_sfud_flash_probe_ex)
 <LI><a href="#[12b]">rt_sfud_read</a> from spi_flash_sfud.o(i.rt_sfud_read) referenced from spi_flash_sfud.o(i.rt_sfud_flash_probe_ex)
 <LI><a href="#[12c]">rt_sfud_write</a> from spi_flash_sfud.o(i.rt_sfud_write) referenced from spi_flash_sfud.o(i.rt_sfud_flash_probe_ex)
 <LI><a href="#[a4]">rt_thread_exit</a> from thread.o(i.rt_thread_exit) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[134]">rt_thread_idle_entry</a> from idle.o(i.rt_thread_idle_entry) referenced from idle.o(i.rt_thread_idle_init)
 <LI><a href="#[a5]">rt_thread_timeout</a> from thread.o(i.rt_thread_timeout) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[11d]">rt_touch_close</a> from touch.o(i.rt_touch_close) referenced from touch.o(i.rt_hw_touch_register)
 <LI><a href="#[11f]">rt_touch_control</a> from touch.o(i.rt_touch_control) referenced from touch.o(i.rt_hw_touch_register)
 <LI><a href="#[11c]">rt_touch_open</a> from touch.o(i.rt_touch_open) referenced from touch.o(i.rt_hw_touch_register)
 <LI><a href="#[11e]">rt_touch_read</a> from touch.o(i.rt_touch_read) referenced from touch.o(i.rt_hw_touch_register)
 <LI><a href="#[19f]">rt_work_sys_workqueue_init</a> from workqueue.o(i.rt_work_sys_workqueue_init) referenced from workqueue.o(.rti_fn.2)
 <LI><a href="#[164]">rthw_sd_detect</a> from drv_sdio.o(i.rthw_sd_detect) referenced from drv_sdio.o(.constdata)
 <LI><a href="#[163]">rthw_sdio_iocfg</a> from drv_sdio.o(i.rthw_sdio_iocfg) referenced from drv_sdio.o(.constdata)
 <LI><a href="#[165]">rthw_sdio_irq_update</a> from drv_sdio.o(i.rthw_sdio_irq_update) referenced from drv_sdio.o(.constdata)
 <LI><a href="#[162]">rthw_sdio_request</a> from drv_sdio.o(i.rthw_sdio_request) referenced from drv_sdio.o(.constdata)
 <LI><a href="#[19e]">rti_board_end</a> from components.o(i.rti_board_end) referenced from components.o(.rti_fn.1.end)
 <LI><a href="#[19a]">rti_board_start</a> from components.o(i.rti_board_start) referenced from components.o(.rti_fn.0.end)
 <LI><a href="#[1b1]">rti_end</a> from components.o(i.rti_end) referenced from components.o(.rti_fn.6.end)
 <LI><a href="#[199]">rti_start</a> from components.o(i.rti_start) referenced from components.o(.rti_fn.0)
 <LI><a href="#[c9]">rx_callback</a> from gt917s_sample.o(i.rx_callback) referenced from gt917s_sample.o(i.gt917s_sample)
 <LI><a href="#[1ab]">sal_init</a> from sal_socket.o(i.sal_init) referenced from sal_socket.o(.rti_fn.4)
 <LI><a href="#[f9]">sent_tcp</a> from api_msg.o(i.sent_tcp) referenced from api_msg.o(i.lwip_netconn_do_close_internal)
 <LI><a href="#[f9]">sent_tcp</a> from api_msg.o(i.sent_tcp) referenced from api_msg.o(i.setup_tcp)
 <LI><a href="#[167]">serial_fops_close</a> from serial.o(i.serial_fops_close) referenced from serial.o(.constdata)
 <LI><a href="#[168]">serial_fops_ioctl</a> from serial.o(i.serial_fops_ioctl) referenced from serial.o(.constdata)
 <LI><a href="#[166]">serial_fops_open</a> from serial.o(i.serial_fops_open) referenced from serial.o(.constdata)
 <LI><a href="#[16b]">serial_fops_poll</a> from serial.o(i.serial_fops_poll) referenced from serial.o(.constdata)
 <LI><a href="#[169]">serial_fops_read</a> from serial.o(i.serial_fops_read) referenced from serial.o(.constdata)
 <LI><a href="#[13a]">serial_fops_rx_ind</a> from serial.o(i.serial_fops_rx_ind) referenced from serial.o(i.serial_fops_open)
 <LI><a href="#[16a]">serial_fops_write</a> from serial.o(i.serial_fops_write) referenced from serial.o(.constdata)
 <LI><a href="#[1e3]">set_dns</a> from ethernetif.o(i.set_dns) referenced from ethernetif.o(FSymTab)
 <LI><a href="#[1e2]">set_if</a> from ethernetif.o(i.set_if) referenced from ethernetif.o(FSymTab)
 <LI><a href="#[1b8]">sf</a> from spi_flash_sfud.o(i.sf) referenced from spi_flash_sfud.o(FSymTab)
 <LI><a href="#[14d]">spi_configure</a> from drv_spi.o(i.spi_configure) referenced from drv_spi.o(.constdata)
 <LI><a href="#[13d]">spi_lock</a> from spi_flash_sfud.o(i.spi_lock) referenced from spi_flash_sfud.o(i.sfud_spi_port_init)
 <LI><a href="#[13e]">spi_unlock</a> from spi_flash_sfud.o(i.spi_unlock) referenced from spi_flash_sfud.o(i.sfud_spi_port_init)
 <LI><a href="#[13c]">spi_write_read</a> from spi_flash_sfud.o(i.spi_write_read) referenced from spi_flash_sfud.o(i.sfud_spi_port_init)
 <LI><a href="#[14e]">spixfer</a> from drv_spi.o(i.spixfer) referenced from drv_spi.o(.constdata)
 <LI><a href="#[1b3]">sram_test</a> from drv_sram.o(i.sram_test) referenced from drv_sram.o(FSymTab)
 <LI><a href="#[14f]">stm32_configure</a> from drv_usart.o(i.stm32_configure) referenced from drv_usart.o(.constdata)
 <LI><a href="#[150]">stm32_control</a> from drv_usart.o(i.stm32_control) referenced from drv_usart.o(.constdata)
 <LI><a href="#[153]">stm32_dma_transmit</a> from drv_usart.o(i.stm32_dma_transmit) referenced from drv_usart.o(.constdata)
 <LI><a href="#[160]">stm32_get_scl</a> from drv_soft_i2c.o(i.stm32_get_scl) referenced from drv_soft_i2c.o(.constdata)
 <LI><a href="#[15f]">stm32_get_sda</a> from drv_soft_i2c.o(i.stm32_get_sda) referenced from drv_soft_i2c.o(.constdata)
 <LI><a href="#[152]">stm32_getc</a> from drv_usart.o(i.stm32_getc) referenced from drv_usart.o(.constdata)
 <LI><a href="#[149]">stm32_pin_attach_irq</a> from drv_gpio.o(i.stm32_pin_attach_irq) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[14a]">stm32_pin_dettach_irq</a> from drv_gpio.o(i.stm32_pin_dettach_irq) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[14c]">stm32_pin_get</a> from drv_gpio.o(i.stm32_pin_get) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[14b]">stm32_pin_irq_enable</a> from drv_gpio.o(i.stm32_pin_irq_enable) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[146]">stm32_pin_mode</a> from drv_gpio.o(i.stm32_pin_mode) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[148]">stm32_pin_read</a> from drv_gpio.o(i.stm32_pin_read) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[147]">stm32_pin_write</a> from drv_gpio.o(i.stm32_pin_write) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[151]">stm32_putc</a> from drv_usart.o(i.stm32_putc) referenced from drv_usart.o(.constdata)
 <LI><a href="#[139]">stm32_sdio_clk_get</a> from drv_sdio.o(i.stm32_sdio_clk_get) referenced from drv_sdio.o(i.sdio_host_create)
 <LI><a href="#[113]">stm32_sdio_clock_get</a> from drv_sdio.o(i.stm32_sdio_clock_get) referenced from drv_sdio.o(i.rt_hw_sdio_init)
 <LI><a href="#[15e]">stm32_set_scl</a> from drv_soft_i2c.o(i.stm32_set_scl) referenced from drv_soft_i2c.o(.constdata)
 <LI><a href="#[15d]">stm32_set_sda</a> from drv_soft_i2c.o(i.stm32_set_sda) referenced from drv_soft_i2c.o(.constdata)
 <LI><a href="#[161]">stm32_udelay</a> from drv_soft_i2c.o(i.stm32_udelay) referenced from drv_soft_i2c.o(.constdata)
 <LI><a href="#[140]">tcp_recv_null</a> from tcp.o(i.tcp_recv_null) referenced from tcp.o(i.tcp_alloc)
 <LI><a href="#[188]">tcp_tmr</a> from tcp.o(i.tcp_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[fe]">tcpip_init_done_callback</a> from sys_arch.o(i.tcpip_init_done_callback) referenced from sys_arch.o(i.lwip_system_init)
 <LI><a href="#[ba]">tcpip_input</a> from tcpip.o(i.tcpip_input) referenced from ethernetif.o(i.eth_device_init_with_flag)
 <LI><a href="#[ba]">tcpip_input</a> from tcpip.o(i.tcpip_input) referenced from sys_arch.o(i.tcpip_init_done_callback)
 <LI><a href="#[141]">tcpip_tcp_timer</a> from timeouts.o(i.tcpip_tcp_timer) referenced from timeouts.o(i.tcp_timer_needed)
 <LI><a href="#[141]">tcpip_tcp_timer</a> from timeouts.o(i.tcpip_tcp_timer) referenced from timeouts.o(i.tcpip_tcp_timer)
 <LI><a href="#[142]">tcpip_thread</a> from tcpip.o(i.tcpip_thread) referenced from tcpip.o(i.tcpip_init)
 <LI><a href="#[f6]">theme_apply</a> from lv_theme_material.o(i.theme_apply) referenced from lv_theme_material.o(i.lv_theme_material_init)
 <LI><a href="#[135]">touch_irq_callback</a> from touch.o(i.touch_irq_callback) referenced from touch.o(i.rt_touch_irq_init)
 <LI><a href="#[de]">trans_anim_cb</a> from lv_obj.o(i.trans_anim_cb) referenced from lv_obj.o(i.lv_obj_set_state)
 <LI><a href="#[e0]">trans_anim_ready_cb</a> from lv_obj.o(i.trans_anim_ready_cb) referenced from lv_obj.o(i.lv_obj_set_state)
 <LI><a href="#[df]">trans_anim_start_cb</a> from lv_obj.o(i.trans_anim_start_cb) referenced from lv_obj.o(i.lv_obj_set_state)
 <LI><a href="#[c6]">unicode_list_compare</a> from lv_font_fmt_txt.o(i.unicode_list_compare) referenced from lv_font_fmt_txt.o(i.get_glyph_dsc_id)
 <LI><a href="#[1bd]">version</a> from cmd.o(i.version) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[1e1]">vi_main</a> from vi.o(i.vi_main) referenced from vi.o(FSymTab)
 <LI><a href="#[1ef]">vt_monitor</a> from vt_monitor.o(i.vt_monitor) referenced from vt_monitor.o(FSymTab)
 <LI><a href="#[1f0]">vt_sl</a> from vt_sl.o(i.vt_sl) referenced from vt_sl.o(FSymTab)
 <LI><a href="#[1eb]">wget</a> from webclient_file.o(i.wget) referenced from webclient_file.o(FSymTab)
 <LI><a href="#[d]">write</a> from fal_flash_sfud_port.o(i.write) referenced 2 times from fal_flash_sfud_port.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1f1]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1f2]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1f4]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[a31]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[a32]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[a33]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[a34]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[a35]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[1f5]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[246]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[1f7]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[1f9]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1fb]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1fc]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1fd]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[a36]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[1ff]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[201]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[202]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[203]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[205]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[207]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[209]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[20a]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[20b]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[20d]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[a37]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[20f]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[211]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[213]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[215]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[a38]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[227]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[217]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[a39]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[a3a]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[219]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[a3b]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[21b]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[a3c]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[a3d]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[21d]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[a3e]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[a3f]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[21e]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[a40]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[a41]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[a42]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[a43]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[a44]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[a45]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[a46]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[220]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 484 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _sys_open &rArr; open &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[a47]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[a48]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[a49]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[a4a]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[a4b]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[a4c]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[22c]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[a4d]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[a4e]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[222]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 468 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; libc_stdio_write &rArr; write &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[a4f]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[a50]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[a51]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[a52]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[a53]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[a54]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[1f3]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[a55]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[224]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[226]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[a56]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[228]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; rtthread_startup &rArr; rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[a57]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[296]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[22b]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[a58]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[22d]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[34c]"></a>__rt_ffs</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cpuport.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_voltage
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_highest_priority_thread
</UL>

<P><STRONG><a name="[414]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_create_txid
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start_timer
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addRandom
</UL>

<P><STRONG><a name="[1d]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[292]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[345]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_delayed_work
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_cancel_work
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_cancel_delayed_work
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delayed_work_timeout_handler
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_add
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peek
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_len
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_isr
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dma_tx_complete
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_dettach_irq
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_attach_irq
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_op
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_poll
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tc_flush
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_first_by_flags
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_family
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_list_thread
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
</UL>

<P><STRONG><a name="[348]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_delayed_work
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_cancel_work
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_cancel_delayed_work
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delayed_work_timeout_handler
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_add
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peek
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_len
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_isr
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dma_tx_complete
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_dettach_irq
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_attach_irq
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_op
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_poll
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tc_flush
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_first_by_flags
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_family
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_list_thread
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
</UL>

<P><STRONG><a name="[96a]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[96b]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[25]"></a>PendSV_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[97b]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[a59]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[1f]"></a>HardFault_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a5a]"></a>__semihosting$guard</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[a5b]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_test
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_one_address
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_motion_char
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_range
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_to_char
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_skip_over_ws
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[24c]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_write
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_read
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_poll
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_line_bold_errno
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readit
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[a5c]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[a5d]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[a5e]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[a5f]"></a>__I$use$heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[231]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldiv0
</UL>

<P><STRONG><a name="[4fe]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
</UL>

<P><STRONG><a name="[233]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[235]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_one_address
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_strncasecmp
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>

<P><STRONG><a name="[236]"></a>toupper</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, toupper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
</UL>

<P><STRONG><a name="[237]"></a>vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vasprintf
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_line_bold
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_line
</UL>

<P><STRONG><a name="[239]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_show_cursor
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_set_font_color
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_set_bg_color
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_move_to
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_hide_cursor
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_draw_str_at
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_draw_char_at
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_draw_char
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_clear_attr
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_clear
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xasprintf
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_poll
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_main
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_open
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_sl
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_monitor
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_list_thread
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_2048
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawBoard
</UL>

<P><STRONG><a name="[23b]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;place_cursor
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_monitor
</UL>

<P><STRONG><a name="[23c]"></a>__2snprintf</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_stdio_set_console
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_edit_status
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getColor
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawBoard
</UL>

<P><STRONG><a name="[23e]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[23f]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[23d]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[200]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[243]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[206]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[20e]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[1f8]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[244]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[247]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_one_address
</UL>

<P><STRONG><a name="[249]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[24b]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtonum(const char*)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c(int, char**)
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wh_helper
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dns
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_monitor
</UL>

<P><STRONG><a name="[24d]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtonum(const char*)
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_next_chunk
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[24f]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setops
</UL>

<P><STRONG><a name="[27b]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[250]"></a>_do_fflush</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fflush.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
</UL>

<P><STRONG><a name="[253]"></a>fflush</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fflush.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_main
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_status_line
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readit
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysleep
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_file
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cookmode
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_monitor
</UL>

<P><STRONG><a name="[254]"></a>fputs</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fputs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fputs &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write1
</UL>

<P><STRONG><a name="[252]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[a60]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[256]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[a61]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>getc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, getc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getc &rArr; fgetc &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_2048
</UL>

<P><STRONG><a name="[25b]"></a>putc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, putc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = putc &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input_line
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
</UL>

<P><STRONG><a name="[25c]"></a>puts</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = puts &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_help
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_2048
</UL>

<P><STRONG><a name="[25d]"></a>freopen</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = freopen &rArr; _sys_open &rArr; open &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[260]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[25e]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; libc_stdio_write &rArr; write &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[a62]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addRandom
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[21a]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[57a]"></a>strerror</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, strerror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_line_bold_errno
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
</UL>

<P><STRONG><a name="[466]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setops
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_range
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_pair
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_file
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_context
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[8bc]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
</UL>

<P><STRONG><a name="[5f2]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_jpg
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot_compare
</UL>

<P><STRONG><a name="[493]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_line_bold
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_literal
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input_line
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_free
</UL>

<P><STRONG><a name="[264]"></a>strncasecmp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, strncasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = strncasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mycmp
</UL>

<P><STRONG><a name="[34e]"></a>strrchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_path_lastname
</UL>

<P><STRONG><a name="[46c]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_show_part_table
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_insert
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_status_line
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input_line
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_args
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_search
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_open
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_info
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_strstri
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_open
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_info
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_open
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_info
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_ext
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawBoard
</UL>

<P><STRONG><a name="[5c9]"></a>memchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, memchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_line
</UL>

<P><STRONG><a name="[498]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mycmp
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_open
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_info
</UL>

<P><STRONG><a name="[628]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_line_bold
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_underflow
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_overflow
</UL>

<P><STRONG><a name="[268]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_control
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_open
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_func
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_data_cb
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>

<P><STRONG><a name="[265]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[a63]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[469]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_hole_make
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_hole_delete
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_line
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[267]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
</UL>

<P><STRONG><a name="[a64]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_termios_and_make_raw
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_underflow
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_overflow
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_netdev_internet_up_work
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iCCP
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_elmfat_sample
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_list_thread
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBufferedInput
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getColor
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
</UL>

<P><STRONG><a name="[a65]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[a66]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[a67]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[26a]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_init_element
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_huffman_tbl
</UL>

<P><STRONG><a name="[26f]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[26c]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[26b]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[261]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_MspInit
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FSMC_MspInit
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_attach
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sram_init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lcd_hw_init
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_table
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_app_cmd
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_switch
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_read_point
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_termios_and_make_raw
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_open
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_open
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_info
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rename
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_remove
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_dir_open
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[a68]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[a69]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[26d]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[26e]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
</UL>

<P><STRONG><a name="[332]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtonum(const char*)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c(int, char**)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkfs
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_df
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_filename
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_open
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_info
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_open
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_info
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_open
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_info
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_2048
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[a6a]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a6b]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a6c]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a6d]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[291]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a6e]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>__aeabi_ldiv0</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, aeabi_ldiv0_sigfpe.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_div0
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv
</UL>

<P><STRONG><a name="[21c]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[240]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[241]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[242]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[1f6]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[a6f]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[238]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[7c]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> vsnprintf.o(.text)
<LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[27a]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[210]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[212]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[23a]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[27c]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[208]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[27e]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[204]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[20c]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[24a]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[248]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[7d]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[7e]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[24e]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[258]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[280]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; libc_stdio_write &rArr; write &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[251]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; libc_stdio_write &rArr; write &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
</UL>

<P><STRONG><a name="[283]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[221]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = _initio &rArr; freopen &rArr; _sys_open &rArr; open &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[223]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; libc_stdio_write &rArr; write &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[a70]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[a71]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[286]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[269]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[a72]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>__rt_div0</STRONG> (Thumb, 10 bytes, Stack size 16 bytes, rt_div0.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGFPE
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldiv0
</UL>

<P><STRONG><a name="[276]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[82]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[288]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[279]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[289]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[214]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[216]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[27f]"></a>__vfscanf</STRONG> (Thumb, 880 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[272]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[28a]"></a>_readbuf</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[28e]"></a>_seteof</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[28c]"></a>__filbuf</STRONG> (Thumb, 476 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[61c]"></a>__filbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[a73]"></a>__filbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)

<P><STRONG><a name="[28f]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[295]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[a74]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[285]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[27d]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[284]"></a>__rt_SIGRTRED</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, defsig_rtred_formal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_raise &rArr; __raise
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_raise
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[225]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[290]"></a>__rt_raise</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rt_raise.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_raise &rArr; __raise
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__raise
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGFPE
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[294]"></a>fwrite</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, fwritefast.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = fwrite &rArr; _writebuf &rArr; _sys_write &rArr; libc_stdio_write &rArr; write &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh
</UL>

<P><STRONG><a name="[28d]"></a>_flushlinebuffered</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, flushlinebuffered.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[22a]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[287]"></a>__rt_SIGFPE</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, defsig_fpe_formal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_raise
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_div0
</UL>

<P><STRONG><a name="[8a]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Address Reference Count : 1]<UL><LI> defsig.o(CL$$defsig)
</UL>
<P><STRONG><a name="[293]"></a>__raise</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, __raise.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __raise
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_raise
</UL>

<P><STRONG><a name="[297]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGFPE_inner
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[84]"></a>__rt_SIGFPE_inner</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, defsig_fpe_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = __rt_SIGFPE_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Address Reference Count : 1]<UL><LI> defsig.o(CL$$defsig)
</UL>
<P><STRONG><a name="[8b]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Address Reference Count : 1]<UL><LI> defsig.o(CL$$defsig)
</UL>
<P><STRONG><a name="[273]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[29b]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[29a]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[29c]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[29d]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[274]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[275]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[29e]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[298]"></a>__default_signal_handler</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, defsig.o(CL$$defsig))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__raise
</UL>

<P><STRONG><a name="[83]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, defsig.o(CL$$defsig))
<BR>[Address Reference Count : 1]<UL><LI> defsig.o(CL$$defsig)
</UL>
<P><STRONG><a name="[8f]"></a>__rt_SIGCPPL_inner</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, defsig.o(CL$$defsig))
<BR>[Address Reference Count : 1]<UL><LI> defsig.o(CL$$defsig)
</UL>
<P><STRONG><a name="[a75]"></a>__rt_SIGFPE_inner$null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, defsig.o(CL$$defsig), UNUSED)

<P><STRONG><a name="[85]"></a>__rt_SIGILL_inner</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, defsig.o(CL$$defsig))
<BR>[Address Reference Count : 1]<UL><LI> defsig.o(CL$$defsig)
</UL>
<P><STRONG><a name="[86]"></a>__rt_SIGINT_inner</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, defsig.o(CL$$defsig))
<BR>[Address Reference Count : 1]<UL><LI> defsig.o(CL$$defsig)
</UL>
<P><STRONG><a name="[8e]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, defsig.o(CL$$defsig))
<BR>[Address Reference Count : 1]<UL><LI> defsig.o(CL$$defsig)
</UL>
<P><STRONG><a name="[a76]"></a>__rt_SIGRTMEM_inner$null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, defsig.o(CL$$defsig), UNUSED)

<P><STRONG><a name="[a77]"></a>__rt_SIGRTRED_inner$null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, defsig.o(CL$$defsig), UNUSED)

<P><STRONG><a name="[87]"></a>__rt_SIGSEGV_inner</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, defsig.o(CL$$defsig))
<BR>[Address Reference Count : 1]<UL><LI> defsig.o(CL$$defsig)
</UL>
<P><STRONG><a name="[89]"></a>__rt_SIGSTAK_inner</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, defsig.o(CL$$defsig))
<BR>[Address Reference Count : 1]<UL><LI> defsig.o(CL$$defsig)
</UL>
<P><STRONG><a name="[88]"></a>__rt_SIGTERM_inner</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, defsig.o(CL$$defsig))
<BR>[Address Reference Count : 1]<UL><LI> defsig.o(CL$$defsig)
</UL>
<P><STRONG><a name="[8c]"></a>__rt_SIGUSR1_inner</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, defsig.o(CL$$defsig))
<BR>[Address Reference Count : 1]<UL><LI> defsig.o(CL$$defsig)
</UL>
<P><STRONG><a name="[8d]"></a>__rt_SIGUSR2_inner</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, defsig.o(CL$$defsig))
<BR>[Address Reference Count : 1]<UL><LI> defsig.o(CL$$defsig)
</UL>
<P><STRONG><a name="[90]"></a>__rt_sigother_inner</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, defsig.o(CL$$defsig))
<BR>[Address Reference Count : 1]<UL><LI> defsig.o(CL$$defsig)
</UL>
<P><STRONG><a name="[229]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, components.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2d]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI0_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI2_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI4_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b6]"></a>FLASH_Erase_Sector</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[2b7]"></a>FLASH_FlushCaches</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_FlushCaches))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[2a9]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f4xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FLASH_WaitForLastOperation &rArr; HAL_GetTick &rArr; rt_tick_get_millisecond
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[2df]"></a>FSMC_NORSRAM_Extended_Timing_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_ll_fsmc.o(i.FSMC_NORSRAM_Extended_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FSMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[2dd]"></a>FSMC_NORSRAM_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_ll_fsmc.o(i.FSMC_NORSRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FSMC_NORSRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[2de]"></a>FSMC_NORSRAM_Timing_Init</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, stm32f4xx_ll_fsmc.o(i.FSMC_NORSRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FSMC_NORSRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[2ac]"></a>HAL_DMA_Abort</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_DMA_Abort &rArr; HAL_GetTick &rArr; rt_tick_get_millisecond
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
</UL>

<P><STRONG><a name="[2e8]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2ad]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_dma_config
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
</UL>

<P><STRONG><a name="[2af]"></a>HAL_DMA_Init</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Init &rArr; HAL_GetTick &rArr; rt_tick_get_millisecond
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_dma_config
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_init
</UL>

<P><STRONG><a name="[2b1]"></a>HAL_DMA_Start</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Start &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>

<P><STRONG><a name="[2b3]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>

<P><STRONG><a name="[2b4]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, stm32f4xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick &rArr; rt_tick_get_millisecond
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_erase
</UL>

<P><STRONG><a name="[9c5]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_write
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_erase
</UL>

<P><STRONG><a name="[2b8]"></a>HAL_FLASH_Program</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; HAL_GetTick &rArr; rt_tick_get_millisecond
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Word
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_HalfWord
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_write
</UL>

<P><STRONG><a name="[9c3]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_write
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_erase
</UL>

<P><STRONG><a name="[2ef]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
</UL>

<P><STRONG><a name="[2bf]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, drv_gpio.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[2a7]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[2be]"></a>HAL_GPIO_Init</STRONG> (Thumb, 470 bytes, Stack size 24 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_MspInit
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FSMC_MspInit
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_device_attach
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_mode
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
</UL>

<P><STRONG><a name="[9c6]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_read
</UL>

<P><STRONG><a name="[949]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_device_attach
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_write
</UL>

<P><STRONG><a name="[2aa]"></a>HAL_GetTick</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_common.o(i.HAL_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_GetTick &rArr; rt_tick_get_millisecond
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get_millisecond
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[328]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2c2]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Init &rArr; HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[2c4]"></a>HAL_InitTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_common.o(i.HAL_InitTick))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[2c5]"></a>HAL_MspInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[2f0]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
</UL>

<P><STRONG><a name="[2d2]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sdio_init
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_dma_config
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
</UL>

<P><STRONG><a name="[2c6]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sdio_init
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_dma_config
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
</UL>

<P><STRONG><a name="[2c3]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[2c9]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[2cc]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_systick_init
</UL>

<P><STRONG><a name="[2cb]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[2cd]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_sdio_clock_get
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_init
</UL>

<P><STRONG><a name="[2ca]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[2ce]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1172 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_GetTick &rArr; rt_tick_get_millisecond
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[2cf]"></a>HAL_SD_MspInit</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_SD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sdio_init
</UL>

<P><STRONG><a name="[320]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAError
</UL>

<P><STRONG><a name="[9c1]"></a>HAL_SPI_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
</UL>

<P><STRONG><a name="[2d0]"></a>HAL_SPI_Init</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_init
</UL>

<P><STRONG><a name="[2d1]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[2d3]"></a>HAL_SPI_Receive</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; rt_tick_get_millisecond
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
</UL>

<P><STRONG><a name="[2d6]"></a>HAL_SPI_Receive_DMA</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
</UL>

<P><STRONG><a name="[324]"></a>HAL_SPI_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
</UL>

<P><STRONG><a name="[321]"></a>HAL_SPI_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfReceiveCplt
</UL>

<P><STRONG><a name="[2d8]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 430 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; rt_tick_get_millisecond
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
</UL>

<P><STRONG><a name="[2d4]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 554 bytes, Stack size 56 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; rt_tick_get_millisecond
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
</UL>

<P><STRONG><a name="[2d7]"></a>HAL_SPI_TransmitReceive_DMA</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
</UL>

<P><STRONG><a name="[2da]"></a>HAL_SPI_Transmit_DMA</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_SPI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
</UL>

<P><STRONG><a name="[325]"></a>HAL_SPI_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
</UL>

<P><STRONG><a name="[322]"></a>HAL_SPI_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfTransmitCplt
</UL>

<P><STRONG><a name="[326]"></a>HAL_SPI_TxRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TxRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
</UL>

<P><STRONG><a name="[323]"></a>HAL_SPI_TxRxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TxRxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfTransmitReceiveCplt
</UL>

<P><STRONG><a name="[2db]"></a>HAL_SRAM_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_hal_sram.o(i.HAL_SRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SRAM_Init &rArr; HAL_SRAM_MspInit &rArr; HAL_FSMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_MspInit
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Timing_Init
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Init
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sram_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lcd_init
</UL>

<P><STRONG><a name="[2dc]"></a>HAL_SRAM_MspInit</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_SRAM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SRAM_MspInit &rArr; HAL_FSMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FSMC_MspInit
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[94e]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_systick_init
</UL>

<P><STRONG><a name="[2e0]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_systick_init
</UL>

<P><STRONG><a name="[2e9]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[2e1]"></a>HAL_UART_DeInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_UART_DeInit &rArr; HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
</UL>

<P><STRONG><a name="[2e3]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, drv_usart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_ErrorCallback &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[2e5]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 586 bytes, Stack size 40 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; dma_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[2ec]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_configure
</UL>

<P><STRONG><a name="[2e2]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_UART_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>

<P><STRONG><a name="[2ed]"></a>HAL_UART_MspInit</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[2f1]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_dma_config
</UL>

<P><STRONG><a name="[2f3]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, drv_usart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; dma_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[2f5]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, drv_usart.o(i.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = HAL_UART_RxHalfCpltCallback &rArr; dma_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[2f6]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_dma_transmit
</UL>

<P><STRONG><a name="[2f7]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, drv_usart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = HAL_UART_TxCpltCallback &rArr; _dma_tx_complete &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dma_tx_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[32d]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[a]"></a>LCD_BlitLine</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, drv_lcd.o(i.LCD_BlitLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_BlitLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_lcd.o(.data)
</UL>
<P><STRONG><a name="[309]"></a>LCD_Clear</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, drv_lcd.o(i.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LCD_Clear &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lcd_init
</UL>

<P><STRONG><a name="[30a]"></a>LCD_Display_Dir</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, drv_lcd.o(i.LCD_Display_Dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_Display_Dir &rArr; LCD_Scan_Dir
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lcd_init
</UL>

<P><STRONG><a name="[9]"></a>LCD_HLine</STRONG> (Thumb, 56 bytes, Stack size 28 bytes, drv_lcd.o(i.LCD_HLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_HLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_lcd.o(.data)
</UL>
<P><STRONG><a name="[30e]"></a>LCD_RD_DATA</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_lcd.o(i.LCD_RD_DATA))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lcd_init
</UL>

<P><STRONG><a name="[8]"></a>LCD_ReadPoint</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, drv_lcd.o(i.LCD_ReadPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_ReadPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_lcd.o(.data)
</UL>
<P><STRONG><a name="[30f]"></a>LCD_SSD_BackLightSet</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, drv_lcd.o(i.LCD_SSD_BackLightSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_SSD_BackLightSet &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lcd_init
</UL>

<P><STRONG><a name="[30b]"></a>LCD_Scan_Dir</STRONG> (Thumb, 624 bytes, Stack size 16 bytes, drv_lcd.o(i.LCD_Scan_Dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_Scan_Dir
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
</UL>

<P><STRONG><a name="[307]"></a>LCD_SetCursor</STRONG> (Thumb, 306 bytes, Stack size 4 bytes, drv_lcd.o(i.LCD_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HLine
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BlitLine
</UL>

<P><STRONG><a name="[30d]"></a>LCD_WR_DATA</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_lcd.o(i.LCD_WR_DATA))
<BR><BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lcd_init
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>

<P><STRONG><a name="[30c]"></a>LCD_WR_REG</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_lcd.o(i.LCD_WR_REG))
<BR><BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lcd_init
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>

<P><STRONG><a name="[308]"></a>LCD_WriteRAM_Prepare</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_lcd.o(i.LCD_WriteRAM_Prepare))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HLine
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BlitLine
</UL>

<P><STRONG><a name="[313]"></a>LCD_WriteReg</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_lcd.o(i.LCD_WriteReg))
<BR><BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lcd_init
</UL>

<P><STRONG><a name="[58]"></a>SDIO_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_sdio.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = SDIO_IRQHandler &rArr; rthw_sdio_irq_process &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rthw_sdio_irq_process
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a4]"></a>SD_LowLevel_DMA_RxConfig</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, drv_sdio.o(i.SD_LowLevel_DMA_RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SD_LowLevel_DMA_RxConfig &rArr; HAL_DMA_Start &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RxConfig
</UL>

<P><STRONG><a name="[2a5]"></a>SD_LowLevel_DMA_TxConfig</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, drv_sdio.o(i.SD_LowLevel_DMA_TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SD_LowLevel_DMA_TxConfig &rArr; HAL_DMA_Start &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_TxConfig
</UL>

<P><STRONG><a name="[26]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_common.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32a]"></a>SystemClock_Config</STRONG> (Thumb, 180 bytes, Stack size 80 bytes, board.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[78]"></a>SystemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[2f2]"></a>UART_Start_Receive_DMA</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.UART_Start_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>

<P><STRONG><a name="[4c]"></a>USART1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = USART1_IRQHandler &rArr; uart_isr &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; dma_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>USART2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_usart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = USART2_IRQHandler &rArr; uart_isr &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; dma_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32b]"></a>_Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_common.o(i._Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lcd_init
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[334]"></a>i2c_help()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, i2c_utils.o(i._Z8i2c_helpv))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = i2c_help() &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c(int, char**)
</UL>

<P><STRONG><a name="[330]"></a>i2c_init(int, int)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, i2c_utils.o(i._Z8i2c_initii))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = i2c_init(int, int) &rArr; SoftwareI2C::begin(int, int) &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::begin(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c(int, char**)
</UL>

<P><STRONG><a name="[335]"></a>i2c_read(unsigned char, unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, i2c_utils.o(i._Z8i2c_readhhPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = i2c_read(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; SoftwareI2C::requestFrom(unsigned char, unsigned char) &rArr; SoftwareI2C::sendByteAck(unsigned char) &rArr; SoftwareI2C::sdaSet(unsigned char) &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::read()
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::requestFrom(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c(int, char**)
</UL>

<P><STRONG><a name="[333]"></a>i2c_scan()</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, i2c_utils.o(i._Z8i2c_scanv))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = i2c_scan() &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_probe(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c(int, char**)
</UL>

<P><STRONG><a name="[32f]"></a>strtonum(const char*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, i2c_utils.o(i._Z8strtonumPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = strtonum(const char*) &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c(int, char**)
</UL>

<P><STRONG><a name="[33a]"></a>i2c_probe(char)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, i2c_utils.o(i._Z9i2c_probec))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = i2c_probe(char) &rArr; SoftwareI2C::beginTransmission(unsigned char) &rArr; SoftwareI2C::sendByteAck(unsigned char) &rArr; SoftwareI2C::sdaSet(unsigned char) &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::beginTransmission(unsigned char)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::endTransmission()
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_scan()
</UL>

<P><STRONG><a name="[336]"></a>i2c_write(char, unsigned char*, int)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, i2c_utils.o(i._Z9i2c_writecPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = i2c_write(char, unsigned char*, int) &rArr; SoftwareI2C::write(unsigned char*, unsigned char) &rArr; SoftwareI2C::write(unsigned char) &rArr; SoftwareI2C::sendByteAck(unsigned char) &rArr; SoftwareI2C::sdaSet(unsigned char) &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::write(unsigned char*, unsigned char)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::beginTransmission(unsigned char)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::endTransmission()
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c(int, char**)
</UL>

<P><STRONG><a name="[338]"></a>SoftwareI2C::requestFrom(unsigned char, unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, softwarei2c.o(i._ZN11SoftwareI2C11requestFromEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SoftwareI2C::requestFrom(unsigned char, unsigned char) &rArr; SoftwareI2C::sendByteAck(unsigned char) &rArr; SoftwareI2C::sdaSet(unsigned char) &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::sendStart()
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::sendByteAck(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[33f]"></a>SoftwareI2C::sendByteAck(unsigned char)</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, softwarei2c.o(i._ZN11SoftwareI2C11sendByteAckEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SoftwareI2C::sendByteAck(unsigned char) &rArr; SoftwareI2C::sdaSet(unsigned char) &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::sdaSet(unsigned char)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::sclSet(unsigned char)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::micros()
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::write(unsigned char)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::beginTransmission(unsigned char)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::requestFrom(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[33c]"></a>SoftwareI2C::endTransmission()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, softwarei2c.o(i._ZN11SoftwareI2C15endTransmissionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SoftwareI2C::endTransmission() &rArr; SoftwareI2C::sendStop() &rArr; SoftwareI2C::sdaSet(unsigned char) &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::sendStop()
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write(char, unsigned char*, int)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_probe(char)
</UL>

<P><STRONG><a name="[33b]"></a>SoftwareI2C::beginTransmission(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, softwarei2c.o(i._ZN11SoftwareI2C17beginTransmissionEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SoftwareI2C::beginTransmission(unsigned char) &rArr; SoftwareI2C::sendByteAck(unsigned char) &rArr; SoftwareI2C::sdaSet(unsigned char) &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::sendStart()
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::sendByteAck(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write(char, unsigned char*, int)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_probe(char)
</UL>

<P><STRONG><a name="[339]"></a>SoftwareI2C::read()</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, softwarei2c.o(i._ZN11SoftwareI2C4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SoftwareI2C::read() &rArr; SoftwareI2C::sendStop() &rArr; SoftwareI2C::sdaSet(unsigned char) &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::sendStop()
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::sdaSet(unsigned char)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::sclSet(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[337]"></a>SoftwareI2C::begin(int, int)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, softwarei2c.o(i._ZN11SoftwareI2C5beginEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SoftwareI2C::begin(int, int) &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init(int, int)
</UL>

<P><STRONG><a name="[33d]"></a>SoftwareI2C::write(unsigned char*, unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, softwarei2c.o(i._ZN11SoftwareI2C5writeEPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SoftwareI2C::write(unsigned char*, unsigned char) &rArr; SoftwareI2C::write(unsigned char) &rArr; SoftwareI2C::sendByteAck(unsigned char) &rArr; SoftwareI2C::sdaSet(unsigned char) &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::write(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write(char, unsigned char*, int)
</UL>

<P><STRONG><a name="[344]"></a>SoftwareI2C::write(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, softwarei2c.o(i._ZN11SoftwareI2C5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SoftwareI2C::write(unsigned char) &rArr; SoftwareI2C::sendByteAck(unsigned char) &rArr; SoftwareI2C::sdaSet(unsigned char) &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::sendByteAck(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::write(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[342]"></a>SoftwareI2C::micros()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, softwarei2c.o(i._ZN11SoftwareI2C6microsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SoftwareI2C::micros()
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::sendByteAck(unsigned char)
</UL>

<P><STRONG><a name="[340]"></a>SoftwareI2C::sclSet(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, softwarei2c.o(i._ZN11SoftwareI2C6sclSetEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SoftwareI2C::sclSet(unsigned char) &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::sendStop()
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::sendByteAck(unsigned char)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::read()
</UL>

<P><STRONG><a name="[341]"></a>SoftwareI2C::sdaSet(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, softwarei2c.o(i._ZN11SoftwareI2C6sdaSetEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SoftwareI2C::sdaSet(unsigned char) &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::sendStart()
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::sendStop()
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::sendByteAck(unsigned char)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::read()
</UL>

<P><STRONG><a name="[343]"></a>SoftwareI2C::sendStop()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, softwarei2c.o(i._ZN11SoftwareI2C8sendStopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SoftwareI2C::sendStop() &rArr; SoftwareI2C::sdaSet(unsigned char) &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::sdaSet(unsigned char)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::sclSet(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::read()
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::endTransmission()
</UL>

<P><STRONG><a name="[33e]"></a>SoftwareI2C::sendStart()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, softwarei2c.o(i._ZN11SoftwareI2C9sendStartEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SoftwareI2C::sendStart() &rArr; SoftwareI2C::sdaSet(unsigned char) &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::sdaSet(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::beginTransmission(unsigned char)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::requestFrom(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[278]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[671]"></a>__isleap</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, time.o(i.__isleap))
<BR><BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL>

<P><STRONG><a name="[137]"></a>__wqueue_default_wake</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, waitqueue.o(i.__wqueue_default_wake))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wqueue_pollwake
</UL>
<BR>[Address Reference Count : 1]<UL><LI> waitqueue.o(i.rt_wqueue_wait)
</UL>
<P><STRONG><a name="[245]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[34f]"></a>_lv_anim_core_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lv_anim.o(i._lv_anim_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = _lv_anim_core_init &rArr; lv_task_create &rArr; lv_task_create_basic &rArr; _lv_ll_ins_prev &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[354]"></a>_lv_area_align</STRONG> (Thumb, 868 bytes, Stack size 32 bytes, lv_area.o(i._lv_area_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _lv_area_align
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_value_str
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_core
</UL>

<P><STRONG><a name="[35d]"></a>_lv_area_intersect</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, lv_area.o(i._lv_area_intersect))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[357]"></a>_lv_area_is_in</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, lv_area.o(i._lv_area_is_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>
<BR>[Called By]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[80c]"></a>_lv_area_is_on</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, lv_area.o(i._lv_area_is_on))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_join_area
</UL>

<P><STRONG><a name="[358]"></a>_lv_area_is_point_on</STRONG> (Thumb, 402 bytes, Stack size 48 bytes, lv_area.o(i._lv_area_is_point_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_point_within_circle
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_point_on_coords
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
</UL>

<P><STRONG><a name="[80d]"></a>_lv_area_join</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, lv_area.o(i._lv_area_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_area_join
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_join_area
</UL>

<P><STRONG><a name="[35a]"></a>_lv_blend_fill</STRONG> (Thumb, 266 bytes, Stack size 80 bytes, lv_draw_blend.o(i._lv_blend_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _lv_blend_fill &rArr; fill_normal &rArr; lv_color_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_set_px
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_normal
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_blended
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
</UL>

<P><STRONG><a name="[362]"></a>_lv_blend_map</STRONG> (Thumb, 276 bytes, Stack size 88 bytes, lv_draw_blend.o(i._lv_blend_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _lv_blend_map &rArr; map_normal &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_set_px
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_normal
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_blended
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_subpx
</UL>

<P><STRONG><a name="[6c3]"></a>_lv_disp_pop_from_inv_buf</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lv_hal_disp.o(i._lv_disp_pop_from_inv_buf))
<BR><BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
</UL>

<P><STRONG><a name="[d2]"></a>_lv_disp_refr_task</STRONG> (Thumb, 454 bytes, Stack size 56 bytes, lv_refr.o(i._lv_disp_refr_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1732<LI>Call Chain = _lv_disp_refr_task &rArr; lv_refr_areas &rArr; lv_refr_area &rArr; lv_refr_area_part &rArr; lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr; lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_set_prio
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_true_double_buf
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_free_all
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_font_clean_up_fmt_txt
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_flush
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_join_area
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_areas
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_hal_disp.o(i.lv_disp_drv_register)
</UL>
<P><STRONG><a name="[373]"></a>_lv_font_clean_up_fmt_txt</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_font_fmt_txt.o(i._lv_font_clean_up_fmt_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _lv_font_clean_up_fmt_txt &rArr; lv_mem_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
</UL>

<P><STRONG><a name="[375]"></a>_lv_fs_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_fs.o(i._lv_fs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_fs_init
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[376]"></a>_lv_group_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_group.o(i._lv_group_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_group_init
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[377]"></a>_lv_img_buf_get_transformed_area</STRONG> (Thumb, 878 bytes, Stack size 96 bytes, lv_img_buf.o(i._lv_img_buf_get_transformed_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _lv_img_buf_get_transformed_area
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_trigo_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[37d]"></a>_lv_img_buf_transform_anti_alias</STRONG> (Thumb, 824 bytes, Stack size 88 bytes, lv_img_buf.o(i._lv_img_buf_transform_anti_alias))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = _lv_img_buf_transform_anti_alias &rArr; lv_img_buf_get_px_color &rArr; _lv_memcpy_small
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_color
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_alpha
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform
</UL>

<P><STRONG><a name="[380]"></a>_lv_img_buf_transform_init</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, lv_img_buf.o(i._lv_img_buf_transform_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _lv_img_buf_transform_init
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_is_chroma_keyed
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_has_alpha
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_trigo_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[383]"></a>_lv_img_cache_open</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, lv_img_cache.o(i._lv_img_cache_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = _lv_img_cache_open &rArr; lv_img_decoder_open &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
</UL>

<P><STRONG><a name="[387]"></a>_lv_img_decoder_init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, lv_img_decoder.o(i._lv_img_decoder_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = _lv_img_decoder_init &rArr; lv_img_decoder_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_set_read_line_cb
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_set_open_cb
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_set_info_cb
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_set_close_cb
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_create
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[38f]"></a>_lv_indev_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_indev.o(i._lv_indev_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _lv_indev_init &rArr; lv_indev_reset &rArr; lv_indev_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[391]"></a>_lv_indev_read</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lv_hal_indev.o(i._lv_indev_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _lv_indev_read &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read_task
</UL>

<P><STRONG><a name="[db]"></a>_lv_indev_read_task</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, lv_indev.o(i._lv_indev_read_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = _lv_indev_read_task &rArr; indev_pointer_proc &rArr; indev_proc_press &rArr; indev_drag &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_reset_query_handler
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_pointer_proc
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_button_proc
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_hal_indev.o(i.lv_indev_drv_register)
</UL>
<P><STRONG><a name="[397]"></a>_lv_inv_area</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, lv_refr.o(i._lv_inv_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_set_prio
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
</UL>

<P><STRONG><a name="[39b]"></a>_lv_ll_chg_list</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lv_ll.o(i._lv_ll_chg_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _lv_ll_chg_list &rArr; _lv_ll_remove &rArr; node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_prev
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_next
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
</UL>

<P><STRONG><a name="[d6]"></a>_lv_ll_get_head</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_ll.o(i._lv_ll_get_head))
<BR><BR>[Called By]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_set_prio
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_next
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_mod
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_position
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_prev
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_drv
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create_basic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_group.o(i.lv_group_focus_next)
</UL>
<P><STRONG><a name="[d5]"></a>_lv_ll_get_next</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_ll.o(i._lv_ll_get_next))
<BR><BR>[Called By]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_set_prio
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_next
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_mod
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_position
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_drv
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create_basic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_group.o(i.lv_group_focus_next)
</UL>
<P><STRONG><a name="[d7]"></a>_lv_ll_get_prev</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_ll.o(i._lv_ll_get_prev))
<BR><BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_move_before
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_prev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_group.o(i.lv_group_focus_prev)
</UL>
<P><STRONG><a name="[d8]"></a>_lv_ll_get_tail</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_ll.o(i._lv_ll_get_tail))
<BR><BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_move_before
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_group.o(i.lv_group_focus_prev)
</UL>
<P><STRONG><a name="[350]"></a>_lv_ll_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_ll.o(i._lv_ll_init))
<BR><BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_group_init
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_task_core_init
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_fs_init
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[39f]"></a>_lv_ll_ins_head</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lv_ll.o(i._lv_ll_ins_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_prev
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_next
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_create
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_prev
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_drv_register
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create_basic
</UL>

<P><STRONG><a name="[3a1]"></a>_lv_ll_ins_prev</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lv_ll.o(i._lv_ll_ins_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = _lv_ll_ins_prev &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_prev
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_next
</UL>
<BR>[Called By]<UL><LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create_basic
</UL>

<P><STRONG><a name="[3a2]"></a>_lv_ll_ins_tail</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lv_ll.o(i._lv_ll_ins_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = _lv_ll_ins_tail &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_prev
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_next
</UL>
<BR>[Called By]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create_basic
</UL>

<P><STRONG><a name="[6cc]"></a>_lv_ll_is_empty</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lv_ll.o(i._lv_ll_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
</UL>

<P><STRONG><a name="[3a3]"></a>_lv_ll_move_before</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lv_ll.o(i._lv_ll_move_before))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _lv_ll_move_before &rArr; _lv_ll_remove &rArr; node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_prev
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_next
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_set_prio
</UL>

<P><STRONG><a name="[39c]"></a>_lv_ll_remove</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, lv_ll.o(i._lv_ll_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _lv_ll_remove &rArr; node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_prev
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_next
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_chg_list
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_ready_handler
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_move_before
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_del
</UL>

<P><STRONG><a name="[372]"></a>_lv_mem_buf_free_all</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lv_mem.o(i._lv_mem_buf_free_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _lv_mem_buf_free_all &rArr; lv_mem_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
</UL>

<P><STRONG><a name="[36b]"></a>_lv_mem_buf_get</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, lv_mem.o(i._lv_mem_buf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_subpx
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompress
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[36f]"></a>_lv_mem_buf_release</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, lv_mem.o(i._lv_mem_buf_release))
<BR><BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_subpx
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompress
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[77a]"></a>_lv_mem_get_size</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_mem.o(i._lv_mem_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_bitmap_fmt_txt
</UL>

<P><STRONG><a name="[7ab]"></a>_lv_mem_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_mem.o(i._lv_mem_init))
<BR><BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[36e]"></a>_lv_memcpy</STRONG> (Thumb, 632 bytes, Stack size 24 bytes, lv_mem.o(i._lv_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_normal
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_copy
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_ready_handler
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_drv_register
</UL>

<P><STRONG><a name="[58a]"></a>_lv_memset</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, lv_mem.o(i._lv_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _lv_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[370]"></a>_lv_memset_00</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, lv_mem.o(i._lv_memset_00))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_create
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_invalidate_src
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_mask_steep
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_mask_flat
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_points_init
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_subpx
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_init
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_init
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_init
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_buf_init
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_drv_init
</UL>

<P><STRONG><a name="[58f]"></a>_lv_memset_ff</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, lv_mem.o(i._lv_memset_ff))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _lv_memset_ff
</UL>
<BR>[Called By]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
</UL>

<P><STRONG><a name="[3a5]"></a>_lv_obj_disable_style_caching</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lv_obj.o(i._lv_obj_disable_style_caching))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _lv_obj_disable_style_caching &rArr; lv_obj_get_style_list &rArr; lv_signal_send
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
</UL>
<BR>[Called By]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[3a7]"></a>_lv_obj_get_style_color</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, lv_obj.o(i._lv_obj_get_style_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _lv_obj_get_style_color &rArr; lv_obj_get_state &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_color
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pattern_recolor
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[3ab]"></a>_lv_obj_get_style_int</STRONG> (Thumb, 644 bytes, Stack size 48 bytes, lv_obj.o(i._lv_obj_get_style_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + In Cycle
<LI>Call Chain = _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_int
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_ofs_y
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_ofs_x
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_letter_space
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_blend_mode
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_align
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_zoom
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_angle
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_decor
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_blend_mode
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_width
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_spread
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_y
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_x
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_blend_mode
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_radius
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pattern_blend_mode
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_inner
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_width
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_pad
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_blend_mode
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_top
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_right
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_left
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_bottom
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_line_blend_mode
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_image_blend_mode
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_clip_corner
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_side
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_post
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_blend_mode
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_blend_mode
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_zoom
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_angle
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_clip_corner
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_post
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[3ae]"></a>_lv_obj_get_style_opa</STRONG> (Thumb, 278 bytes, Stack size 48 bytes, lv_obj.o(i._lv_obj_get_style_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = _lv_obj_get_style_opa &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_opa
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_opa
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_opa
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_opa
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_scale
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_image_recolor_opa
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_opa
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[3b0]"></a>_lv_obj_get_style_ptr</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, lv_obj.o(i._lv_obj_get_style_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + In Cycle
<LI>Call Chain = _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_font_normal
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_ptr
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_str
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_font
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pattern_image
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
</UL>

<P><STRONG><a name="[35b]"></a>_lv_refr_get_disp_refreshing</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_refr.o(i._lv_refr_get_disp_refreshing))
<BR><BR>[Called By]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_set_px
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_set_px
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_flush
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_subpx
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
</UL>

<P><STRONG><a name="[7af]"></a>_lv_refr_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_refr.o(i._lv_refr_init))
<BR><BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[777]"></a>_lv_sqrt</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, lv_math.o(i._lv_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _lv_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
</UL>

<P><STRONG><a name="[3b3]"></a>_lv_style_get_color</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, lv_style.o(i._lv_style_get_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _lv_style_get_color &rArr; get_property_index &rArr; get_style_prop_id &rArr; get_style_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_attr
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_color
</UL>

<P><STRONG><a name="[3b7]"></a>_lv_style_get_int</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, lv_style.o(i._lv_style_get_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _lv_style_get_int &rArr; get_property_index &rArr; get_style_prop_id &rArr; get_style_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_attr
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_int
</UL>

<P><STRONG><a name="[3b8]"></a>_lv_style_get_mem_size</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lv_style.o(i._lv_style_get_mem_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _lv_style_get_mem_size &rArr; get_style_prop_id &rArr; get_style_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_id
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_prop_index
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>

<P><STRONG><a name="[3bb]"></a>_lv_style_get_opa</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, lv_style.o(i._lv_style_get_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _lv_style_get_opa &rArr; get_property_index &rArr; get_style_prop_id &rArr; get_style_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_attr
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_opa
</UL>

<P><STRONG><a name="[3bc]"></a>_lv_style_get_ptr</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, lv_style.o(i._lv_style_get_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _lv_style_get_ptr &rArr; get_property_index &rArr; get_style_prop_id &rArr; get_style_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_attr
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_ptr
</UL>

<P><STRONG><a name="[3bd]"></a>_lv_style_list_add_style</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, lv_style.o(i._lv_style_list_add_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = _lv_style_list_add_style &rArr; _lv_style_list_remove_style &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_remove_style
</UL>
<BR>[Called By]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_alloc_local_style
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_trans_style
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
</UL>

<P><STRONG><a name="[3bf]"></a>_lv_style_list_add_trans_style</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, lv_style.o(i._lv_style_list_add_trans_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = _lv_style_list_add_trans_style &rArr; _lv_style_list_add_style &rArr; _lv_style_list_remove_style &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_transition_style
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_style
</UL>
<BR>[Called By]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[3a9]"></a>_lv_style_list_get_color</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, lv_style.o(i._lv_style_list_get_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _lv_style_list_get_color &rArr; _lv_style_get_color &rArr; get_property_index &rArr; get_style_prop_id &rArr; get_style_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_color
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_get_style
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
</UL>

<P><STRONG><a name="[3ad]"></a>_lv_style_list_get_int</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, lv_style.o(i._lv_style_list_get_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _lv_style_list_get_int &rArr; _lv_style_get_int &rArr; get_property_index &rArr; get_style_prop_id &rArr; get_style_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_int
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_get_style
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>

<P><STRONG><a name="[3af]"></a>_lv_style_list_get_opa</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, lv_style.o(i._lv_style_list_get_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _lv_style_list_get_opa &rArr; _lv_style_get_opa &rArr; get_property_index &rArr; get_style_prop_id &rArr; get_style_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_opa
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_get_style
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
</UL>

<P><STRONG><a name="[3b1]"></a>_lv_style_list_get_ptr</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, lv_style.o(i._lv_style_list_get_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = _lv_style_list_get_ptr &rArr; _lv_style_get_ptr &rArr; get_property_index &rArr; get_style_prop_id &rArr; get_style_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_ptr
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_get_style
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
</UL>

<P><STRONG><a name="[3c0]"></a>_lv_style_list_get_transition_style</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_style.o(i._lv_style_list_get_transition_style))
<BR><BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_reset
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_trans_style
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
</UL>

<P><STRONG><a name="[3be]"></a>_lv_style_list_remove_style</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, lv_style.o(i._lv_style_list_remove_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = _lv_style_list_remove_style &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_style
</UL>

<P><STRONG><a name="[3c3]"></a>_lv_style_list_reset</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, lv_style.o(i._lv_style_list_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _lv_style_list_reset &rArr; lv_style_reset &rArr; lv_mem_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_get_local_style
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_transition_style
</UL>
<BR>[Called By]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_copy
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean_style_list
</UL>

<P><STRONG><a name="[3c6]"></a>_lv_style_set_color</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, lv_style.o(i._lv_style_set_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_mem_size
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_resize
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_attr
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_value_color
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_color
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_grad_color
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_end_color
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_color
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_color
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_image_recolor
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[3c8]"></a>_lv_style_set_int</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, lv_style.o(i._lv_style_set_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_mem_size
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_resize
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_attr
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_time
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_prop_6
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_prop_5
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_delay
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transform_width
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_line_space
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_size
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_width
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_width
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_end_line_width
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_inner
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_width
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_pad
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_margin_top
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_margin_bottom
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_width
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_rounded
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_clip_corner
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_side
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[3c9]"></a>_lv_style_set_opa</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, lv_style.o(i._lv_style_set_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = _lv_style_set_opa &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_mem_size
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_resize
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_attr
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pattern_opa
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_opa
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_opa
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
</UL>

<P><STRONG><a name="[3ca]"></a>_lv_style_set_ptr</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, lv_style.o(i._lv_style_set_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = _lv_style_set_ptr &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_mem_size
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_resize
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_attr
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_value_font
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
</UL>

<P><STRONG><a name="[3cb]"></a>_lv_task_core_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_task.o(i._lv_task_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_task_core_init
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[378]"></a>_lv_trigo_sin</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, lv_math.o(i._lv_trigo_sin))
<BR><BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_init
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
</UL>

<P><STRONG><a name="[3cd]"></a>_lv_txt_get_next_line</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, lv_txt.o(i._lv_txt_get_next_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_next_word
</UL>
<BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_size
</UL>

<P><STRONG><a name="[3cf]"></a>_lv_txt_get_size</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, lv_txt.o(i._lv_txt_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_width
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
</UL>
<BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_value_str
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
</UL>

<P><STRONG><a name="[3d0]"></a>_lv_txt_get_width</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, lv_txt.o(i._lv_txt_get_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _lv_txt_get_width &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_is_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_size
</UL>

<P><STRONG><a name="[3d1]"></a>_lv_txt_is_cmd</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, lv_txt.o(i._lv_txt_is_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_width
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_next_word
</UL>

<P><STRONG><a name="[661]"></a>_lv_utils_bsearch</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, lv_utils.o(i._lv_utils_bsearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _lv_utils_bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_kern_value
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>

<P><STRONG><a name="[3da]"></a>_rt_errno</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, kservice.o(i._rt_errno))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _rt_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfsetospeed
<LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcsetattr
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_write
<LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
</UL>

<P><STRONG><a name="[262]"></a>_sys_close</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stubs.o(i._sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = _sys_close &rArr; close &rArr; dfs_file_close &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[22e]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stubs.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_raise
</UL>

<P><STRONG><a name="[257]"></a>_sys_flen</STRONG> (Thumb, 30 bytes, Stack size 72 bytes, stubs.o(i._sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[255]"></a>_sys_istty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stubs.o(i._sys_istty))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[25f]"></a>_sys_open</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, stubs.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = _sys_open &rArr; open &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[28b]"></a>_sys_read</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, stubs.o(i._sys_read), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_stdio_read
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[281]"></a>_sys_seek</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stubs.o(i._sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = _sys_seek &rArr; lseek &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[282]"></a>_sys_write</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, stubs.o(i._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = _sys_write &rArr; libc_stdio_write &rArr; write &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_stdio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[299]"></a>_ttywrch</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stubs.o(i._ttywrch))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[410]"></a>access</STRONG> (Thumb, 32 bytes, Stack size 80 bytes, dfs_posix.o(i.access))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = access &rArr; stat &rArr; dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_insert
</UL>

<P><STRONG><a name="[415]"></a>add_C51</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, vt_sl.o(i.add_C51))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = add_C51 &rArr; add_smoke &rArr; my_mvaddstr &rArr; vt_draw_char_at &rArr; vt_move_to &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mvaddstr
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_smoke
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_man
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_sl
</UL>

<P><STRONG><a name="[419]"></a>add_D51</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, vt_sl.o(i.add_D51))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = add_D51 &rArr; add_smoke &rArr; my_mvaddstr &rArr; vt_draw_char_at &rArr; vt_move_to &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mvaddstr
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_smoke
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_man
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_sl
</UL>

<P><STRONG><a name="[417]"></a>add_man</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, vt_sl.o(i.add_man))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = add_man &rArr; my_mvaddstr &rArr; vt_draw_char_at &rArr; vt_move_to &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mvaddstr
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_sl
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_D51
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_C51
</UL>

<P><STRONG><a name="[41a]"></a>add_sl</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, vt_sl.o(i.add_sl))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = add_sl &rArr; add_smoke &rArr; my_mvaddstr &rArr; vt_draw_char_at &rArr; vt_move_to &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mvaddstr
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_smoke
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_man
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_sl
</UL>

<P><STRONG><a name="[418]"></a>add_smoke</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, vt_sl.o(i.add_smoke))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = add_smoke &rArr; my_mvaddstr &rArr; vt_draw_char_at &rArr; vt_move_to &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mvaddstr
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_sl
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_D51
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_C51
</UL>

<P><STRONG><a name="[450]"></a>cJSON_InitHooks</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cjson.o(i.cJSON_InitHooks))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_hook_init
</UL>

<P><STRONG><a name="[1ac]"></a>cJSON_hook_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, cjson_port.o(i.cJSON_hook_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cJSON_hook_init
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_InitHooks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cjson_port.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[1db]"></a>cat</STRONG> (Thumb, 78 bytes, Stack size 96 bytes, dfs_file.o(i.cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = cat &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_file.o(FSymTab)
</UL>
<P><STRONG><a name="[96d]"></a>cfgetospeed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, posix_termios.o(i.cfgetospeed))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
</UL>

<P><STRONG><a name="[458]"></a>cfsetospeed</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, posix_termios.o(i.cfsetospeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cfsetospeed &rArr; _rt_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
</UL>

<P><STRONG><a name="[1e0]"></a>chdir</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, dfs_posix.o(i.chdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = chdir &rArr; opendir &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_posix.o(FSymTab)
</UL>
<P><STRONG><a name="[3f4]"></a>close</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, dfs_posix.o(i.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = close &rArr; dfs_file_close &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_stdio_set_console
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_terminal_width_height
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_insert
<LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_elmfat_sample
</UL>

<P><STRONG><a name="[475]"></a>closedir</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dfs_posix.o(i.closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = closedir &rArr; dfs_file_close &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elmfat_mount
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</UL>

<P><STRONG><a name="[485]"></a>closesocket</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, net_sockets.o(i.closesocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = closesocket &rArr; sal_closesocket &rArr; socket_delete &rArr; socket_free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_closesocket
</UL>
<BR>[Called By]<UL><LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_write
<LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_next_chunk
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_clean
</UL>

<P><STRONG><a name="[1cf]"></a>cmd_cat</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, msh_file.o(i.cmd_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = cmd_cat &rArr; cat &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1d1]"></a>cmd_cd</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, msh_file.o(i.cmd_cd))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = cmd_cd &rArr; chdir &rArr; opendir &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1cd]"></a>cmd_cp</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, msh_file.o(i.cmd_cp))
<BR><BR>[Stack]<UL><LI>Max Depth = 948<LI>Call Chain = cmd_cp &rArr; copy &rArr; copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1d5]"></a>cmd_df</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, msh_file.o(i.cmd_df))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = cmd_df &rArr; df &rArr; dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1d6]"></a>cmd_echo</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, msh_file.o(i.cmd_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = cmd_echo &rArr; open &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1cb]"></a>cmd_free</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, msh.o(i.cmd_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = cmd_free &rArr; list_memheap &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[1cc]"></a>cmd_ls</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, msh_file.o(i.cmd_ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = cmd_ls &rArr; ls &rArr; dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1d3]"></a>cmd_mkdir</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, msh_file.o(i.cmd_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = cmd_mkdir &rArr; mkdir &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1d4]"></a>cmd_mkfs</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, msh_file.o(i.cmd_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = cmd_mkfs &rArr; dfs_mkfs &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1ce]"></a>cmd_mv</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, msh_file.o(i.cmd_mv))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = cmd_mv &rArr; unlink &rArr; dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1ca]"></a>cmd_ps</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, msh.o(i.cmd_ps))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = cmd_ps &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[1d2]"></a>cmd_pwd</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, msh_file.o(i.cmd_pwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = cmd_pwd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[1d0]"></a>cmd_rm</STRONG> (Thumb, 268 bytes, Stack size 96 bytes, msh_file.o(i.cmd_rm))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = cmd_rm &rArr; directory_delete_for_msh &rArr;  directory_delete_for_msh (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[4b1]"></a>connect</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, net_sockets.o(i.connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = connect &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
</UL>

<P><STRONG><a name="[1dc]"></a>copy</STRONG> (Thumb, 280 bytes, Stack size 88 bytes, dfs_file.o(i.copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 932<LI>Call Chain = copy &rArr; copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_path_lastname
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_file.o(FSymTab)
</UL>
<P><STRONG><a name="[4fb]"></a>devfs_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, devfs.o(i.devfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = devfs_init &rArr; dfs_register &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
</UL>

<P><STRONG><a name="[1de]"></a>df</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, dfs_fs.o(i.df))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = df &rArr; dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_df
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_fs.o(FSymTab)
</UL>
<P><STRONG><a name="[171]"></a>dfs_device_fs_close</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, devfs.o(i.dfs_device_fs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = dfs_device_fs_close &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[175]"></a>dfs_device_fs_getdents</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, devfs.o(i.dfs_device_fs_getdents))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dfs_device_fs_getdents &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[172]"></a>dfs_device_fs_ioctl</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, devfs.o(i.dfs_device_fs_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dfs_device_fs_ioctl &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[177]"></a>dfs_device_fs_mount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, devfs.o(i.dfs_device_fs_mount))
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[170]"></a>dfs_device_fs_open</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, devfs.o(i.dfs_device_fs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = dfs_device_fs_open &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[173]"></a>dfs_device_fs_read</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, devfs.o(i.dfs_device_fs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dfs_device_fs_read &rArr; rt_device_read &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[178]"></a>dfs_device_fs_stat</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, devfs.o(i.dfs_device_fs_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = dfs_device_fs_stat &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[174]"></a>dfs_device_fs_write</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, devfs.o(i.dfs_device_fs_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dfs_device_fs_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[17a]"></a>dfs_elm_close</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, dfs_elm.o(i.dfs_elm_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = dfs_elm_close &rArr; f_close &rArr; f_sync &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[17e]"></a>dfs_elm_flush</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dfs_elm.o(i.dfs_elm_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = dfs_elm_flush &rArr; f_sync &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[180]"></a>dfs_elm_getdents</STRONG> (Thumb, 222 bytes, Stack size 320 bytes, dfs_elm.o(i.dfs_elm_getdents))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = dfs_elm_getdents &rArr; f_readdir &rArr; dir_read &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[17b]"></a>dfs_elm_ioctl</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, dfs_elm.o(i.dfs_elm_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = dfs_elm_ioctl &rArr; f_lseek &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[17f]"></a>dfs_elm_lseek</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, dfs_elm.o(i.dfs_elm_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = dfs_elm_lseek &rArr; f_seekdir &rArr; dir_read &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[183]"></a>dfs_elm_mkfs</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, dfs_elm.o(i.dfs_elm_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = dfs_elm_mkfs &rArr; f_mkfs &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[181]"></a>dfs_elm_mount</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, dfs_elm.o(i.dfs_elm_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = dfs_elm_mount &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[179]"></a>dfs_elm_open</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, dfs_elm.o(i.dfs_elm_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = dfs_elm_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[17c]"></a>dfs_elm_read</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, dfs_elm.o(i.dfs_elm_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = dfs_elm_read &rArr; f_read &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[187]"></a>dfs_elm_rename</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, dfs_elm.o(i.dfs_elm_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = dfs_elm_rename &rArr; f_rename &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[186]"></a>dfs_elm_stat</STRONG> (Thumb, 254 bytes, Stack size 384 bytes, dfs_elm.o(i.dfs_elm_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 892<LI>Call Chain = dfs_elm_stat &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[184]"></a>dfs_elm_statfs</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, dfs_elm.o(i.dfs_elm_statfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = dfs_elm_statfs &rArr; f_getfree &rArr; mount_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[185]"></a>dfs_elm_unlink</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, dfs_elm.o(i.dfs_elm_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = dfs_elm_unlink &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[182]"></a>dfs_elm_unmount</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dfs_elm.o(i.dfs_elm_unmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = dfs_elm_unmount &rArr; f_mount &rArr; ff_cre_syncobj &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[17d]"></a>dfs_elm_write</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, dfs_elm.o(i.dfs_elm_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = dfs_elm_write &rArr; f_write &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[616]"></a>dfs_fdtable_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dfs.o(i.dfs_fdtable_get))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[457]"></a>dfs_file_close</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dfs_file.o(i.dfs_file_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = dfs_file_close &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[4b7]"></a>dfs_file_getdents</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dfs_file.o(i.dfs_file_getdents))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dfs_file_getdents
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[612]"></a>dfs_file_ioctl</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, dfs_file.o(i.dfs_file_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dfs_file_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcntl
</UL>

<P><STRONG><a name="[752]"></a>dfs_file_lseek</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dfs_file.o(i.dfs_file_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dfs_file_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
</UL>

<P><STRONG><a name="[455]"></a>dfs_file_open</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, dfs_file.o(i.dfs_file_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[456]"></a>dfs_file_read</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, dfs_file.o(i.dfs_file_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfs_file_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>

<P><STRONG><a name="[51f]"></a>dfs_file_rename</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, dfs_file.o(i.dfs_file_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = dfs_file_rename &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
</UL>

<P><STRONG><a name="[4b4]"></a>dfs_file_stat</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, dfs_file.o(i.dfs_file_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[520]"></a>dfs_file_unlink</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, dfs_file.o(i.dfs_file_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
</UL>

<P><STRONG><a name="[4b8]"></a>dfs_file_write</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dfs_file.o(i.dfs_file_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dfs_file_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>

<P><STRONG><a name="[522]"></a>dfs_filesystem_get_mounted_path</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dfs_fs.o(i.dfs_filesystem_get_mounted_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = dfs_filesystem_get_mounted_path &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_remove
</UL>

<P><STRONG><a name="[523]"></a>dfs_filesystem_get_partition</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, dfs_fs.o(i.dfs_filesystem_get_partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = dfs_filesystem_get_partition &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
</UL>

<P><STRONG><a name="[51c]"></a>dfs_filesystem_lookup</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, dfs_fs.o(i.dfs_filesystem_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = dfs_filesystem_lookup &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
</UL>

<P><STRONG><a name="[1a1]"></a>dfs_init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, dfs.o(i.dfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = dfs_init &rArr; dfs_mount &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devfs_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[471]"></a>dfs_lock</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dfs.o(i.dfs_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_mounted_path
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[488]"></a>dfs_mkfs</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, dfs_fs.o(i.dfs_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = dfs_mkfs &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elmfat_mount
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkfs
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkfs
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_elmfat_sample
</UL>

<P><STRONG><a name="[525]"></a>dfs_mount</STRONG> (Thumb, 426 bytes, Stack size 88 bytes, dfs_fs.o(i.dfs_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = dfs_mount &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elmfat_mount
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_elmfat_sample
</UL>

<P><STRONG><a name="[9bd]"></a>dfs_net_get_fops</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dfs_net.o(i.dfs_net_get_fops))
<BR><BR>[Called By]<UL><LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</UL>

<P><STRONG><a name="[486]"></a>dfs_net_getsocket</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dfs_net.o(i.dfs_net_getsocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
</UL>

<P><STRONG><a name="[473]"></a>dfs_normalize_path</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, dfs.o(i.dfs_normalize_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
</UL>

<P><STRONG><a name="[4fc]"></a>dfs_register</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, dfs_fs.o(i.dfs_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = dfs_register &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devfs_init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_init
</UL>

<P><STRONG><a name="[4fd]"></a>dfs_statfs</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dfs_fs.o(i.dfs_statfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statfs
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
</UL>

<P><STRONG><a name="[51d]"></a>dfs_subdir</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, dfs.o(i.dfs_subdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dfs_subdir &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
</UL>

<P><STRONG><a name="[472]"></a>dfs_unlock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dfs.o(i.dfs_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_mounted_path
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[52c]"></a>dfs_unmount</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, dfs_fs.o(i.dfs_unmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = dfs_unmount &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_remove
</UL>

<P><STRONG><a name="[602]"></a>disk_initialize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dfs_elm.o(i.disk_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[4c6]"></a>disk_ioctl</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, dfs_elm.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = disk_ioctl &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[541]"></a>disk_read</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, dfs_elm.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = disk_read &rArr; rt_device_read &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[8b5]"></a>disk_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dfs_elm.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[4c9]"></a>disk_write</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, dfs_elm.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[553]"></a>dns_gethostbyname_addrtype</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, dns.o(i.dns_gethostbyname_addrtype))
<BR><BR>[Stack]<UL><LI>Max Depth = 780<LI>Call Chain = dns_gethostbyname_addrtype &rArr; dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_lookup
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
</UL>

<P><STRONG><a name="[718]"></a>dns_getserver</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dns.o(i.dns_getserver))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
</UL>

<P><STRONG><a name="[83c]"></a>dns_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dns.o(i.dns_init))
<BR><BR>[Called By]<UL><LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[560]"></a>dns_setserver</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, dns.o(i.dns_setserver))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dns_setserver &rArr; netdev_low_level_set_dns_server &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_dns_server
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dns
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_set_dns_server
</UL>

<P><STRONG><a name="[18b]"></a>dns_tmr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dns.o(i.dns_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = dns_tmr &rArr; dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entries
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[1a3]"></a>drv_lcd_hw_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, drv_lcd.o(i.drv_lcd_hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = drv_lcd_hw_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_lcd.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[512]"></a>elm_get_vol</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ff.o(i.elm_get_vol))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</UL>

<P><STRONG><a name="[1aa]"></a>elm_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dfs_elm.o(i.elm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = elm_init &rArr; dfs_register &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[1ad]"></a>elmfat_mount</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, mount_table.o(i.elmfat_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = elmfat_mount &rArr; dfs_mount &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_cpu_reset
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statfs
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_blk_device_create
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mount_table.o(.rti_fn.5)
</UL>
<P><STRONG><a name="[5b1]"></a>enc28j60_attach</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, enc28j60.o(i.enc28j60_attach))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = enc28j60_attach &rArr; eth_device_init &rArr; eth_device_init_with_flag &rArr; netifapi_netif_add &rArr; tcpip_api_call &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_op
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_phy_read
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_init
</UL>

<P><STRONG><a name="[1a5]"></a>enc28j60_init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, enc28j60_init.o(i.enc28j60_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = enc28j60_init &rArr; enc28j60_attach &rArr; eth_device_init &rArr; eth_device_init_with_flag &rArr; netifapi_netif_add &rArr; tcpip_api_call &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_irq_enable
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_attach_irq
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_attach
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_device_attach
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enc28j60_init.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[b7]"></a>enc28j60_isr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, enc28j60.o(i.enc28j60_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = enc28j60_isr &rArr; eth_device_ready &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_ready
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enc28j60_init.o(i.enc28j60_init)
</UL>
<P><STRONG><a name="[830]"></a>err_to_errno</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, err.o(i.err_to_errno))
<BR><BR>[Called By]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[5b5]"></a>eth_device_init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ethernetif.o(i.eth_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = eth_device_init &rArr; eth_device_init_with_flag &rArr; netifapi_netif_add &rArr; tcpip_api_call &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_attach
</UL>

<P><STRONG><a name="[5cf]"></a>eth_device_init_with_flag</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, ethernetif.o(i.eth_device_init_with_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = eth_device_init_with_flag &rArr; netifapi_netif_add &rArr; tcpip_api_call &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_add
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_flags_sync
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init
</UL>

<P><STRONG><a name="[5c3]"></a>eth_device_linkchange</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ethernetif.o(i.eth_device_linkchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = eth_device_linkchange &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_rx
</UL>

<P><STRONG><a name="[5c1]"></a>eth_device_ready</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ethernetif.o(i.eth_device_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = eth_device_ready &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_isr
</UL>

<P><STRONG><a name="[5dd]"></a>eth_system_device_init_private</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, ethernetif.o(i.eth_system_device_init_private))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = eth_system_device_init_private &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
</UL>

<P><STRONG><a name="[5e1]"></a>etharp_cleanup_netif</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, etharp.o(i.etharp_cleanup_netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = etharp_cleanup_netif &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>

<P><STRONG><a name="[5e5]"></a>etharp_input</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, etharp.o(i.etharp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = etharp_input &rArr; etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[b8]"></a>etharp_output</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, etharp.o(i.etharp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_device_init_with_flag)
</UL>
<P><STRONG><a name="[5ea]"></a>etharp_query</STRONG> (Thumb, 588 bytes, Stack size 56 bytes, etharp.o(i.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[5ec]"></a>etharp_request</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, etharp.o(i.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request_dst
</UL>
<BR>[Called By]<UL><LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[189]"></a>etharp_tmr</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, etharp.o(i.etharp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = etharp_tmr &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[144]"></a>ethernet_input</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, ethernet.o(i.ethernet_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 844<LI>Call Chain = ethernet_input &rArr; ip4_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_input)
</UL>
<P><STRONG><a name="[5eb]"></a>ethernet_output</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, ethernet.o(i.ethernet_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = ethernet_output &rArr; pbuf_header &rArr; pbuf_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[507]"></a>f_close</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = f_close &rArr; f_sync &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_close
</UL>

<P><STRONG><a name="[5f8]"></a>f_closedir</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ff.o(i.f_closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = f_closedir &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_dir_close
</UL>

<P><STRONG><a name="[519]"></a>f_getfree</STRONG> (Thumb, 262 bytes, Stack size 72 bytes, ff.o(i.f_getfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = f_getfree &rArr; mount_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_free
</UL>

<P><STRONG><a name="[50c]"></a>f_lseek</STRONG> (Thumb, 872 bytes, Stack size 72 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = f_lseek &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_ioctl
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_seek
</UL>

<P><STRONG><a name="[513]"></a>f_mkdir</STRONG> (Thumb, 310 bytes, Stack size 96 bytes, ff.o(i.f_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</UL>

<P><STRONG><a name="[510]"></a>f_mkfs</STRONG> (Thumb, 1902 bytes, Stack size 152 bytes, ff.o(i.f_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = f_mkfs &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</UL>

<P><STRONG><a name="[50f]"></a>f_mount</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = f_mount &rArr; ff_cre_syncobj &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</UL>

<P><STRONG><a name="[514]"></a>f_open</STRONG> (Thumb, 560 bytes, Stack size 112 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
</UL>

<P><STRONG><a name="[511]"></a>f_opendir</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, ff.o(i.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_dir_open
</UL>

<P><STRONG><a name="[515]"></a>f_read</STRONG> (Thumb, 564 bytes, Stack size 72 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = f_read &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_read
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
</UL>

<P><STRONG><a name="[50a]"></a>f_readdir</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ff.o(i.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_dir_read
</UL>

<P><STRONG><a name="[516]"></a>f_rename</STRONG> (Thumb, 330 bytes, Stack size 168 bytes, ff.o(i.f_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = f_rename &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rename
</UL>

<P><STRONG><a name="[50d]"></a>f_seekdir</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ff.o(i.f_seekdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = f_seekdir &rArr; dir_read &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
</UL>

<P><STRONG><a name="[517]"></a>f_stat</STRONG> (Thumb, 104 bytes, Stack size 72 bytes, ff.o(i.f_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
</UL>

<P><STRONG><a name="[509]"></a>f_sync</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = f_sync &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_flush
</UL>

<P><STRONG><a name="[50b]"></a>f_truncate</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, ff.o(i.f_truncate))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = f_truncate &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_ioctl
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_trunc
</UL>

<P><STRONG><a name="[51a]"></a>f_unlink</STRONG> (Thumb, 212 bytes, Stack size 120 bytes, ff.o(i.f_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_remove
</UL>

<P><STRONG><a name="[51b]"></a>f_write</STRONG> (Thumb, 632 bytes, Stack size 72 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = f_write &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_write
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write
</UL>

<P><STRONG><a name="[5ac]"></a>fal_blk_device_create</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, fal_rtt.o(i.fal_blk_device_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = fal_blk_device_create &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elmfat_mount
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_elmfat_sample
</UL>

<P><STRONG><a name="[608]"></a>fal_flash_device_find</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fal_flash.o(i.fal_flash_device_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = fal_flash_device_find &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_blk_device_create
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_test
</UL>

<P><STRONG><a name="[60c]"></a>fal_flash_init</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, fal_flash.o(i.fal_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = fal_flash_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
</UL>

<P><STRONG><a name="[5ab]"></a>fal_init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, fal.o(i.fal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = fal_init &rArr; fal_partition_init &rArr; fal_show_part_table &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_init
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elmfat_mount
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_sample
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_elmfat_sample
</UL>

<P><STRONG><a name="[607]"></a>fal_init_check</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fal.o(i.fal_init_check))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
</UL>

<P><STRONG><a name="[44a]"></a>fal_partition_erase</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, fal_partition.o(i.fal_partition_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = fal_partition_erase &rArr; fal_flash_device_find &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase_all
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_dev_write
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_dev_control
</UL>

<P><STRONG><a name="[459]"></a>fal_partition_erase_all</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fal_partition.o(i.fal_partition_erase_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = fal_partition_erase_all &rArr; fal_partition_erase &rArr; fal_flash_device_find &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_dev_fopen
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_test
</UL>

<P><STRONG><a name="[609]"></a>fal_partition_find</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fal_partition.o(i.fal_partition_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = fal_partition_find &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_blk_device_create
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_test
</UL>

<P><STRONG><a name="[60f]"></a>fal_partition_init</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, fal_partition.o(i.fal_partition_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = fal_partition_init &rArr; fal_show_part_table &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_show_part_table
</UL>
<BR>[Called By]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
</UL>

<P><STRONG><a name="[44b]"></a>fal_partition_read</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, fal_partition.o(i.fal_partition_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = fal_partition_read &rArr; fal_flash_device_find &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_dev_fread
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_dev_read
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_test
</UL>

<P><STRONG><a name="[44c]"></a>fal_partition_write</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, fal_partition.o(i.fal_partition_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = fal_partition_write &rArr; fal_flash_device_find &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_dev_fwrite
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_dev_write
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_test
</UL>

<P><STRONG><a name="[60a]"></a>fal_show_part_table</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, fal_partition.o(i.fal_show_part_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = fal_show_part_table &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
</UL>

<P><STRONG><a name="[611]"></a>fcntl</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, dfs_posix.o(i.fcntl))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = fcntl &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_ioctl
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl
</UL>

<P><STRONG><a name="[483]"></a>fd_get</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dfs.o(i.fd_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = fd_get &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_stdio_get_console
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_pollfd
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcntl
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
</UL>

<P><STRONG><a name="[521]"></a>fd_is_open</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, dfs.o(i.fd_is_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>

<P><STRONG><a name="[617]"></a>fd_new</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, dfs.o(i.fd_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</UL>

<P><STRONG><a name="[484]"></a>fd_put</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dfs.o(i.fd_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_pollfd
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcntl
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
</UL>

<P><STRONG><a name="[604]"></a>ff_cre_syncobj</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dfs_elm.o(i.ff_cre_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = ff_cre_syncobj &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[603]"></a>ff_del_syncobj</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dfs_elm.o(i.ff_del_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = ff_del_syncobj &rArr; rt_mutex_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[533]"></a>ff_memalloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dfs_elm.o(i.ff_memalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = ff_memalloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[534]"></a>ff_memfree</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dfs_elm.o(i.ff_memfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = ff_memfree &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[9ce]"></a>ff_oem2uni</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ffunicode.o(i.ff_oem2uni))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_oem2uni
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
</UL>

<P><STRONG><a name="[61a]"></a>ff_rel_grant</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dfs_elm.o(i.ff_rel_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>

<P><STRONG><a name="[61b]"></a>ff_req_grant</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dfs_elm.o(i.ff_req_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
</UL>

<P><STRONG><a name="[4c4]"></a>ff_uni2oem</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ffunicode.o(i.ff_uni2oem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_uni2oem
</UL>
<BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_utf
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[48e]"></a>ff_wtoupper</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, ffunicode.o(i.ff_wtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[25a]"></a>fgetc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fgetc.o(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fgetc &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>

<P><STRONG><a name="[625]"></a>finsh_get_prompt</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, shell.o(i.finsh_get_prompt))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = finsh_get_prompt &rArr; getcwd &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_is_used
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[62a]"></a>finsh_set_prompt_mode</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, shell.o(i.finsh_set_prompt_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = finsh_set_prompt_mode &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[62b]"></a>finsh_system_function_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shell.o(i.finsh_system_function_init))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[1ae]"></a>finsh_system_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, shell.o(i.finsh_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = finsh_system_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_function_init
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[c5]"></a>finsh_thread_entry</STRONG> (Thumb, 1250 bytes, Stack size 0 bytes, shell.o(i.finsh_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = finsh_thread_entry &rArr; shell_auto_complete &rArr; msh_auto_complete &rArr; msh_auto_complete_path &rArr; opendir &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memmove
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_is_used
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(i.finsh_system_init)
</UL>
<P><STRONG><a name="[80]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[12]"></a>free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mem_std.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_open
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_close
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cjson.o(i.cJSON_InitHooks)
<LI> cjson.o(.data)
</UL>
<P><STRONG><a name="[63d]"></a>freeaddrinfo</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, net_netdb.o(i.freeaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = freeaddrinfo &rArr; sal_freeaddrinfo &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_freeaddrinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
</UL>

<P><STRONG><a name="[3f5]"></a>fstat</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, dfs_posix.o(i.fstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = fstat &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_insert
</UL>

<P><STRONG><a name="[61d]"></a>full_read</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, vi_utils.o(i.full_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = full_read &rArr; safe_read &rArr; read &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_insert
</UL>

<P><STRONG><a name="[61e]"></a>full_write</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, vi_utils.o(i.full_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = full_write &rArr; safe_write &rArr; write &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_write
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write
</UL>

<P><STRONG><a name="[5fd]"></a>get_fattime</STRONG> (Thumb, 84 bytes, Stack size 64 bytes, dfs_elm.o(i.get_fattime))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = get_fattime &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[668]"></a>get_terminal_width_height</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, vi_utils.o(i.get_terminal_width_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = get_terminal_width_height &rArr; isatty &rArr; tcgetattr &rArr; ioctl &rArr; fcntl &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isatty
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wh_helper
</UL>
<BR>[Called By]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_screen_dimensions
</UL>

<P><STRONG><a name="[66e]"></a>getaddrinfo</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, net_netdb.o(i.getaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = getaddrinfo &rArr; sal_getaddrinfo &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_getaddrinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
</UL>

<P><STRONG><a name="[627]"></a>getcwd</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dfs_posix.o(i.getcwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = getcwd &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</UL>

<P><STRONG><a name="[670]"></a>gmtime_r</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, time.o(i.gmtime_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gmtime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__isleap
</UL>
<BR>[Called By]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
</UL>

<P><STRONG><a name="[67c]"></a>gt917s_sample</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, gt917s_sample.o(i.gt917s_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = gt917s_sample &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_sample_demo
</UL>

<P><STRONG><a name="[1af]"></a>gt917s_sample_demo</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gt917s_sample.o(i.gt917s_sample_demo))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = gt917s_sample_demo &rArr; gt917s_sample &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_sample
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt917s_sample.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[1bb]"></a>hello</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(i.hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = hello &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[69a]"></a>icmp_dest_unreach</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(i.icmp_dest_unreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[69c]"></a>icmp_input</STRONG> (Thumb, 474 bytes, Stack size 56 bytes, icmp.o(i.icmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = icmp_input &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[83b]"></a>igmp_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, igmp.o(i.igmp_init))
<BR><BR>[Called By]<UL><LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[6a3]"></a>igmp_input</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, igmp.o(i.igmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = igmp_input &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[6a7]"></a>igmp_joingroup</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, igmp.o(i.igmp_joingroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = igmp_joingroup &rArr; igmp_joingroup_netif &rArr; igmp_send &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
</UL>
<BR>[Called By]<UL><LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_join_leave_group
</UL>

<P><STRONG><a name="[6a8]"></a>igmp_joingroup_netif</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, igmp.o(i.igmp_joingroup_netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = igmp_joingroup_netif &rArr; igmp_send &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start_timer
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
</UL>
<BR>[Called By]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
</UL>

<P><STRONG><a name="[6ab]"></a>igmp_leavegroup</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, igmp.o(i.igmp_leavegroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = igmp_leavegroup &rArr; igmp_leavegroup_netif &rArr; igmp_send &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
</UL>
<BR>[Called By]<UL><LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_join_leave_group
</UL>

<P><STRONG><a name="[6ac]"></a>igmp_leavegroup_netif</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, igmp.o(i.igmp_leavegroup_netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = igmp_leavegroup_netif &rArr; igmp_send &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_remove_group
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
</UL>

<P><STRONG><a name="[6a4]"></a>igmp_lookfor_group</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, igmp.o(i.igmp_lookfor_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = igmp_lookfor_group
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
</UL>

<P><STRONG><a name="[6ae]"></a>igmp_report_groups</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, igmp.o(i.igmp_report_groups))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = igmp_report_groups &rArr; igmp_delaying_member &rArr; igmp_start_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
</UL>
<BR>[Called By]<UL><LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
</UL>

<P><STRONG><a name="[6af]"></a>igmp_start</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, igmp.o(i.igmp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = igmp_start &rArr; igmp_lookup_group &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
</UL>
<BR>[Called By]<UL><LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[18a]"></a>igmp_tmr</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, igmp.o(i.igmp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = igmp_tmr &rArr; igmp_timeout &rArr; igmp_send &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[9b2]"></a>index_in_strings</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, vi_utils.o(i.index_in_strings))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = index_in_strings
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setops
</UL>

<P><STRONG><a name="[69e]"></a>inet_chksum</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, inet_chksum.o(i.inet_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_prepare_echo
</UL>

<P><STRONG><a name="[69d]"></a>inet_chksum_pbuf</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, inet_chksum.o(i.inet_chksum_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[6d8]"></a>inet_chksum_pseudo</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, inet_chksum.o(i.inet_chksum_pseudo))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = inet_chksum_pseudo &rArr; inet_cksum_pseudo_base &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_base
</UL>
<BR>[Called By]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
</UL>

<P><STRONG><a name="[6e2]"></a>init_mmc</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, mmc.o(i.init_mmc))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = init_mmc &rArr; mmcsd_mmc_init_card &rArr; mmc_select_bus_width &rArr; mmc_compare_ext_csds &rArr; mmc_get_ext_csd &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_read_ocr
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_voltage
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_unlock
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_lock
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_remove
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[6ea]"></a>init_sd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, sd.o(i.init_sd))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = init_sd &rArr; rt_mmcsd_blk_probe &rArr; rt_mmcsd_req_blk &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_read_ocr
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_voltage
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_go_idle
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_unlock
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_lock
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_remove
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[6ed]"></a>init_sdio</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, sdio.o(i.init_sdio))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = init_sdio &rArr; sdio_init_card &rArr; sdio_initialize_function &rArr; sdio_read_cis &rArr; sdio_io_readb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_voltage
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[66a]"></a>ioctl</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, dfs_posix.o(i.ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = ioctl &rArr; fcntl &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcntl
</UL>
<BR>[Called By]<UL><LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcsetattr
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcgetattr
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_terminal_width_height
</UL>

<P><STRONG><a name="[5e8]"></a>ip4_addr_isbroadcast_u32</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, ip4_addr.o(i.ip4_addr_isbroadcast_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip4_addr_isbroadcast_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[145]"></a>ip4_input</STRONG> (Thumb, 546 bytes, Stack size 40 bytes, ip4.o(i.ip4_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = ip4_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_input)
</UL>
<P><STRONG><a name="[69f]"></a>ip4_output_if</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, ip4.o(i.ip4_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; pbuf_header &rArr; pbuf_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[6a6]"></a>ip4_output_if_opt</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, ip4.o(i.ip4_output_if_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; pbuf_header &rArr; pbuf_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
</UL>
<BR>[Called By]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_ip_output_if
</UL>

<P><STRONG><a name="[6fa]"></a>ip4_output_if_opt_src</STRONG> (Thumb, 414 bytes, Stack size 56 bytes, ip4.o(i.ip4_output_if_opt_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = ip4_output_if_opt_src &rArr; pbuf_header &rArr; pbuf_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt
</UL>

<P><STRONG><a name="[6fb]"></a>ip4_output_if_src</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, ip4.o(i.ip4_output_if_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; pbuf_header &rArr; pbuf_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
</UL>
<BR>[Called By]<UL><LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[6a0]"></a>ip4_route</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, ip4.o(i.ip4_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[554]"></a>ip4addr_aton</STRONG> (Thumb, 416 bytes, Stack size 48 bytes, ip4_addr.o(i.ip4addr_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = ip4addr_aton &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dns
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
</UL>

<P><STRONG><a name="[6fc]"></a>ip4addr_ntoa</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ip4_addr.o(i.ip4addr_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ip4addr_ntoa &rArr; ip4addr_ntoa_r
</UL>
<BR>[Calls]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
</UL>

<P><STRONG><a name="[6fd]"></a>ip4addr_ntoa_r</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, ip4_addr.o(i.ip4addr_ntoa_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
</UL>

<P><STRONG><a name="[6fe]"></a>ip_chksum_pseudo</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, inet_chksum.o(i.ip_chksum_pseudo))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ip_chksum_pseudo &rArr; inet_chksum_pseudo &rArr; inet_cksum_pseudo_base &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[5d3]"></a>ipaddr_addr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ip4_addr.o(i.ipaddr_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = ipaddr_addr &rArr; ip4addr_aton &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>

<P><STRONG><a name="[669]"></a>isatty</STRONG> (Thumb, 28 bytes, Stack size 72 bytes, unistd.o(i.isatty))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = isatty &rArr; tcgetattr &rArr; ioctl &rArr; fcntl &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcgetattr
</UL>
<BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_terminal_width_height
</UL>

<P><STRONG><a name="[494]"></a>isblank</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, vi_utils.o(i.isblank))
<BR><BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indent_len
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_one_address
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_address
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
</UL>

<P><STRONG><a name="[4f6]"></a>jd_decomp</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, tjpgd.o(i.jd_decomp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = jd_decomp &rArr; mcu_load &rArr; huffext
</UL>
<BR>[Calls]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_output
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_read_line
</UL>

<P><STRONG><a name="[4f0]"></a>jd_prepare</STRONG> (Thumb, 862 bytes, Stack size 56 bytes, tjpgd.o(i.jd_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = jd_prepare &rArr; create_huffman_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_qt_tbl
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_huffman_tbl
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_pool
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_read_line
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_open
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_info
</UL>

<P><STRONG><a name="[615]"></a>libc_stdio_get_console</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stdio.o(i.libc_stdio_get_console))
<BR><BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[3f7]"></a>libc_stdio_read</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stdio.o(i.libc_stdio_read), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[70a]"></a>libc_stdio_set_console</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, stdio.o(i.libc_stdio_set_console))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = libc_stdio_set_console &rArr; open &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_system_init
</UL>

<P><STRONG><a name="[3fa]"></a>libc_stdio_write</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stdio.o(i.libc_stdio_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = libc_stdio_write &rArr; write &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[1a9]"></a>libc_system_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, libc.o(i.libc_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 484 + Unknown Stack Size
<LI>Call Chain = libc_system_init &rArr; libc_stdio_set_console &rArr; open &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_stdio_set_console
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libc.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[1c8]"></a>list</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, cmd.o(i.list))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = list &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1c7]"></a>list_device</STRONG> (Thumb, 172 bytes, Stack size 96 bytes, cmd.o(i.list_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = list_device &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1c0]"></a>list_event</STRONG> (Thumb, 204 bytes, Stack size 96 bytes, cmd.o(i.list_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = list_event &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1d8]"></a>list_fd</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, dfs.o(i.list_fd))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = list_fd &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs.o(FSymTab)
</UL>
<P><STRONG><a name="[1e4]"></a>list_if</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, ethernetif.o(i.list_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = list_if &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_getserver
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(FSymTab)
</UL>
<P><STRONG><a name="[1c2]"></a>list_mailbox</STRONG> (Thumb, 224 bytes, Stack size 104 bytes, cmd.o(i.list_mailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = list_mailbox &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1c4]"></a>list_memheap</STRONG> (Thumb, 158 bytes, Stack size 96 bytes, cmd.o(i.list_memheap))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = list_memheap &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1c5]"></a>list_mempool</STRONG> (Thumb, 232 bytes, Stack size 112 bytes, cmd.o(i.list_mempool))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = list_mempool &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1c3]"></a>list_msgqueue</STRONG> (Thumb, 216 bytes, Stack size 96 bytes, cmd.o(i.list_msgqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = list_msgqueue &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1c1]"></a>list_mutex</STRONG> (Thumb, 168 bytes, Stack size 104 bytes, cmd.o(i.list_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = list_mutex &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1bf]"></a>list_sem</STRONG> (Thumb, 216 bytes, Stack size 96 bytes, cmd.o(i.list_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = list_sem &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1e5]"></a>list_tcps</STRONG> (Thumb, 260 bytes, Stack size 64 bytes, ethernetif.o(i.list_tcps))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = list_tcps &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_debug_state_str
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_netstat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(FSymTab)
</UL>
<P><STRONG><a name="[1be]"></a>list_thread</STRONG> (Thumb, 294 bytes, Stack size 232 bytes, cmd.o(i.list_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1c6]"></a>list_timer</STRONG> (Thumb, 190 bytes, Stack size 96 bytes, cmd.o(i.list_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = list_timer &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[1e6]"></a>list_udps</STRONG> (Thumb, 94 bytes, Stack size 64 bytes, ethernetif.o(i.list_udps))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = list_udps &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_netstat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(FSymTab)
</UL>
<P><STRONG><a name="[71c]"></a>littlevgl2rtt_init</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, littlevgl2rtt.o(i.littlevgl2rtt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = littlevgl2rtt_init &rArr; lv_init &rArr; lv_theme_material_init &rArr; lv_obj_report_style_mod &rArr; report_style_mod_core &rArr;  report_style_mod_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bmp_init
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_split_jpeg_init
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_png_init
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_init
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_init
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_buf_init
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_fs_init
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_tick_handler_init
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_task_handler_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_lvgl_demo_init
</UL>

<P><STRONG><a name="[677]"></a>littlevgl2rtt_send_input_event</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, littlevgl2rtt.o(i.littlevgl2rtt_send_input_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = littlevgl2rtt_send_input_event
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_entry
</UL>

<P><STRONG><a name="[65e]"></a>localtime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, time.o(i.localtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = localtime &rArr; localtime_r &rArr; gmtime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>

<P><STRONG><a name="[729]"></a>localtime_r</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, time.o(i.localtime_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = localtime_r &rArr; gmtime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[72d]"></a>lodepng_add_text</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lodepng.o(i.lodepng_add_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = lodepng_add_text &rArr; lodepng_add_text_sized &rArr; lodepng_realloc &rArr; realloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_strlen
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_text_sized
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_tEXt
</UL>

<P><STRONG><a name="[4e1]"></a>lodepng_chunk_ancillary</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lodepng.o(i.lodepng_chunk_ancillary))
<BR><BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[4e2]"></a>lodepng_chunk_append</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, lodepng.o(i.lodepng_chunk_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = lodepng_chunk_append &rArr; lodepng_realloc &rArr; realloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_realloc
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_addofl
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_length
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[4e3]"></a>lodepng_chunk_check_crc</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lodepng.o(i.lodepng_chunk_check_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lodepng_chunk_check_crc &rArr; lodepng_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_read32bitInt
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_crc32
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_length
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[4d3]"></a>lodepng_chunk_data_const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lodepng.o(i.lodepng_chunk_data_const))
<BR><BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[4d2]"></a>lodepng_chunk_length</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lodepng.o(i.lodepng_chunk_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lodepng_chunk_length
</UL>
<BR>[Calls]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_read32bitInt
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inspect
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_next_const
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_check_crc
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_append
</UL>

<P><STRONG><a name="[4e4]"></a>lodepng_chunk_next_const</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lodepng.o(i.lodepng_chunk_next_const))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lodepng_chunk_next_const &rArr; lodepng_chunk_length
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_addofl
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_length
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[4d4]"></a>lodepng_chunk_type_equals</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lodepng.o(i.lodepng_chunk_type_equals))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lodepng_chunk_type_equals
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inspect
</UL>

<P><STRONG><a name="[732]"></a>lodepng_clear_icc</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lodepng.o(i.lodepng_clear_icc))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = lodepng_clear_icc &rArr; string_cleanup &rArr; lodepng_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_cleanup
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iCCP
</UL>

<P><STRONG><a name="[734]"></a>lodepng_color_mode_cleanup</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lodepng.o(i.lodepng_color_mode_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = lodepng_color_mode_cleanup &rArr; lodepng_palette_clear &rArr; lodepng_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_palette_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_state_cleanup
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_cleanup
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_copy
</UL>

<P><STRONG><a name="[736]"></a>lodepng_color_mode_copy</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lodepng.o(i.lodepng_color_mode_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = lodepng_color_mode_copy &rArr; lodepng_malloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_memcpy
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
</UL>

<P><STRONG><a name="[74b]"></a>lodepng_color_mode_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lodepng.o(i.lodepng_color_mode_init))
<BR><BR>[Called By]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_state_init
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_init
</UL>

<P><STRONG><a name="[743]"></a>lodepng_compress_settings_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lodepng.o(i.lodepng_compress_settings_init))
<BR><BR>[Called By]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_encoder_settings_init
</UL>

<P><STRONG><a name="[737]"></a>lodepng_convert</STRONG> (Thumb, 476 bytes, Stack size 152 bytes, lodepng.o(i.lodepng_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = lodepng_convert &rArr; color_tree_add &rArr; lodepng_malloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_memcpy
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_equal
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixelColorsRGBA8
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixelColorsRGB8
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixelColorRGBA8
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixelColorRGBA16
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_init
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_cleanup
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_add
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_raw_size
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgba8ToPixel
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgba16ToPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
</UL>

<P><STRONG><a name="[731]"></a>lodepng_crc32</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, lodepng.o(i.lodepng_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lodepng_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inspect
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_check_crc
</UL>

<P><STRONG><a name="[73c]"></a>lodepng_decode</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, lodepng.o(i.lodepng_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1068<LI>Call Chain = lodepng_decode &rArr; decodeGeneric &rArr; readChunk_iTXt &rArr; zlib_decompress &rArr; lodepng_zlib_decompressv &rArr; inflatev &rArr; lodepng_inflatev &rArr; inflateHuffmanBlock &rArr; getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; HuffmanTree_makeTable &rArr; lodepng_malloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_equal
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_raw_size
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode_memory
</UL>

<P><STRONG><a name="[4f3]"></a>lodepng_decode32</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, lodepng.o(i.lodepng_decode32))
<BR><BR>[Stack]<UL><LI>Max Depth = 1540<LI>Call Chain = lodepng_decode32 &rArr; lodepng_decode_memory &rArr; lodepng_decode &rArr; decodeGeneric &rArr; readChunk_iTXt &rArr; zlib_decompress &rArr; lodepng_zlib_decompressv &rArr; inflatev &rArr; lodepng_inflatev &rArr; inflateHuffmanBlock &rArr; getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; HuffmanTree_makeTable &rArr; lodepng_malloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode_memory
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_open
</UL>

<P><STRONG><a name="[73d]"></a>lodepng_decode_memory</STRONG> (Thumb, 74 bytes, Stack size 432 bytes, lodepng.o(i.lodepng_decode_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 1500<LI>Call Chain = lodepng_decode_memory &rArr; lodepng_decode &rArr; decodeGeneric &rArr; readChunk_iTXt &rArr; zlib_decompress &rArr; lodepng_zlib_decompressv &rArr; inflatev &rArr; lodepng_inflatev &rArr; inflateHuffmanBlock &rArr; getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; HuffmanTree_makeTable &rArr; lodepng_malloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_state_init
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_state_cleanup
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode32
</UL>

<P><STRONG><a name="[740]"></a>lodepng_decoder_settings_init</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, lodepng.o(i.lodepng_decoder_settings_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lodepng_decoder_settings_init
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decompress_settings_init
</UL>
<BR>[Called By]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_state_init
</UL>

<P><STRONG><a name="[741]"></a>lodepng_decompress_settings_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lodepng.o(i.lodepng_decompress_settings_init))
<BR><BR>[Called By]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decoder_settings_init
</UL>

<P><STRONG><a name="[742]"></a>lodepng_encoder_settings_init</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, lodepng.o(i.lodepng_encoder_settings_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lodepng_encoder_settings_init
</UL>
<BR>[Calls]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_compress_settings_init
</UL>
<BR>[Called By]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_state_init
</UL>

<P><STRONG><a name="[4f2]"></a>lodepng_error_text</STRONG> (Thumb, 3716 bytes, Stack size 0 bytes, lodepng.o(i.lodepng_error_text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_open
</UL>

<P><STRONG><a name="[4e5]"></a>lodepng_get_bpp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lodepng.o(i.lodepng_get_bpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lodepng_get_bpp &rArr; lodepng_get_bpp_lct
</UL>
<BR>[Calls]<UL><LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_bpp_lct
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postProcessScanlines
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_pixel_overflow
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[4e8]"></a>lodepng_get_raw_size</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lodepng.o(i.lodepng_get_raw_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lodepng_get_raw_size &rArr; lodepng_get_raw_size_lct &rArr; lodepng_get_bpp_lct
</UL>
<BR>[Calls]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_raw_size_lct
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
</UL>

<P><STRONG><a name="[749]"></a>lodepng_info_cleanup</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lodepng.o(i.lodepng_info_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = lodepng_info_cleanup &rArr; LodePNGText_cleanup &rArr; string_cleanup &rArr; lodepng_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGUnknownChunks_cleanup
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGText_cleanup
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGIText_cleanup
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_cleanup
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_clear_icc
</UL>
<BR>[Called By]<UL><LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_state_cleanup
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inspect
</UL>

<P><STRONG><a name="[74a]"></a>lodepng_info_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lodepng.o(i.lodepng_info_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lodepng_info_init
</UL>
<BR>[Calls]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGUnknownChunks_init
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGText_init
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGIText_init
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_init
</UL>
<BR>[Called By]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_state_init
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inspect
</UL>

<P><STRONG><a name="[4d0]"></a>lodepng_inspect</STRONG> (Thumb, 348 bytes, Stack size 48 bytes, lodepng.o(i.lodepng_inspect))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = lodepng_inspect &rArr; lodepng_info_cleanup &rArr; LodePNGText_cleanup &rArr; string_cleanup &rArr; lodepng_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_read32bitInt
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkColorValidity
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_init
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_cleanup
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_crc32
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_type_equals
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_length
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[4f1]"></a>lodepng_load_file</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lodepng.o(i.lodepng_load_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = lodepng_load_file &rArr; lodepng_buffer_file &rArr; lv_fs_open &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_filesize
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_buffer_file
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_open
</UL>

<P><STRONG><a name="[735]"></a>lodepng_palette_clear</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lodepng.o(i.lodepng_palette_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = lodepng_palette_clear &rArr; lodepng_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>
<BR>[Called By]<UL><LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_cleanup
</UL>

<P><STRONG><a name="[73f]"></a>lodepng_state_cleanup</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lodepng.o(i.lodepng_state_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = lodepng_state_cleanup &rArr; lodepng_info_cleanup &rArr; LodePNGText_cleanup &rArr; string_cleanup &rArr; lodepng_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_cleanup
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode_memory
</UL>

<P><STRONG><a name="[73e]"></a>lodepng_state_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lodepng.o(i.lodepng_state_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lodepng_state_init &rArr; lodepng_info_init
</UL>
<BR>[Calls]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_init
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_encoder_settings_init
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decoder_settings_init
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_init
</UL>
<BR>[Called By]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode_memory
</UL>

<P><STRONG><a name="[1d9]"></a>ls</STRONG> (Thumb, 206 bytes, Stack size 88 bytes, dfs_file.o(i.ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = ls &rArr; dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ls
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_file.o(FSymTab)
</UL>
<P><STRONG><a name="[3f9]"></a>lseek</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, dfs_posix.o(i.lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lseek &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
</UL>

<P><STRONG><a name="[753]"></a>lv_anim_del</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lv_anim.o(i.lv_anim_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = lv_anim_del &rArr; lv_mem_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>
<BR>[Called By]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[754]"></a>lv_anim_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lv_anim.o(i.lv_anim_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_anim_init &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[198]"></a>lv_anim_path_linear</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, lv_anim.o(i.lv_anim_path_linear))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_anim_path_linear
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_anim.o(.constdata)
</UL>
<P><STRONG><a name="[755]"></a>lv_anim_start</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lv_anim.o(i.lv_anim_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_is_empty
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>
<BR>[Called By]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[597]"></a>lv_area_get_size</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_area.o(i.lv_area_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_area_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_join_area
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_areas
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
</UL>

<P><STRONG><a name="[80a]"></a>lv_area_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_area.o(i.lv_area_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_area_set
</UL>
<BR>[Called By]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[7a0]"></a>lv_area_set_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_area.o(i.lv_area_set_height))
<BR><BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
</UL>

<P><STRONG><a name="[724]"></a>lv_bmp_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lv_bmp.o(i.lv_bmp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = lv_bmp_init &rArr; lv_img_decoder_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_set_read_line_cb
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_set_open_cb
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_set_info_cb
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_set_close_cb
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_create
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;littlevgl2rtt_init
</UL>

<P><STRONG><a name="[443]"></a>lv_color_darken</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lv_color.o(i.lv_color_darken))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lv_color_darken &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[620]"></a>lv_color_fill</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lv_color.o(i.lv_color_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_color_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_normal
</UL>

<P><STRONG><a name="[707]"></a>lv_color_lighten</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lv_color.o(i.lv_color_lighten))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lv_color_lighten &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
</UL>

<P><STRONG><a name="[389]"></a>lv_debug_check_null</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_debug.o(i.lv_debug_check_null))
<BR><BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_create
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_open
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_click
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag_throw
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag_dir
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_click
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_focused
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_alloc_local_style
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_remove_style
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_trans_style
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_style
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_signal_cb
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_design_cb
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_adv_hittest
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_pad
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_realign
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_signal_cb
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_base_dir
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_ext_attr
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_mid
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send_func
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_bitmap_fmt_txt
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_drv_register
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create_basic
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_get_auto_size
</UL>

<P><STRONG><a name="[38a]"></a>lv_debug_log_error</STRONG> (Thumb, 120 bytes, Stack size 288 bytes, lv_debug.o(i.lv_debug_log_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_create
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_open
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_click
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag_throw
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag_dir
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_click
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_focused
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_alloc_local_style
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_remove_style
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_trans_style
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_style
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_signal_cb
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_design_cb
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_adv_hittest
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_pad
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_realign
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_signal_cb
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_base_dir
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_ext_attr
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_mid
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send_func
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_bitmap_fmt_txt
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_drv_register
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create_basic
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_get_auto_size
</UL>

<P><STRONG><a name="[75b]"></a>lv_demo_img_test</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lv_img_test.o(i.lv_demo_img_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = lv_demo_img_test &rArr; lv_img_create &rArr; lv_img_set_src &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_demo_run
</UL>

<P><STRONG><a name="[71f]"></a>lv_disp_buf_init</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lv_hal_disp.o(i.lv_disp_buf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_disp_buf_init &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;littlevgl2rtt_init
</UL>

<P><STRONG><a name="[71e]"></a>lv_disp_drv_init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lv_hal_disp.o(i.lv_disp_drv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_disp_drv_init &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;littlevgl2rtt_init
</UL>

<P><STRONG><a name="[720]"></a>lv_disp_drv_register</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, lv_hal_disp.o(i.lv_disp_drv_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = lv_disp_drv_register &rArr; lv_obj_create &rArr; lv_group_add_obj &rArr; lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_click
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_true_double_buf
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_reset_style_list
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_ready
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;littlevgl2rtt_init
</UL>

<P><STRONG><a name="[705]"></a>lv_disp_flush_ready</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_flush_ready))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_flush
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fb_flush
</UL>

<P><STRONG><a name="[35c]"></a>lv_disp_get_buf</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_buf))
<BR><BR>[Called By]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_flush
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_subpx
</UL>

<P><STRONG><a name="[398]"></a>lv_disp_get_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_default))
<BR><BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_prev
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_size_category
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_img_test
</UL>

<P><STRONG><a name="[427]"></a>lv_disp_get_dpi</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, lv_hal_disp.o(i.lv_disp_get_dpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lv_disp_get_dpi
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_size_category
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textarea_init
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_init
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spinbox_init
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roller_init
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_init
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgbox_init
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddlist_init
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>

<P><STRONG><a name="[36c]"></a>lv_disp_get_hor_res</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, lv_hal_disp.o(i.lv_disp_get_hor_res))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lv_disp_get_hor_res
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_size_category
</UL>

<P><STRONG><a name="[6c1]"></a>lv_disp_get_inv_buf_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_inv_buf_size))
<BR><BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
</UL>

<P><STRONG><a name="[6d2]"></a>lv_disp_get_layer_sys</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_disp.o(i.lv_disp_get_layer_sys))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_layer_sys
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[6d4]"></a>lv_disp_get_layer_top</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_disp.o(i.lv_disp_get_layer_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_layer_top
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[763]"></a>lv_disp_get_next</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_hal_disp.o(i.lv_disp_get_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_mod
</UL>

<P><STRONG><a name="[6d5]"></a>lv_disp_get_scr_act</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_disp.o(i.lv_disp_get_scr_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_scr_act
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_img_test
</UL>

<P><STRONG><a name="[764]"></a>lv_disp_get_scr_prev</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_disp.o(i.lv_disp_get_scr_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_scr_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[440]"></a>lv_disp_get_size_category</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lv_hal_disp.o(i.lv_disp_get_size_category))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_disp_get_size_category &rArr; lv_disp_get_hor_res
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
</UL>
<BR>[Called By]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[399]"></a>lv_disp_get_ver_res</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, lv_hal_disp.o(i.lv_disp_get_ver_res))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lv_disp_get_ver_res
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
</UL>

<P><STRONG><a name="[765]"></a>lv_disp_is_double_buf</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_is_double_buf))
<BR><BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_true_double_buf
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_flush
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[369]"></a>lv_disp_is_true_double_buf</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, lv_hal_disp.o(i.lv_disp_is_true_double_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lv_disp_is_true_double_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_double_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[59e]"></a>lv_draw_img</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lv_draw_img.o(i.lv_draw_img))
<BR><BR>[Stack]<UL><LI>Max Depth = 1492<LI>Call Chain = lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr; lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
</UL>
<BR>[Called By]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[59c]"></a>lv_draw_img_dsc_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_draw_img.o(i.lv_draw_img_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_draw_img_dsc_init &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[59f]"></a>lv_draw_label</STRONG> (Thumb, 1578 bytes, Stack size 272 bytes, lv_draw_label.o(i.lv_draw_label))
<BR><BR>[Stack]<UL><LI>Max Depth = 1220<LI>Call Chain = lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_width
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_char_to_num
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_size
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_value_str
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[59d]"></a>lv_draw_label_dsc_init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lv_draw_label.o(i.lv_draw_label_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_draw_label_dsc_init &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_value_str
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[76d]"></a>lv_draw_line</STRONG> (Thumb, 500 bytes, Stack size 136 bytes, lv_draw_line.o(i.lv_draw_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 948<LI>Call Chain = lv_draw_line &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[768]"></a>lv_draw_line_dsc_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lv_draw_line.o(i.lv_draw_line_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_draw_line_dsc_init &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[588]"></a>lv_draw_mask_add</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lv_draw_mask.o(i.lv_draw_mask_add))
<BR><BR>[Called By]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[58b]"></a>lv_draw_mask_apply</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, lv_draw_mask.o(i.lv_draw_mask_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_draw_mask_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_subpx
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
</UL>

<P><STRONG><a name="[585]"></a>lv_draw_mask_get_cnt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_draw_mask.o(i.lv_draw_mask_get_cnt))
<BR><BR>[Called By]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_subpx
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
</UL>

<P><STRONG><a name="[596]"></a>lv_draw_mask_line_points_init</STRONG> (Thumb, 404 bytes, Stack size 40 bytes, lv_draw_mask.o(i.lv_draw_mask_line_points_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lv_draw_mask_line_points_init &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
</UL>

<P><STRONG><a name="[587]"></a>lv_draw_mask_radius_init</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, lv_draw_mask.o(i.lv_draw_mask_radius_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lv_draw_mask_radius_init &rArr; lv_area_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[79f]"></a>lv_draw_mask_remove_custom</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lv_draw_mask.o(i.lv_draw_mask_remove_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_draw_mask_remove_custom
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[58c]"></a>lv_draw_mask_remove_id</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lv_draw_mask.o(i.lv_draw_mask_remove_id))
<BR><BR>[Called By]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
</UL>

<P><STRONG><a name="[76b]"></a>lv_draw_rect</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lv_draw_rect.o(i.lv_draw_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 812<LI>Call Chain = lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_value_str
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_outline
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>
<BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[769]"></a>lv_draw_rect_dsc_init</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, lv_draw_rect.o(i.lv_draw_rect_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lv_draw_rect_dsc_init &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[636]"></a>lv_event_send</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lv_obj.o(i.lv_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_event_send &rArr; lv_event_send_func &rArr;  lv_event_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send_func
</UL>
<BR>[Called By]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_gesture
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_click_focus
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_send_data
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send_func
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[778]"></a>lv_event_send_func</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, lv_obj.o(i.lv_event_send_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + In Cycle
<LI>Call Chain = lv_event_send_func &rArr;  lv_event_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>

<P><STRONG><a name="[14]"></a>lv_font_get_bitmap_fmt_txt</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, lv_font_fmt_txt.o(i.lv_font_get_bitmap_fmt_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = lv_font_get_bitmap_fmt_txt &rArr; decompress &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_get_size
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_font_montserrat_14.o(.data)
</UL>
<P><STRONG><a name="[76f]"></a>lv_font_get_glyph_bitmap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lv_font.o(i.lv_font_get_glyph_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_font_get_glyph_bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
</UL>

<P><STRONG><a name="[76e]"></a>lv_font_get_glyph_dsc</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lv_font.o(i.lv_font_get_glyph_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_font_get_glyph_dsc
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
</UL>

<P><STRONG><a name="[13]"></a>lv_font_get_glyph_dsc_fmt_txt</STRONG> (Thumb, 186 bytes, Stack size 64 bytes, lv_font_fmt_txt.o(i.lv_font_get_glyph_dsc_fmt_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_font_get_glyph_dsc_fmt_txt &rArr; get_kern_value &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_kern_value
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_font_montserrat_14.o(.data)
</UL>
<P><STRONG><a name="[3d2]"></a>lv_font_get_glyph_width</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, lv_font.o(i.lv_font_get_glyph_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc
</UL>
<BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_width
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_next_word
</UL>

<P><STRONG><a name="[4ea]"></a>lv_fs_close</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lv_fs.o(i.lv_fs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_fs_close &rArr; lv_mem_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_info
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_close
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_filesize
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_buffer_file
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_open
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_info
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_close
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_info
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_close
</UL>

<P><STRONG><a name="[77b]"></a>lv_fs_drv_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_fs.o(i.lv_fs_drv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_fs_drv_init &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_fs_init
</UL>

<P><STRONG><a name="[77c]"></a>lv_fs_drv_register</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_fs.o(i.lv_fs_drv_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = lv_fs_drv_register &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_fs_init
</UL>

<P><STRONG><a name="[77d]"></a>lv_fs_get_drv</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lv_fs.o(i.lv_fs_get_drv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_fs_get_drv
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
</UL>

<P><STRONG><a name="[77e]"></a>lv_fs_get_ext</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_fs.o(i.lv_fs_get_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_fs_get_ext &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
</UL>

<P><STRONG><a name="[4ec]"></a>lv_fs_open</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, lv_fs.o(i.lv_fs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = lv_fs_open &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_drv
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_real_path
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_open
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_info
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_filesize
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_buffer_file
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_open
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_info
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_info
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
</UL>

<P><STRONG><a name="[4ed]"></a>lv_fs_read</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lv_fs.o(i.lv_fs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_fs_read
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_read_line
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_open
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_info
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_buffer_file
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_func
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_open
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_info
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_info
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_true_color
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
</UL>

<P><STRONG><a name="[4ee]"></a>lv_fs_seek</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lv_fs.o(i.lv_fs_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_fs_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_read_line
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_func
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_read_line
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_info
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_info
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_true_color
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
</UL>

<P><STRONG><a name="[745]"></a>lv_fs_size</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lv_fs.o(i.lv_fs_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_fs_size
</UL>
<BR>[Called By]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_filesize
</UL>

<P><STRONG><a name="[6f0]"></a>lv_fs_tell</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lv_fs.o(i.lv_fs_tell))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_fs_tell
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_func
</UL>

<P><STRONG><a name="[780]"></a>lv_group_add_obj</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, lv_group.o(i.lv_group_add_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = lv_group_add_obj &rArr; lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_focused
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
</UL>
<BR>[Called By]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
</UL>

<P><STRONG><a name="[6cf]"></a>lv_group_focus_next</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_group.o(i.lv_group_focus_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = lv_group_focus_next &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
</UL>

<P><STRONG><a name="[6b7]"></a>lv_group_focus_obj</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, lv_group.o(i.lv_group_focus_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = lv_group_focus_obj &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_to_foreground
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_click_focus
</UL>

<P><STRONG><a name="[6ce]"></a>lv_group_focus_prev</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_group.o(i.lv_group_focus_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
</UL>

<P><STRONG><a name="[6ca]"></a>lv_group_get_editing</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_group.o(i.lv_group_get_editing))
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
</UL>

<P><STRONG><a name="[6c9]"></a>lv_group_get_focused</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_group.o(i.lv_group_get_focused))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_focused
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_send_data
</UL>

<P><STRONG><a name="[783]"></a>lv_group_remove_obj</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, lv_group.o(i.lv_group_remove_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = lv_group_remove_obj &rArr; lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
</UL>
<BR>[Called By]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[6cb]"></a>lv_group_send_data</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lv_group.o(i.lv_group_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = lv_group_send_data &rArr; lv_event_send &rArr; lv_event_send_func &rArr;  lv_event_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
</UL>

<P><STRONG><a name="[6cd]"></a>lv_group_set_editing</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lv_group.o(i.lv_group_set_editing))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = lv_group_set_editing &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
</UL>

<P><STRONG><a name="[37c]"></a>lv_img_buf_get_px_alpha</STRONG> (Thumb, 298 bytes, Stack size 44 bytes, lv_img_buf.o(i.lv_img_buf_get_px_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lv_img_buf_get_px_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_anti_alias
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform
</UL>

<P><STRONG><a name="[37b]"></a>lv_img_buf_get_px_color</STRONG> (Thumb, 350 bytes, Stack size 56 bytes, lv_img_buf.o(i.lv_img_buf_get_px_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lv_img_buf_get_px_color &rArr; _lv_memcpy_small
</UL>
<BR>[Calls]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_anti_alias
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform
</UL>

<P><STRONG><a name="[785]"></a>lv_img_cache_invalidate_src</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lv_img_cache.o(i.lv_img_cache_invalidate_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = lv_img_cache_invalidate_src &rArr; lv_img_decoder_close &rArr; lv_mem_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
</UL>
<BR>[Called By]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
</UL>

<P><STRONG><a name="[786]"></a>lv_img_cache_set_size</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, lv_img_cache.o(i.lv_img_cache_set_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = lv_img_cache_set_size &rArr; lv_img_cache_invalidate_src &rArr; lv_img_decoder_close &rArr; lv_mem_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_invalidate_src
</UL>
<BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[784]"></a>lv_img_cf_get_px_size</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, lv_draw_img.o(i.lv_img_cf_get_px_size))
<BR><BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_color
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_true_color
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
</UL>

<P><STRONG><a name="[382]"></a>lv_img_cf_has_alpha</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, lv_draw_img.o(i.lv_img_cf_has_alpha))
<BR><BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_init
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
</UL>

<P><STRONG><a name="[381]"></a>lv_img_cf_is_chroma_keyed</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lv_draw_img.o(i.lv_img_cf_is_chroma_keyed))
<BR><BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_init
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
</UL>

<P><STRONG><a name="[75c]"></a>lv_img_create</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, lv_img.o(i.lv_img_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = lv_img_create &rArr; lv_img_set_src &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_click
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_signal_cb
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_design_cb
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_adv_hittest
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_signal_cb
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_ext_attr
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
</UL>
<BR>[Called By]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_img_test
</UL>

<P><STRONG><a name="[a2]"></a>lv_img_decoder_built_in_close</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = lv_img_decoder_built_in_close &rArr; lv_fs_close &rArr; lv_mem_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(i._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[9f]"></a>lv_img_decoder_built_in_info</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = lv_img_decoder_built_in_info &rArr; lv_fs_open &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(i._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[a0]"></a>lv_img_decoder_built_in_open</STRONG> (Thumb, 628 bytes, Stack size 48 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = lv_img_decoder_built_in_open &rArr; lv_fs_open &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_ext
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_close
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(i._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[a1]"></a>lv_img_decoder_built_in_read_line</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = lv_img_decoder_built_in_read_line &rArr; lv_img_decoder_built_in_line_alpha &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_true_color
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(i._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[385]"></a>lv_img_decoder_close</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_img_decoder.o(i.lv_img_decoder_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = lv_img_decoder_close &rArr; lv_mem_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_invalidate_src
</UL>

<P><STRONG><a name="[388]"></a>lv_img_decoder_create</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lv_img_decoder.o(i.lv_img_decoder_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = lv_img_decoder_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
</UL>
<BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bmp_init
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_split_jpeg_init
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_png_init
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
</UL>

<P><STRONG><a name="[59b]"></a>lv_img_decoder_get_info</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lv_img_decoder.o(i.lv_img_decoder_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_img_decoder_get_info
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
</UL>

<P><STRONG><a name="[386]"></a>lv_img_decoder_open</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, lv_img_decoder.o(i.lv_img_decoder_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = lv_img_decoder_open &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
</UL>

<P><STRONG><a name="[7a1]"></a>lv_img_decoder_read_line</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, lv_img_decoder.o(i.lv_img_decoder_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_img_decoder_read_line
</UL>
<BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
</UL>

<P><STRONG><a name="[38e]"></a>lv_img_decoder_set_close_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_img_decoder.o(i.lv_img_decoder_set_close_cb))
<BR><BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bmp_init
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_split_jpeg_init
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_png_init
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
</UL>

<P><STRONG><a name="[38b]"></a>lv_img_decoder_set_info_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_img_decoder.o(i.lv_img_decoder_set_info_cb))
<BR><BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bmp_init
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_split_jpeg_init
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_png_init
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
</UL>

<P><STRONG><a name="[38c]"></a>lv_img_decoder_set_open_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_img_decoder.o(i.lv_img_decoder_set_open_cb))
<BR><BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bmp_init
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_split_jpeg_init
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_png_init
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
</UL>

<P><STRONG><a name="[38d]"></a>lv_img_decoder_set_read_line_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_img_decoder.o(i.lv_img_decoder_set_read_line_cb))
<BR><BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bmp_init
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_split_jpeg_init
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
</UL>

<P><STRONG><a name="[7a2]"></a>lv_img_get_auto_size</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lv_img.o(i.lv_img_get_auto_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_img_get_auto_size &rArr; lv_obj_get_ext_attr &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
</UL>

<P><STRONG><a name="[75d]"></a>lv_img_set_src</STRONG> (Thumb, 468 bytes, Stack size 56 bytes, lv_img.o(i.lv_img_set_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = lv_img_set_src &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_size
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_pad
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_get_auto_size
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_img_test
</UL>

<P><STRONG><a name="[384]"></a>lv_img_src_get_type</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lv_draw_img.o(i.lv_img_src_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_info
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_info
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_info
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
</UL>

<P><STRONG><a name="[721]"></a>lv_indev_drv_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lv_hal_indev.o(i.lv_indev_drv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_indev_drv_init &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;littlevgl2rtt_init
</UL>

<P><STRONG><a name="[722]"></a>lv_indev_drv_register</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, lv_hal_indev.o(i.lv_indev_drv_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = lv_indev_drv_register &rArr; lv_task_create &rArr; lv_task_create_basic &rArr; _lv_ll_ins_prev &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;littlevgl2rtt_init
</UL>

<P><STRONG><a name="[779]"></a>lv_indev_get_act</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_get_act))
<BR><BR>[Called By]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send_func
</UL>

<P><STRONG><a name="[7a8]"></a>lv_indev_get_next</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_hal_indev.o(i.lv_indev_get_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_indev_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[8f3]"></a>lv_indev_get_obj_act</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_get_obj_act))
<BR><BR>[Called By]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[390]"></a>lv_indev_reset</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lv_indev.o(i.lv_indev_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_indev_reset &rArr; lv_indev_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_init
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[6d3]"></a>lv_indev_search_obj</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lv_indev.o(i.lv_indev_search_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + In Cycle
<LI>Call Chain = lv_indev_search_obj &rArr;  lv_indev_search_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_hittest
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_click
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[71d]"></a>lv_init</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, lv_obj.o(i.lv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = lv_init &rArr; lv_theme_material_init &rArr; lv_obj_report_style_mod &rArr; report_style_mod_core &rArr;  report_style_mod_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_init
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_group_init
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_set_act
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_task_core_init
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_init
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_init
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_fs_init
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;littlevgl2rtt_init
</UL>

<P><STRONG><a name="[3a0]"></a>lv_mem_alloc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_mem.o(i.lv_mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_open
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_alloc_local_style
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_open
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_info
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_copy
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_remove_style
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_trans_style
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_style
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_prev
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
</UL>

<P><STRONG><a name="[374]"></a>lv_mem_free</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_mem.o(i.lv_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = lv_mem_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_close
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_free_all
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_font_clean_up_fmt_txt
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_sjpg_free
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_sjpg_cleanup
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_open
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_info
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_close
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_reset
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_remove_style
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_ready_handler
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_del
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
</UL>

<P><STRONG><a name="[3a4]"></a>lv_mem_realloc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lv_mem.o(i.lv_mem_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_resize
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_style
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_ext_attr
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_bitmap_fmt_txt
</UL>

<P><STRONG><a name="[7b0]"></a>lv_obj_add_state</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_add_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = lv_obj_add_state &rArr; lv_obj_set_state &rArr; style_snapshot &rArr; lv_obj_init_draw_rect_dsc &rArr; lv_obj_get_style_value_opa &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
</UL>

<P><STRONG><a name="[75e]"></a>lv_obj_align</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, lv_obj.o(i.lv_obj_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = lv_obj_align &rArr; obj_align_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_core
</UL>
<BR>[Called By]<UL><LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_realign
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_img_test
</UL>

<P><STRONG><a name="[7b3]"></a>lv_obj_align_mid</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, lv_obj.o(i.lv_obj_align_mid))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_mid_core
</UL>
<BR>[Called By]<UL><LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_realign
</UL>

<P><STRONG><a name="[788]"></a>lv_obj_allocate_ext_attr</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_allocate_ext_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = lv_obj_allocate_ext_attr &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
</UL>

<P><STRONG><a name="[7b5]"></a>lv_obj_area_is_visible</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, lv_obj.o(i.lv_obj_area_is_visible))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_prev
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
</UL>

<P><STRONG><a name="[481]"></a>lv_obj_clean_style_list</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_clean_style_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = lv_obj_clean_style_list &rArr; trans_del &rArr; lv_style_remove_prop &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_reset
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
</UL>
<BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_reset_style_list
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_styles
</UL>

<P><STRONG><a name="[7b9]"></a>lv_obj_clear_state</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_clear_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = lv_obj_clear_state &rArr; lv_obj_set_state &rArr; style_snapshot &rArr; lv_obj_init_draw_rect_dsc &rArr; lv_obj_get_style_value_opa &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
</UL>

<P><STRONG><a name="[75f]"></a>lv_obj_create</STRONG> (Thumb, 1012 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = lv_obj_create &rArr; lv_group_add_obj &rArr; lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_init
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_copy
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_base_dir
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
</UL>

<P><STRONG><a name="[789]"></a>lv_obj_del</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = lv_obj_del &rArr; obj_del_core &rArr;  obj_del_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>
<BR>[Called By]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
</UL>

<P><STRONG><a name="[7ba]"></a>lv_obj_get_base_dir</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_obj_get_base_dir &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
</UL>

<P><STRONG><a name="[6f3]"></a>lv_obj_get_child</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_child))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_get_child &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_mod_core
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_style_cache
</UL>

<P><STRONG><a name="[7aa]"></a>lv_obj_get_click</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_click))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_obj_get_click &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
</UL>

<P><STRONG><a name="[6c6]"></a>lv_obj_get_coords</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_coords))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_get_coords &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[7b7]"></a>lv_obj_get_disp</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_get_disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[6bb]"></a>lv_obj_get_drag</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_drag))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_obj_get_drag &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
</UL>

<P><STRONG><a name="[6bc]"></a>lv_obj_get_drag_dir</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_drag_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_obj_get_drag_dir &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
</UL>

<P><STRONG><a name="[65d]"></a>lv_obj_get_drag_parent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_drag_parent))
<BR><BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dragged_obj
</UL>

<P><STRONG><a name="[6c5]"></a>lv_obj_get_drag_throw</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_drag_throw))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_obj_get_drag_throw &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
</UL>

<P><STRONG><a name="[7c7]"></a>lv_obj_get_draw_rect_ext_pad_size</STRONG> (Thumb, 652 bytes, Stack size 104 bytes, lv_obj.o(i.lv_obj_get_draw_rect_ext_pad_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = lv_obj_get_draw_rect_ext_pad_size &rArr; lv_obj_get_style_value_opa &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_size
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_align
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_str
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_opa
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_ofs_y
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_ofs_x
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_letter_space
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_font
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_align
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_width
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_spread
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_opa
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_y
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_x
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_width
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_pad
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
</UL>

<P><STRONG><a name="[78e]"></a>lv_obj_get_ext_attr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_ext_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_obj_get_ext_attr &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_get_auto_size
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[7d7]"></a>lv_obj_get_focus_parent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_focus_parent))
<BR><BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_focused_obj
</UL>

<P><STRONG><a name="[6b4]"></a>lv_obj_get_focused_obj</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_focused_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_obj_get_focused_obj &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_focus_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_click_focus
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
</UL>

<P><STRONG><a name="[6d1]"></a>lv_obj_get_gesture_parent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_gesture_parent))
<BR><BR>[Called By]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_gesture
</UL>

<P><STRONG><a name="[6b6]"></a>lv_obj_get_group</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_obj_get_group &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_click_focus
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
</UL>

<P><STRONG><a name="[6be]"></a>lv_obj_get_height</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_obj_get_height &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_mid_core
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[635]"></a>lv_obj_get_hidden</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_hidden))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_obj_get_hidden &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[3aa]"></a>lv_obj_get_parent</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_focused_obj
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_gesture
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dragged_obj
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_to_foreground
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_mid
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_mid_core
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_core
</UL>

<P><STRONG><a name="[7b6]"></a>lv_obj_get_screen</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[787]"></a>lv_obj_get_signal_cb</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_signal_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_obj_get_signal_cb &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
</UL>

<P><STRONG><a name="[3a8]"></a>lv_obj_get_state</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_get_state &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_signal_send
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
</UL>

<P><STRONG><a name="[3a6]"></a>lv_obj_get_style_list</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_get_style_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_obj_get_style_list &rArr; lv_signal_send
</UL>
<BR>[Calls]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_signal_send
</UL>
<BR>[Called By]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean_style_list
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_disable_style_caching
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_mod_core
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_style_cache
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
</UL>

<P><STRONG><a name="[6bd]"></a>lv_obj_get_width</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_obj_get_width &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_mid_core
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[6bf]"></a>lv_obj_get_x</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_obj_get_x &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_mid_core
</UL>

<P><STRONG><a name="[6c0]"></a>lv_obj_get_y</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_obj_get_y &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_mid_core
</UL>

<P><STRONG><a name="[7a6]"></a>lv_obj_handle_get_type_signal</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_handle_get_type_signal))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
</UL>

<P><STRONG><a name="[7a9]"></a>lv_obj_hittest</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_hittest))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_obj_hittest &rArr; lv_obj_is_point_on_coords &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_point_on_coords
</UL>
<BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
</UL>

<P><STRONG><a name="[79d]"></a>lv_obj_init_draw_img_dsc</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, lv_obj.o(i.lv_obj_init_draw_img_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = lv_obj_init_draw_img_dsc &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_scale
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_image_recolor_opa
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_image_blend_mode
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[79e]"></a>lv_obj_init_draw_label_dsc</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, lv_obj.o(i.lv_obj_init_draw_label_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = lv_obj_init_draw_label_dsc &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_decor
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_blend_mode
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[7f5]"></a>lv_obj_init_draw_line_dsc</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, lv_obj.o(i.lv_obj_init_draw_line_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = lv_obj_init_draw_line_dsc &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_scale
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_line_blend_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[797]"></a>lv_obj_init_draw_rect_dsc</STRONG> (Thumb, 848 bytes, Stack size 40 bytes, lv_obj.o(i.lv_obj_init_draw_rect_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = lv_obj_init_draw_rect_dsc &rArr; lv_obj_get_style_value_opa &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_str
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_opa
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_ofs_y
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_ofs_x
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_letter_space
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_font
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_blend_mode
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_align
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_width
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_spread
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_opa
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_y
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_x
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_blend_mode
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_radius
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pattern_recolor
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pattern_image
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pattern_blend_mode
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_width
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_pad
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_opa
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_blend_mode
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_scale
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_side
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_blend_mode
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_opa
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_blend_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[637]"></a>lv_obj_invalidate</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
</UL>

<P><STRONG><a name="[7f6]"></a>lv_obj_invalidate_area</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lv_obj.o(i.lv_obj_invalidate_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>

<P><STRONG><a name="[781]"></a>lv_obj_is_focused</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_is_focused))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_obj_is_focused &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
</UL>
<BR>[Called By]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
</UL>

<P><STRONG><a name="[7a7]"></a>lv_obj_is_point_on_coords</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_is_point_on_coords))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_obj_is_point_on_coords &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>
<BR>[Called By]<UL><LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_hittest
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
</UL>

<P><STRONG><a name="[6b5]"></a>lv_obj_is_protected</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_is_protected))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_is_protected &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_click_focus
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
</UL>

<P><STRONG><a name="[6d6]"></a>lv_obj_move_foreground</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_move_foreground))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_chg_list
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_to_foreground
</UL>

<P><STRONG><a name="[7f7]"></a>lv_obj_realign</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_realign))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_mid
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
</UL>
<BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
</UL>

<P><STRONG><a name="[7a4]"></a>lv_obj_refresh_ext_draw_pad</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_refresh_ext_draw_pad))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_obj_refresh_ext_draw_pad &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
</UL>

<P><STRONG><a name="[78f]"></a>lv_obj_refresh_style</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_refresh_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_style_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_reset_style_list
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_mod_core
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
</UL>

<P><STRONG><a name="[7f9]"></a>lv_obj_report_style_mod</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_report_style_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = lv_obj_report_style_mod &rArr; report_style_mod_core &rArr;  report_style_mod_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_next
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_mod_core
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[760]"></a>lv_obj_reset_style_list</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_reset_style_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = lv_obj_reset_style_list &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean_style_list
</UL>
<BR>[Called By]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[78d]"></a>lv_obj_set_adv_hittest</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_set_adv_hittest))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_adv_hittest &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
</UL>

<P><STRONG><a name="[761]"></a>lv_obj_set_click</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_set_click))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_click &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
</UL>

<P><STRONG><a name="[78b]"></a>lv_obj_set_design_cb</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_set_design_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_design_cb &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
</UL>

<P><STRONG><a name="[6c2]"></a>lv_obj_set_pos</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, lv_obj.o(i.lv_obj_set_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_position
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_pointer_proc
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_mid_core
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_core
</UL>

<P><STRONG><a name="[78a]"></a>lv_obj_set_signal_cb</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_set_signal_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_signal_cb &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
</UL>

<P><STRONG><a name="[7a3]"></a>lv_obj_set_size</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, lv_obj.o(i.lv_obj_set_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_realign
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_base_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
</UL>

<P><STRONG><a name="[7b1]"></a>lv_obj_set_state</STRONG> (Thumb, 566 bytes, Stack size 416 bytes, lv_obj.o(i.lv_obj_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = lv_obj_set_state &rArr; style_snapshot &rArr; lv_obj_init_draw_rect_dsc &rArr; lv_obj_get_style_value_opa &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_trans_style
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot_compare
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_var
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_values
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_time
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_ready_cb
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_exec_cb
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_delay
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_style_cache
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
</UL>

<P><STRONG><a name="[6c7]"></a>lv_obj_set_x</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_set_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = lv_obj_set_x &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_mid_core
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_core
</UL>

<P><STRONG><a name="[6c8]"></a>lv_obj_set_y</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_set_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_mid_core
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_core
</UL>

<P><STRONG><a name="[725]"></a>lv_png_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_png.o(i.lv_png_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = lv_png_init &rArr; lv_img_decoder_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_set_open_cb
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_set_info_cb
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_set_close_cb
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_create
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;littlevgl2rtt_init
</UL>

<P><STRONG><a name="[723]"></a>lv_port_fs_init</STRONG> (Thumb, 210 bytes, Stack size 152 bytes, lv_port_fs.o(i.lv_port_fs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = lv_port_fs_init &rArr; lv_fs_drv_register &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_drv_register
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_drv_init
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_init
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;littlevgl2rtt_init
</UL>

<P><STRONG><a name="[6b9]"></a>lv_signal_send</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lv_obj.o(i.lv_signal_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_signal_send
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_click_focus
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
</UL>

<P><STRONG><a name="[726]"></a>lv_split_jpeg_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lv_sjpg.o(i.lv_split_jpeg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = lv_split_jpeg_init &rArr; lv_img_decoder_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_set_read_line_cb
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_set_open_cb
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_set_info_cb
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_set_close_cb
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_create
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;littlevgl2rtt_init
</UL>

<P><STRONG><a name="[442]"></a>lv_style_copy</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lv_style.o(i.lv_style_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = lv_style_copy &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_mem_size
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_copy
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[3c1]"></a>lv_style_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_style.o(i.lv_style_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_style_init &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_alloc_local_style
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_trans_style
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
</UL>

<P><STRONG><a name="[7bc]"></a>lv_style_list_copy</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, lv_style.o(i.lv_style_list_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = lv_style_list_copy &rArr; get_alloc_local_style &rArr; _lv_style_list_add_style &rArr; _lv_style_list_remove_style &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_alloc_local_style
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_reset
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
</UL>

<P><STRONG><a name="[3c4]"></a>lv_style_list_get_local_style</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lv_style.o(i.lv_style_list_get_local_style))
<BR><BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_reset
</UL>

<P><STRONG><a name="[7bb]"></a>lv_style_list_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_style.o(i.lv_style_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_style_list_init &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
</UL>

<P><STRONG><a name="[80f]"></a>lv_style_remove_prop</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, lv_style.o(i.lv_style_remove_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = lv_style_remove_prop &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_mem_size
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_resize
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_attr
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_prop_size
</UL>
<BR>[Called By]<UL><LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
</UL>

<P><STRONG><a name="[3c5]"></a>lv_style_reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_style.o(i.lv_style_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = lv_style_reset &rArr; lv_mem_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_reset
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
</UL>

<P><STRONG><a name="[352]"></a>lv_task_create</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lv_task.o(i.lv_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = lv_task_create &rArr; lv_task_create_basic &rArr; _lv_ll_ins_prev &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_set_prio
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_set_period
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_set_cb
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create_basic
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[810]"></a>lv_task_create_basic</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, lv_task.o(i.lv_task_create_basic))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = lv_task_create_basic &rArr; _lv_ll_ins_prev &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_prev
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
</UL>

<P><STRONG><a name="[813]"></a>lv_task_del</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_task.o(i.lv_task_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = lv_task_del &rArr; lv_mem_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_exec
</UL>

<P><STRONG><a name="[3cc]"></a>lv_task_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_task.o(i.lv_task_enable))
<BR><BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_task_core_init
</UL>

<P><STRONG><a name="[816]"></a>lv_task_handler</STRONG> (Thumb, 448 bytes, Stack size 24 bytes, lv_task.o(i.lv_task_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = lv_task_handler &rArr; lv_task_exec &rArr; lv_task_del &rArr; lv_mem_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_time_remaining
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_task_run
</UL>

<P><STRONG><a name="[762]"></a>lv_task_ready</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_task.o(i.lv_task_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_task_ready
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[811]"></a>lv_task_set_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_task.o(i.lv_task_set_cb))
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
</UL>

<P><STRONG><a name="[812]"></a>lv_task_set_period</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_task.o(i.lv_task_set_period))
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
</UL>

<P><STRONG><a name="[366]"></a>lv_task_set_prio</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lv_task.o(i.lv_task_set_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_task_set_prio &rArr; _lv_ll_move_before &rArr; _lv_ll_remove &rArr; node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_move_before
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
</UL>

<P><STRONG><a name="[78c]"></a>lv_theme_apply</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lv_theme.o(i.lv_theme_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = lv_theme_apply &rArr; clear_styles &rArr; lv_obj_clean_style_list &rArr; trans_del &rArr; lv_style_remove_prop &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_styles
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme
</UL>
<BR>[Called By]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
</UL>

<P><STRONG><a name="[3b2]"></a>lv_theme_get_font_normal</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_theme.o(i.lv_theme_get_font_normal))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
</UL>

<P><STRONG><a name="[7ad]"></a>lv_theme_material_init</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, lv_theme_material.o(i.lv_theme_material_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = lv_theme_material_init &rArr; lv_obj_report_style_mod &rArr; report_style_mod_core &rArr;  report_style_mod_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_mod
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_init
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_init
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textarea_init
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_init
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_init
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spinner_init
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spinbox_init
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roller_init
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_init
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgbox_init
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_init
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_init
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_init
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddlist_init
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_init
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnmatrix_init
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[7ae]"></a>lv_theme_set_act</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_theme.o(i.lv_theme_set_act))
<BR><BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[371]"></a>lv_tick_elaps</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_hal_tick.o(i.lv_tick_elaps))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_tick_elaps
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_time_remaining
</UL>

<P><STRONG><a name="[351]"></a>lv_tick_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_hal_tick.o(i.lv_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read_task
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_ready
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create_basic
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_exec
</UL>

<P><STRONG><a name="[82c]"></a>lv_tick_inc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_hal_tick.o(i.lv_tick_inc))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_tick_run
</UL>

<P><STRONG><a name="[82d]"></a>lwip_close</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, sockets.o(i.lwip_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = lwip_close &rArr; free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_drop_registered_memberships
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
</UL>

<P><STRONG><a name="[831]"></a>lwip_freeaddrinfo</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, netdb.o(i.lwip_freeaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = lwip_freeaddrinfo &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
</UL>

<P><STRONG><a name="[832]"></a>lwip_getaddrinfo</STRONG> (Thumb, 384 bytes, Stack size 72 bytes, netdb.o(i.lwip_getaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = lwip_getaddrinfo &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
</UL>

<P><STRONG><a name="[55a]"></a>lwip_htonl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, def.o(i.lwip_htonl))
<BR><BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[557]"></a>lwip_htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, def.o(i.lwip_htons))
<BR><BR>[Called By]<UL><LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_base
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_recv
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_prepare_echo
</UL>

<P><STRONG><a name="[834]"></a>lwip_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, init.o(i.lwip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = lwip_init &rArr; sys_timeouts_init &rArr; sys_timeout &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_init
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
</UL>
<BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[ff]"></a>lwip_netconn_do_close</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = lwip_netconn_do_close &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_close_shutdown)
</UL>
<P><STRONG><a name="[100]"></a>lwip_netconn_do_delconn</STRONG> (Thumb, 428 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_delconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = lwip_netconn_do_delconn &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_delete)
</UL>
<P><STRONG><a name="[101]"></a>lwip_netconn_do_getaddr</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_getaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = lwip_netconn_do_getaddr &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_getaddr)
</UL>
<P><STRONG><a name="[102]"></a>lwip_netconn_do_gethostbyname</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, api_msg.o(i.lwip_netconn_do_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 804<LI>Call Chain = lwip_netconn_do_gethostbyname &rArr; dns_gethostbyname_addrtype &rArr; dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_gethostbyname)
</UL>
<P><STRONG><a name="[103]"></a>lwip_netconn_do_join_leave_group</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_join_leave_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = lwip_netconn_do_join_leave_group &rArr; igmp_leavegroup &rArr; igmp_leavegroup_netif &rArr; igmp_send &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_join_leave_group)
</UL>
<P><STRONG><a name="[104]"></a>lwip_netconn_do_newconn</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_newconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = lwip_netconn_do_newconn &rArr; pcb_new &rArr; tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_new_with_proto_and_callback)
</UL>
<P><STRONG><a name="[105]"></a>lwip_netconn_do_recv</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, api_msg.o(i.lwip_netconn_do_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = lwip_netconn_do_recv &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_recv_data)
</UL>
<P><STRONG><a name="[106]"></a>lwip_netconn_do_send</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = lwip_netconn_do_send &rArr; udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_send)
</UL>
<P><STRONG><a name="[107]"></a>lwip_netconn_do_write</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, api_msg.o(i.lwip_netconn_do_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = lwip_netconn_do_write &rArr; lwip_netconn_do_writemore &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_lib.o(i.netconn_write_partly)
</UL>
<P><STRONG><a name="[191]"></a>lwip_netdev_netstat</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ethernetif.o(i.lwip_netdev_netstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = lwip_netdev_netstat &rArr; list_udps &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.constdata)
</UL>
<P><STRONG><a name="[190]"></a>lwip_netdev_ping</STRONG> (Thumb, 314 bytes, Stack size 112 bytes, ethernetif.o(i.lwip_netdev_ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = lwip_netdev_ping &rArr; lwip_ping_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_send
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_recv
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.constdata)
</UL>
<P><STRONG><a name="[859]"></a>lwip_ping_recv</STRONG> (Thumb, 98 bytes, Stack size 120 bytes, ping.o(i.lwip_ping_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = lwip_ping_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
</UL>

<P><STRONG><a name="[858]"></a>lwip_ping_send</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, ping.o(i.lwip_ping_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = lwip_ping_send &rArr; lwip_sendto &rArr; netbuf_ref &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_prepare_echo
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
</UL>

<P><STRONG><a name="[85f]"></a>lwip_recvfrom</STRONG> (Thumb, 654 bytes, Stack size 96 bytes, sockets.o(i.lwip_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_recv
</UL>

<P><STRONG><a name="[865]"></a>lwip_send</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, sockets.o(i.lwip_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + In Cycle
<LI>Call Chain = lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[861]"></a>lwip_sendto</STRONG> (Thumb, 296 bytes, Stack size 72 bytes, sockets.o(i.lwip_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = lwip_sendto &rArr; netbuf_ref &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>
<BR>[Called By]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_send
</UL>

<P><STRONG><a name="[857]"></a>lwip_setsockopt</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, sockets.o(i.lwip_setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = lwip_setsockopt &rArr; lwip_setsockopt_impl &rArr; igmp_leavegroup &rArr; igmp_leavegroup_netif &rArr; igmp_send &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
</UL>

<P><STRONG><a name="[856]"></a>lwip_socket</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, sockets.o(i.lwip_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
</UL>

<P><STRONG><a name="[6d7]"></a>lwip_standard_chksum</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, inet_chksum.o(i.lwip_standard_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_base
</UL>

<P><STRONG><a name="[552]"></a>lwip_strnicmp</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, def.o(i.lwip_strnicmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lwip_strnicmp
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_lookup
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
</UL>

<P><STRONG><a name="[1a2]"></a>lwip_system_init</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, sys_arch.o(i.lwip_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = lwip_system_init &rArr; tcpip_init &rArr; lwip_init &rArr; sys_timeouts_init &rArr; sys_timeout &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_set_addr
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init_private
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[873]"></a>$Super$$main</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = $Super$$main &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[10f]"></a>main_thread_entry</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, components.o(i.main_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = main_thread_entry &rArr; $Super$$main &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> components.o(i.rt_application_init)
</UL>
<P><STRONG><a name="[11]"></a>malloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mem_std.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cjson.o(i.cJSON_InitHooks)
<LI> cjson.o(.data)
</UL>
<P><STRONG><a name="[87e]"></a>mem_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = mem_free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[836]"></a>mem_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_arch.o(i.mem_init))
<BR><BR>[Called By]<UL><LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[87f]"></a>mem_malloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = mem_malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[880]"></a>mem_sandbox_create</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mem_sandbox.o(i.mem_sandbox_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = mem_sandbox_create &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_mem_init
</UL>

<P><STRONG><a name="[881]"></a>mem_sandbox_delete</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mem_sandbox.o(i.mem_sandbox_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = mem_sandbox_delete &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_mem_release
</UL>

<P><STRONG><a name="[882]"></a>mem_sandbox_free</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, mem_sandbox.o(i.mem_sandbox_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = mem_sandbox_free &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_sandbox_realloc
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_free
</UL>

<P><STRONG><a name="[884]"></a>mem_sandbox_malloc</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, mem_sandbox.o(i.mem_sandbox_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = mem_sandbox_malloc &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_sandbox_strndup
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_sandbox_strdup
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_sandbox_realloc
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_malloc
</UL>

<P><STRONG><a name="[886]"></a>mem_sandbox_realloc</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, mem_sandbox.o(i.mem_sandbox_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = mem_sandbox_realloc &rArr; mem_sandbox_malloc &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_sandbox_malloc
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_sandbox_free
</UL>
<BR>[Called By]<UL><LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_realloc
</UL>

<P><STRONG><a name="[887]"></a>mem_sandbox_strdup</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mem_sandbox.o(i.mem_sandbox_strdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = mem_sandbox_strdup &rArr; mem_sandbox_malloc &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_sandbox_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_strdup
</UL>

<P><STRONG><a name="[888]"></a>mem_sandbox_strndup</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, mem_sandbox.o(i.mem_sandbox_strndup))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = mem_sandbox_strndup &rArr; mem_sandbox_malloc &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_sandbox_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_strndup
</UL>

<P><STRONG><a name="[901]"></a>mem_trim</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_arch.o(i.mem_trim))
<BR><BR>[Called By]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[5f1]"></a>memp_free</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, memp.o(i.memp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[837]"></a>memp_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, memp.o(i.memp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = memp_init &rArr; memp_init_pool &rArr; memp_overflow_init_element
</UL>
<BR>[Calls]<UL><LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[889]"></a>memp_init_pool</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, memp.o(i.memp_init_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = memp_init_pool &rArr; memp_overflow_init_element
</UL>
<BR>[Calls]<UL><LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_init_element
</UL>
<BR>[Called By]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
</UL>

<P><STRONG><a name="[5f0]"></a>memp_malloc_fn</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, memp.o(i.memp_malloc_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[449]"></a>memrchr</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, vi_utils.o(i.memrchr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_line
</UL>

<P><STRONG><a name="[1df]"></a>mkdir</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, dfs_posix.o(i.mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = mkdir &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elmfat_mount
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkdir
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_elmfat_sample
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_posix.o(FSymTab)
</UL>
<P><STRONG><a name="[1dd]"></a>mkfs</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dfs_fs.o(i.mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = mkfs &rArr; dfs_mkfs &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_fs.o(FSymTab)
</UL>
<P><STRONG><a name="[518]"></a>mktime</STRONG> (Thumb, 366 bytes, Stack size 20 bytes, time.o(i.mktime))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mktime
</UL>
<BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__isleap
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
</UL>

<P><STRONG><a name="[894]"></a>mmc_send_op_cond</STRONG> (Thumb, 152 bytes, Stack size 72 bytes, mmc.o(i.mmc_send_op_cond))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = mmc_send_op_cond &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_delay_ms
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>

<P><STRONG><a name="[896]"></a>mmcsd_all_get_cid</STRONG> (Thumb, 64 bytes, Stack size 64 bytes, mmcsd_core.o(i.mmcsd_all_get_cid))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = mmcsd_all_get_cid &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>

<P><STRONG><a name="[897]"></a>mmcsd_alloc_host</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, mmcsd_core.o(i.mmcsd_alloc_host))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = mmcsd_alloc_host &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_host_create
</UL>

<P><STRONG><a name="[899]"></a>mmcsd_app_set_bus_width</STRONG> (Thumb, 80 bytes, Stack size 64 bytes, sd.o(i.mmcsd_app_set_bus_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = mmcsd_app_set_bus_width &rArr; mmcsd_send_app_cmd &rArr; mmcsd_app_cmd &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
</UL>

<P><STRONG><a name="[89b]"></a>mmcsd_change</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mmcsd_core.o(i.mmcsd_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = mmcsd_change &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>
<BR>[Called By]<UL><LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_host_create
</UL>

<P><STRONG><a name="[12a]"></a>mmcsd_detect</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, mmcsd_core.o(i.mmcsd_detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = mmcsd_detect &rArr; init_mmc &rArr; mmcsd_mmc_init_card &rArr; mmc_select_bus_width &rArr; mmc_compare_ext_csds &rArr; mmc_get_ext_csd &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_send_op_cond
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_if_cond
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_op_cond
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdio
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_power_up
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_power_off
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_go_idle
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_op_cond
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_unlock
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_lock
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmcsd_core.o(i.rt_mmcsd_core_init)
</UL>
<P><STRONG><a name="[8a2]"></a>mmcsd_get_card_addr</STRONG> (Thumb, 60 bytes, Stack size 64 bytes, sd.o(i.mmcsd_get_card_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = mmcsd_get_card_addr &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[8a3]"></a>mmcsd_get_cid</STRONG> (Thumb, 262 bytes, Stack size 120 bytes, mmcsd_core.o(i.mmcsd_get_cid))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = mmcsd_get_cid &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>

<P><STRONG><a name="[8a4]"></a>mmcsd_get_csd</STRONG> (Thumb, 254 bytes, Stack size 120 bytes, mmcsd_core.o(i.mmcsd_get_csd))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = mmcsd_get_csd &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>

<P><STRONG><a name="[8a5]"></a>mmcsd_get_scr</STRONG> (Thumb, 190 bytes, Stack size 112 bytes, sd.o(i.mmcsd_get_scr))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = mmcsd_get_scr &rArr; mmcsd_app_cmd &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_app_cmd
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_data_timeout
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
</UL>

<P><STRONG><a name="[6eb]"></a>mmcsd_go_idle</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, mmcsd_core.o(i.mmcsd_go_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = mmcsd_go_idle &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_chip_select
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_delay_ms
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>

<P><STRONG><a name="[6e8]"></a>mmcsd_host_lock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mmcsd_core.o(i.mmcsd_host_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = mmcsd_host_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_blksize
</UL>

<P><STRONG><a name="[6e6]"></a>mmcsd_host_unlock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mmcsd_core.o(i.mmcsd_host_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = mmcsd_host_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_blksize
</UL>

<P><STRONG><a name="[8b2]"></a>mmcsd_req_complete</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mmcsd_core.o(i.mmcsd_req_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = mmcsd_req_complete &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rthw_sdio_request
</UL>

<P><STRONG><a name="[8ab]"></a>mmcsd_select_card</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mmcsd_core.o(i.mmcsd_select_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = mmcsd_select_card &rArr; _mmcsd_select_card &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmcsd_select_card
</UL>
<BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[6e4]"></a>mmcsd_select_voltage</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mmcsd_core.o(i.mmcsd_select_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = mmcsd_select_voltage &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_iocfg
</UL>
<BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdio
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
</UL>

<P><STRONG><a name="[89a]"></a>mmcsd_send_app_cmd</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, sd.o(i.mmcsd_send_app_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = mmcsd_send_app_cmd &rArr; mmcsd_app_cmd &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_app_cmd
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_app_set_bus_width
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_op_cond
</UL>

<P><STRONG><a name="[8a1]"></a>mmcsd_send_app_op_cond</STRONG> (Thumb, 176 bytes, Stack size 72 bytes, sd.o(i.mmcsd_send_app_op_cond))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = mmcsd_send_app_op_cond &rArr; mmcsd_send_app_cmd &rArr; mmcsd_app_cmd &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[3d5]"></a>mmcsd_send_cmd</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, mmcsd_core.o(i.mmcsd_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_card_addr
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_app_cmd
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_send_op_cond
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_if_cond
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmcsd_select_card
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_use_crc
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_read_ocr
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_go_idle
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_all_get_cid
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_op_cond
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_switch
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_card_addr
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_blksize
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_direct
</UL>

<P><STRONG><a name="[89e]"></a>mmcsd_send_if_cond</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, sd.o(i.mmcsd_send_if_cond))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = mmcsd_send_if_cond &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[88e]"></a>mmcsd_send_request</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, mmcsd_core.o(i.mmcsd_send_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>
<BR>[Called By]<UL><LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_cmd
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_scr
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_switch
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_get_ext_csd
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
</UL>

<P><STRONG><a name="[8a9]"></a>mmcsd_set_bus_mode</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mmcsd_core.o(i.mmcsd_set_bus_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmcsd_set_bus_mode &rArr; mmcsd_set_iocfg
</UL>
<BR>[Calls]<UL><LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_iocfg
</UL>
<BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[892]"></a>mmcsd_set_bus_width</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mmcsd_core.o(i.mmcsd_set_bus_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmcsd_set_bus_width &rArr; mmcsd_set_iocfg
</UL>
<BR>[Calls]<UL><LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_iocfg
</UL>
<BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_bus_width
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_bus_wide
</UL>

<P><STRONG><a name="[8a7]"></a>mmcsd_set_chip_select</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mmcsd_core.o(i.mmcsd_set_chip_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmcsd_set_chip_select &rArr; mmcsd_set_iocfg
</UL>
<BR>[Calls]<UL><LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_iocfg
</UL>
<BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_go_idle
</UL>

<P><STRONG><a name="[8ac]"></a>mmcsd_set_clock</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mmcsd_core.o(i.mmcsd_set_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = mmcsd_set_clock &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_iocfg
</UL>
<BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[8a6]"></a>mmcsd_set_data_timeout</STRONG> (Thumb, 194 bytes, Stack size 20 bytes, mmcsd_core.o(i.mmcsd_set_data_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mmcsd_set_data_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_scr
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_switch
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
</UL>

<P><STRONG><a name="[6e3]"></a>mmcsd_spi_read_ocr</STRONG> (Thumb, 62 bytes, Stack size 64 bytes, mmcsd_core.o(i.mmcsd_spi_read_ocr))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = mmcsd_spi_read_ocr &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
</UL>

<P><STRONG><a name="[8a8]"></a>mmcsd_spi_use_crc</STRONG> (Thumb, 50 bytes, Stack size 64 bytes, mmcsd_core.o(i.mmcsd_spi_use_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = mmcsd_spi_use_crc &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[8b7]"></a>msh_auto_complete</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, msh.o(i.msh_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = msh_auto_complete &rArr; msh_auto_complete_path &rArr; opendir &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[8b8]"></a>msh_auto_complete_path</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, msh.o(i.msh_auto_complete_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = msh_auto_complete_path &rArr; opendir &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[631]"></a>msh_exec</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, msh.o(i.msh_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = msh_exec &rArr; msh_exec_script &rArr;  msh_exec (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
</UL>

<P><STRONG><a name="[8bb]"></a>msh_exec_script</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, msh_file.o(i.msh_exec_script))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + In Cycle
<LI>Call Chain = msh_exec_script &rArr;  msh_exec (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_readline
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</UL>

<P><STRONG><a name="[1c9]"></a>msh_help</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, msh.o(i.msh_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = msh_help &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[626]"></a>msh_is_used</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, msh.o(i.msh_is_used))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[416]"></a>my_mvaddstr</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, vt_sl.o(i.my_mvaddstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = my_mvaddstr &rArr; vt_draw_char_at &rArr; vt_move_to &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_draw_char_at
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_smoke
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_sl
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_man
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_D51
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_C51
</UL>

<P><STRONG><a name="[63c]"></a>netbuf_delete</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, netbuf.o(i.netbuf_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[869]"></a>netbuf_free</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, netbuf.o(i.netbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = netbuf_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[867]"></a>netbuf_ref</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, netbuf.o(i.netbuf_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = netbuf_ref &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[8c0]"></a>netconn_alloc</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, api_msg.o(i.netconn_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = netconn_alloc &rArr; sys_mbox_new &rArr; rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[82f]"></a>netconn_delete</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, api_lib.o(i.netconn_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = netconn_delete &rArr; netconn_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>
<BR>[Called By]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</UL>

<P><STRONG><a name="[8c8]"></a>netconn_free</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, api_msg.o(i.netconn_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = netconn_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_set_invalid
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</UL>

<P><STRONG><a name="[864]"></a>netconn_getaddr</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, api_lib.o(i.netconn_getaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = netconn_getaddr &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[833]"></a>netconn_gethostbyname</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, api_lib.o(i.netconn_gethostbyname))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
</UL>

<P><STRONG><a name="[86f]"></a>netconn_join_leave_group</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, api_lib.o(i.netconn_join_leave_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_drop_registered_memberships
</UL>

<P><STRONG><a name="[86e]"></a>netconn_new_with_proto_and_callback</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, api_lib.o(i.netconn_new_with_proto_and_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = netconn_new_with_proto_and_callback &rArr; netconn_alloc &rArr; sys_mbox_new &rArr; rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</UL>

<P><STRONG><a name="[863]"></a>netconn_recv</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, api_lib.o(i.netconn_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[862]"></a>netconn_recv_tcp_pbuf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, api_lib.o(i.netconn_recv_tcp_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = netconn_recv_tcp_pbuf &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[868]"></a>netconn_send</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, api_lib.o(i.netconn_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = netconn_send &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[866]"></a>netconn_write_partly</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, api_lib.o(i.netconn_write_partly))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = netconn_write_partly &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[8d5]"></a>netdev_cmd_ping</STRONG> (Thumb, 420 bytes, Stack size 64 bytes, netdev.o(i.netdev_cmd_ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = netdev_cmd_ping &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_first_by_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ping
</UL>

<P><STRONG><a name="[1e9]"></a>netdev_dns</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, netdev.o(i.netdev_dns))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = netdev_dns &rArr; netdev_set_dns &rArr; netdev_set_dns_server &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_dns
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netdev.o(FSymTab)
</UL>
<P><STRONG><a name="[8d9]"></a>netdev_get_by_family</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, netdev.o(i.netdev_get_by_family))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = netdev_get_by_family
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_init
</UL>

<P><STRONG><a name="[561]"></a>netdev_get_by_name</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, netdev.o(i.netdev_get_by_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = netdev_get_by_name &rArr; rt_strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_down
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_flags_sync
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns
</UL>

<P><STRONG><a name="[8d1]"></a>netdev_get_first_by_flags</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, netdev.o(i.netdev_get_first_by_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = netdev_get_first_by_flags
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_getaddrinfo
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_auto_change_default
</UL>

<P><STRONG><a name="[1e7]"></a>netdev_ifconfig</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, netdev.o(i.netdev_ifconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = netdev_ifconfig &rArr; netdev_set_if &rArr; netdev_set_netmask &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_if
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netdev.o(FSymTab)
</UL>
<P><STRONG><a name="[8dd]"></a>netdev_ip4addr_aton</STRONG> (Thumb, 418 bytes, Stack size 48 bytes, netdev_ipaddr.o(i.netdev_ip4addr_aton))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = netdev_ip4addr_aton &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns
</UL>

<P><STRONG><a name="[8d6]"></a>netdev_ip4addr_ntoa</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, netdev_ipaddr.o(i.netdev_ip4addr_ntoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = netdev_ip4addr_ntoa &rArr; netdev_ip4addr_ntoa_r
</UL>
<BR>[Calls]<UL><LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_if
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_dns
</UL>

<P><STRONG><a name="[8de]"></a>netdev_ip4addr_ntoa_r</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, netdev_ipaddr.o(i.netdev_ip4addr_ntoa_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = netdev_ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa
</UL>

<P><STRONG><a name="[562]"></a>netdev_low_level_set_dns_server</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, netdev.o(i.netdev_low_level_set_dns_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = netdev_low_level_set_dns_server &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
</UL>

<P><STRONG><a name="[8df]"></a>netdev_low_level_set_gw</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, netdev.o(i.netdev_low_level_set_gw))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = netdev_low_level_set_gw &rArr; sal_check_netdev_internet_up &rArr; rt_work_submit &rArr; rt_workqueue_submit_work &rArr; _workqueue_submit_delayed_work &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
</UL>
<BR>[Called By]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>

<P><STRONG><a name="[8e1]"></a>netdev_low_level_set_ipaddr</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, netdev.o(i.netdev_low_level_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = netdev_low_level_set_ipaddr &rArr; sal_check_netdev_internet_up &rArr; rt_work_submit &rArr; rt_workqueue_submit_work &rArr; _workqueue_submit_delayed_work &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
</UL>
<BR>[Called By]<UL><LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[8e2]"></a>netdev_low_level_set_link_status</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, netdev.o(i.netdev_low_level_set_link_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = netdev_low_level_set_link_status &rArr; sal_check_netdev_internet_up &rArr; rt_work_submit &rArr; rt_workqueue_submit_work &rArr; _workqueue_submit_delayed_work &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_auto_change_default
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_down
</UL>

<P><STRONG><a name="[8e3]"></a>netdev_low_level_set_netmask</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, netdev.o(i.netdev_low_level_set_netmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = netdev_low_level_set_netmask &rArr; sal_check_netdev_internet_up &rArr; rt_work_submit &rArr; rt_workqueue_submit_work &rArr; _workqueue_submit_delayed_work &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
</UL>
<BR>[Called By]<UL><LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
</UL>

<P><STRONG><a name="[8e4]"></a>netdev_low_level_set_status</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, netdev.o(i.netdev_low_level_set_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = netdev_low_level_set_status &rArr; netdev_auto_change_default &rArr; netdev_get_first_by_flags
</UL>
<BR>[Calls]<UL><LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_auto_change_default
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>

<P><STRONG><a name="[1ea]"></a>netdev_netstat</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, netdev.o(i.netdev_netstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = netdev_netstat &rArr; netdev_cmd_netstat &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_netstat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netdev.o(FSymTab)
</UL>
<P><STRONG><a name="[1e8]"></a>netdev_ping</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, netdev.o(i.netdev_ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = netdev_ping &rArr; netdev_cmd_ping &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netdev.o(FSymTab)
</UL>
<P><STRONG><a name="[8cf]"></a>netdev_register</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, netdev.o(i.netdev_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = netdev_register &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_add
</UL>

<P><STRONG><a name="[8d2]"></a>netdev_set_default</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, netdev.o(i.netdev_set_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netdev_set_default
</UL>
<BR>[Called By]<UL><LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_auto_change_default
</UL>

<P><STRONG><a name="[8e5]"></a>netdev_set_dns_server</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, netdev.o(i.netdev_set_dns_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = netdev_set_dns_server &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns
</UL>

<P><STRONG><a name="[8e6]"></a>netdev_set_gw</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, netdev.o(i.netdev_set_gw))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = netdev_set_gw &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
</UL>

<P><STRONG><a name="[8e7]"></a>netdev_set_ipaddr</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, netdev.o(i.netdev_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = netdev_set_ipaddr &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
</UL>

<P><STRONG><a name="[8e8]"></a>netdev_set_netmask</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, netdev.o(i.netdev_set_netmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = netdev_set_netmask &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
</UL>

<P><STRONG><a name="[8e9]"></a>netif_add</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, netif.o(i.netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 788<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_do_netif_add
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
</UL>

<P><STRONG><a name="[838]"></a>netif_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, netif.o(i.netif_init))
<BR><BR>[Called By]<UL><LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[85a]"></a>netif_set_addr</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, netif.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_do_netif_set_addr
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_set_addr_info
</UL>

<P><STRONG><a name="[5d9]"></a>netif_set_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(i.netif_set_default))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_set_default
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</UL>

<P><STRONG><a name="[85e]"></a>netif_set_down</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, netif.o(i.netif_set_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = netif_set_down &rArr; etharp_cleanup_netif &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_status
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_set_down
</UL>

<P><STRONG><a name="[85d]"></a>netif_set_gw</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, netif.o(i.netif_set_gw))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = netif_set_gw &rArr; netdev_low_level_set_gw &rArr; sal_check_netdev_internet_up &rArr; rt_work_submit &rArr; rt_workqueue_submit_work &rArr; _workqueue_submit_delayed_work &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_gw
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
</UL>
<BR>[Called By]<UL><LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_set_addr_info
</UL>

<P><STRONG><a name="[85b]"></a>netif_set_ipaddr</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, netif.o(i.netif_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_netif_ip_addr_changed
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_netif_ip_addr_changed
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_ipaddr
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
</UL>
<BR>[Called By]<UL><LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_set_addr_info
</UL>

<P><STRONG><a name="[bd]"></a>netif_set_link_down</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, netif.o(i.netif_set_link_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = netif_set_link_down &rArr; netdev_low_level_set_link_status &rArr; sal_check_netdev_internet_up &rArr; rt_work_submit &rArr; rt_workqueue_submit_work &rArr; _workqueue_submit_delayed_work &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_link_status
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_rx_thread_entry)
</UL>
<P><STRONG><a name="[bc]"></a>netif_set_link_up</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, netif.o(i.netif_set_link_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = netif_set_link_up &rArr; netif_issue_reports &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_link_status
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_rx_thread_entry)
</UL>
<P><STRONG><a name="[85c]"></a>netif_set_netmask</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, netif.o(i.netif_set_netmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = netif_set_netmask &rArr; netdev_low_level_set_netmask &rArr; sal_check_netdev_internet_up &rArr; rt_work_submit &rArr; rt_workqueue_submit_work &rArr; _workqueue_submit_delayed_work &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_netmask
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
</UL>
<BR>[Called By]<UL><LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_set_addr_info
</UL>

<P><STRONG><a name="[5da]"></a>netif_set_up</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, netif.o(i.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = netif_set_up &rArr; netif_issue_reports &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_status
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_set_up
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</UL>

<P><STRONG><a name="[5d4]"></a>netifapi_netif_add</STRONG> (Thumb, 72 bytes, Stack size 72 bytes, netifapi.o(i.netifapi_netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = netifapi_netif_add &rArr; tcpip_api_call &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
</UL>
<BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>

<P><STRONG><a name="[5dc]"></a>netifapi_netif_common</STRONG> (Thumb, 32 bytes, Stack size 56 bytes, netifapi.o(i.netifapi_netif_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = netifapi_netif_common &rArr; tcpip_api_call &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
</UL>

<P><STRONG><a name="[872]"></a>netifapi_netif_set_addr</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, netifapi.o(i.netifapi_netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = netifapi_netif_set_addr &rArr; tcpip_api_call &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
</UL>

<P><STRONG><a name="[3f6]"></a>open</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, dfs_posix.o(i.open))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = open &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_stdio_set_console
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_terminal_width_height
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_insert
<LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_elmfat_sample
</UL>

<P><STRONG><a name="[474]"></a>opendir</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, dfs_posix.o(i.opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = opendir &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elmfat_mount
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</UL>

<P><STRONG><a name="[a18]"></a>option</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, vt_sl.o(i.option))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_sl
</UL>

<P><STRONG><a name="[8f4]"></a>optparse</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, optparse.o(i.optparse))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + In Cycle
<LI>Call Chain = optparse &rArr;  optparse (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optparse_is_dashdash
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optparse_argtype
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optparse_error
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optparse
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optparse_permute
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optparse_is_shortopt
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_main
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optparse
</UL>

<P><STRONG><a name="[a08]"></a>optparse_arg</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, optparse.o(i.optparse_arg))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_main
</UL>

<P><STRONG><a name="[8f9]"></a>optparse_error</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, optparse.o(i.optparse_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = optparse_error
</UL>
<BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optparse
</UL>

<P><STRONG><a name="[a07]"></a>optparse_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, optparse.o(i.optparse_init))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_main
</UL>

<P><STRONG><a name="[55b]"></a>pbuf_alloc</STRONG> (Thumb, 704 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_rx
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>

<P><STRONG><a name="[8fb]"></a>pbuf_cat</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = pbuf_cat &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>

<P><STRONG><a name="[8fc]"></a>pbuf_chain</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = pbuf_chain &rArr; pbuf_ref &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[9e1]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[5ee]"></a>pbuf_copy</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = pbuf_copy &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[556]"></a>pbuf_copy_partial</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = pbuf_copy_partial &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
</UL>

<P><STRONG><a name="[559]"></a>pbuf_free</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>

<P><STRONG><a name="[5f3]"></a>pbuf_header</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = pbuf_header &rArr; pbuf_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
</UL>

<P><STRONG><a name="[6f9]"></a>pbuf_header_force</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_header_force))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = pbuf_header_force &rArr; pbuf_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[55d]"></a>pbuf_put_at</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_put_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = pbuf_put_at &rArr; pbuf_skip &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[6f5]"></a>pbuf_realloc</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
</UL>

<P><STRONG><a name="[5ef]"></a>pbuf_ref</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = pbuf_ref &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[900]"></a>pbuf_skip</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pbuf_skip &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip_const
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_put_at
</UL>

<P><STRONG><a name="[55c]"></a>pbuf_take</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = pbuf_take &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[55e]"></a>pbuf_take_at</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_take_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = pbuf_take_at &rArr; pbuf_take &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[54f]"></a>pbuf_try_get_at</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_try_get_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pbuf_try_get_at &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip_const
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_skip_name
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_compare_name
</UL>

<P><STRONG><a name="[907]"></a>poll</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, poll.o(i.poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = poll &rArr; poll_do &rArr; do_pollfd &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_teardown
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_table_init
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_do
</UL>
<BR>[Called By]<UL><LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_poll
</UL>

<P><STRONG><a name="[6f6]"></a>raw_input</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, raw.o(i.raw_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = raw_input &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input_match
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[8ed]"></a>raw_netif_ip_addr_changed</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, raw.o(i.raw_netif_ip_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = raw_netif_ip_addr_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[912]"></a>raw_new</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, raw.o(i.raw_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = raw_new &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new_ip_type
</UL>

<P><STRONG><a name="[903]"></a>raw_new_ip_type</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, raw.o(i.raw_new_ip_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = raw_new_ip_type &rArr; raw_new &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
</UL>
<BR>[Called By]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[904]"></a>raw_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw.o(i.raw_recv))
<BR><BR>[Called By]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[84d]"></a>raw_remove</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, raw.o(i.raw_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = raw_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
</UL>

<P><STRONG><a name="[850]"></a>raw_send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, raw.o(i.raw_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = raw_send &rArr; raw_sendto &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
</UL>

<P><STRONG><a name="[851]"></a>raw_sendto</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, raw.o(i.raw_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = raw_sendto &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
</UL>

<P><STRONG><a name="[3f8]"></a>read</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dfs_posix.o(i.read))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = read &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_stdio_read
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_readline
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_read
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_elmfat_sample
</UL>

<P><STRONG><a name="[5a7]"></a>read_key</STRONG> (Thumb, 526 bytes, Stack size 48 bytes, vi_utils.o(i.read_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 484 + Unknown Stack Size
<LI>Call Chain = read_key &rArr; safe_poll &rArr; poll &rArr; poll_do &rArr; do_pollfd &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_read
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_poll
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readit
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_file
</UL>

<P><STRONG><a name="[53e]"></a>readdir</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, dfs_posix.o(i.readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = readdir &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</UL>

<P><STRONG><a name="[750]"></a>realloc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mem_std.o(i.realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = realloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_realloc
</UL>

<P><STRONG><a name="[919]"></a>recv</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, net_sockets.o(i.recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = recv &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_recv
</UL>

<P><STRONG><a name="[48b]"></a>rename</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dfs_posix.o(i.rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = rename &rArr; dfs_file_rename &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
</UL>

<P><STRONG><a name="[8ba]"></a>rewinddir</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dfs_posix.o(i.rewinddir))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rewinddir &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</UL>

<P><STRONG><a name="[1da]"></a>rm</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dfs_file.o(i.rm))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = rm &rArr; dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_file.o(FSymTab)
</UL>
<P><STRONG><a name="[91e]"></a>rt_application_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, components.o(i.rt_application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2e4]"></a>rt_assert_handler</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, kservice.o(i.rt_assert_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_irq_enable
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_attach_irq
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rthw_sdio_request
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_init
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_get
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_write
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_read
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_control
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_submit_work
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peek
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_len
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lcd_control
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_putc
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_getc
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_dma_transmit
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_dma_config
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_configure
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_isr
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dma_tx_complete
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_device_attach
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_configure
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_bus_init
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_tx
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_spi_port_init
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_delete
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_unlock
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lock
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_write
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_read
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_control
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_write
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_read
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_write
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_read
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spidev_device_init
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_send
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_poll
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_open
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_put_index
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_get_index
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tc_flush
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_rx
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_calc_recved_len
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_send_op_cond
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdio
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_core_init
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_partition
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_touch_register
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_touch_isr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_touch_read
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_touch_open
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_touch_control
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_touch_close
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_write
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_read
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_control
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_device_init
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_recv
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_direct
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt_mode
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_sandbox_malloc
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_sandbox_free
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_write
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_read
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_ioctl
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_flush
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_write
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_read
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_ioctl
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_getdents
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_close
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_strndup
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_strdup
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_realloc
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_malloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_netmask
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_ipaddr
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_gw
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_dns_server
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init_private
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_flags_sync
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_add
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_linkoutput
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_tx_thread_entry
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_getaddrinfo
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_freeaddrinfo
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_lock
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_aton
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_netmask
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_ipaddr
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_gw
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns_server
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_write
<LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
<LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_get
<LI><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_add
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_close
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read_line
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_next_chunk
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;littlevgl2rtt_init
</UL>

<P><STRONG><a name="[5d0]"></a>rt_calloc</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, memheap.o(i.rt_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_calloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_gt917s_init
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_control
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_alloc
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_add
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_init
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_alloc
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
<LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_session_create
</UL>

<P><STRONG><a name="[91f]"></a>rt_completion_done</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, completion.o(i.rt_completion_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[921]"></a>rt_completion_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, completion.o(i.rt_completion_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_completion_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>

<P><STRONG><a name="[3f0]"></a>rt_completion_wait</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, completion.o(i.rt_completion_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rt_completion_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
</UL>

<P><STRONG><a name="[93f]"></a>rt_components_board_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(i.rt_components_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[87a]"></a>rt_components_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(i.rt_components_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[70b]"></a>rt_console_get_device</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kservice.o(i.rt_console_get_device))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_system_init
</UL>

<P><STRONG><a name="[922]"></a>rt_console_set_device</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, kservice.o(i.rt_console_set_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_console_set_device &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</UL>
<BR>[Called By]<UL><LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[923]"></a>rt_data_queue_deinit</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dataqueue.o(i.rt_data_queue_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_data_queue_deinit &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
</UL>

<P><STRONG><a name="[925]"></a>rt_data_queue_init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, dataqueue.o(i.rt_data_queue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_data_queue_init &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>

<P><STRONG><a name="[927]"></a>rt_data_queue_len</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, dataqueue.o(i.rt_data_queue_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_data_queue_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
</UL>

<P><STRONG><a name="[928]"></a>rt_data_queue_peek</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, dataqueue.o(i.rt_data_queue_peek))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_data_queue_peek &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[929]"></a>rt_data_queue_pop</STRONG> (Thumb, 410 bytes, Stack size 48 bytes, dataqueue.o(i.rt_data_queue_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_len
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[3ec]"></a>rt_data_queue_push</STRONG> (Thumb, 346 bytes, Stack size 48 bytes, dataqueue.o(i.rt_data_queue_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_data_queue_push &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
</UL>

<P><STRONG><a name="[924]"></a>rt_data_queue_reset</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, dataqueue.o(i.rt_data_queue_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = rt_data_queue_reset &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
</UL>

<P><STRONG><a name="[92c]"></a>rt_delayed_work_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, workqueue.o(i.rt_delayed_work_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_delayed_work_init
</UL>
<BR>[Calls]<UL><LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
</UL>

<P><STRONG><a name="[4ff]"></a>rt_device_close</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, device.o(i.rt_device_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_device_close &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_close
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_close
</UL>

<P><STRONG><a name="[501]"></a>rt_device_control</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, device.o(i.rt_device_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_ioctl
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_ioctl
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;littlevgl2rtt_init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fb_flush
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_sample
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_callback
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_entry
</UL>

<P><STRONG><a name="[503]"></a>rt_device_find</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, device.o(i.rt_device_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>
<BR>[Called By]<UL><LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_gt917s_init
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_find_by_dev_name
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_attach
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_stat
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;littlevgl2rtt_init
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_sample
</UL>

<P><STRONG><a name="[5d8]"></a>rt_device_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, device.o(i.rt_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = rt_device_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_device_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</UL>

<P><STRONG><a name="[504]"></a>rt_device_open</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, device.o(i.rt_device_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = rt_device_open &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_gt917s_init
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_open
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;littlevgl2rtt_init
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_sample
</UL>

<P><STRONG><a name="[930]"></a>rt_device_pin_register</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pin.o(i.rt_device_pin_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_device_pin_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pin_init
</UL>

<P><STRONG><a name="[505]"></a>rt_device_read</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, device.o(i.rt_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_device_read &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_read
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_read
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_entry
</UL>

<P><STRONG><a name="[5a3]"></a>rt_device_register</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, device.o(i.rt_device_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_blk_device_create
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lcd_hw_init
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spidev_device_init
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_touch_register
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_device_init
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>

<P><STRONG><a name="[67d]"></a>rt_device_set_rx_indicate</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, device.o(i.rt_device_set_rx_indicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_device_set_rx_indicate &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_open
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_close
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_sample
</UL>

<P><STRONG><a name="[932]"></a>rt_device_unregister</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, device.o(i.rt_device_unregister))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_device_unregister &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_delete
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_remove
</UL>

<P><STRONG><a name="[506]"></a>rt_device_write</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, device.o(i.rt_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_write
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_write
</UL>

<P><STRONG><a name="[407]"></a>rt_enter_critical</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scheduler.o(i.rt_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_sandbox_malloc
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_sandbox_free
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_join_leave_group
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
</UL>

<P><STRONG><a name="[5b3]"></a>rt_event_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ipc.o(i.rt_event_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_event_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_attach
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_host_create
</UL>

<P><STRONG><a name="[5c7]"></a>rt_event_recv</STRONG> (Thumb, 410 bytes, Stack size 56 bytes, ipc.o(i.rt_event_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_event_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rthw_sdio_wait_completed
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_tx
</UL>

<P><STRONG><a name="[5c4]"></a>rt_event_send</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, ipc.o(i.rt_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rthw_sdio_irq_process
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_rx
</UL>

<P><STRONG><a name="[40a]"></a>rt_exit_critical</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, scheduler.o(i.rt_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_sandbox_malloc
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_sandbox_free
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_join_leave_group
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
</UL>

<P><STRONG><a name="[a8]"></a>rt_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, memheap.o(i.rt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_host_create
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_delete
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_switch
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdio
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_compare_ext_csds
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_remove
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_control
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_free_cis
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_teardown
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_sandbox_delete
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_sandbox_create
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_close
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_send
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_free
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_netdev_internet_up_work
<LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
<LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_session_create
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_close
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_clean
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_task_run
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_sample
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cjson_port.o(i.cJSON_hook_init)
</UL>
<P><STRONG><a name="[93a]"></a>rt_hw_board_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, drv_common.o(i.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = rt_hw_board_init &rArr; rt_hw_usart_init &rArr; rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pin_init
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_systick_init
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[958]"></a>rt_hw_console_output</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kservice.o(i.rt_hw_console_output))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[5ad]"></a>rt_hw_cpu_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpuport.o(i.rt_hw_cpu_reset))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elmfat_mount
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot
</UL>

<P><STRONG><a name="[940]"></a>rt_hw_gt917s_init</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, gt917s.o(i.rt_hw_gt917s_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = rt_hw_gt917s_init &rArr; gt917s_soft_reset &rArr; gt917s_write_reg &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_soft_reset
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_touch_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_gt917s_port
</UL>

<P><STRONG><a name="[1a7]"></a>rt_hw_gt917s_port</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, touch_init.o(i.rt_hw_gt917s_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = rt_hw_gt917s_port &rArr; rt_hw_gt917s_init &rArr; gt917s_soft_reset &rArr; gt917s_write_reg &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_gt917s_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch_init.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[22f]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, cpuport.o(i.rt_hw_hard_fault_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = rt_hw_hard_fault_exception &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[19d]"></a>rt_hw_i2c_init</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, drv_soft_i2c.o(i.rt_hw_i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = rt_hw_i2c_init &rArr; rt_i2c_bit_add_bus &rArr; rt_i2c_bus_device_register &rArr; rt_i2c_bus_device_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bit_add_bus
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_i2c_gpio_init
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_i2c_bus_unlock
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_soft_i2c.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[93d]"></a>rt_hw_pin_init</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, drv_gpio.o(i.rt_hw_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = rt_hw_pin_init &rArr; rt_device_pin_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
</UL>
<BR>[Called By]<UL><LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1a4]"></a>rt_hw_sdio_init</STRONG> (Thumb, 124 bytes, Stack size 152 bytes, drv_sdio.o(i.rt_hw_sdio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = rt_hw_sdio_init &rArr; sdio_host_create &rArr; mmcsd_alloc_host &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_host_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sdio.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[34a]"></a>rt_hw_serial_isr</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, serial.o(i.rt_hw_serial_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peek
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_put_index
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_check_buffer_size
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_isr
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dma_tx_complete
</UL>

<P><STRONG><a name="[946]"></a>rt_hw_serial_register</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, serial.o(i.rt_hw_serial_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
</UL>

<P><STRONG><a name="[5b9]"></a>rt_hw_spi_device_attach</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, drv_spi.o(i.rt_hw_spi_device_attach))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = rt_hw_spi_device_attach &rArr; rt_spi_bus_attach_device &rArr; rt_spidev_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_flash_init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_init
</UL>

<P><STRONG><a name="[19b]"></a>rt_hw_spi_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_spi.o(i.rt_hw_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = rt_hw_spi_init &rArr; rt_hw_spi_bus_init &rArr; rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_get_dma_info
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_bus_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[3df]"></a>rt_hw_stack_init</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, cpuport.o(i.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[93b]"></a>rt_hw_systick_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, drv_common.o(i.rt_hw_systick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_hw_systick_init &rArr; HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[94f]"></a>rt_hw_touch_isr</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, touch.o(i.rt_hw_touch_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_hw_touch_isr &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_irq_callback
</UL>

<P><STRONG><a name="[941]"></a>rt_hw_touch_register</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, touch.o(i.rt_hw_touch_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_hw_touch_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_gt917s_init
</UL>

<P><STRONG><a name="[93e]"></a>rt_hw_usart_init</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, drv_usart.o(i.rt_hw_usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = rt_hw_usart_init &rArr; rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_uart_get_dma_config
</UL>
<BR>[Called By]<UL><LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[943]"></a>rt_i2c_bit_add_bus</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, i2c-bit-ops.o(i.rt_i2c_bit_add_bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = rt_i2c_bit_add_bus &rArr; rt_i2c_bus_device_register &rArr; rt_i2c_bus_device_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
</UL>

<P><STRONG><a name="[952]"></a>rt_i2c_bus_device_device_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, i2c_dev.o(i.rt_i2c_bus_device_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_i2c_bus_device_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_register
</UL>

<P><STRONG><a name="[951]"></a>rt_i2c_bus_device_register</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, i2c_core.o(i.rt_i2c_bus_device_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_i2c_bus_device_register &rArr; rt_i2c_bus_device_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bit_add_bus
</UL>

<P><STRONG><a name="[1a8]"></a>rt_i2c_core_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c_core.o(i.rt_i2c_core_init))
<BR>[Address Reference Count : 1]<UL><LI> i2c_core.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[694]"></a>rt_i2c_master_recv</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, i2c_core.o(i.rt_i2c_master_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_i2c_master_recv &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_read
</UL>

<P><STRONG><a name="[695]"></a>rt_i2c_master_send</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, i2c_core.o(i.rt_i2c_master_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_i2c_master_send &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_write
</UL>

<P><STRONG><a name="[67b]"></a>rt_i2c_transfer</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, i2c_core.o(i.rt_i2c_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_write_reg
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_read_regs
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bus_device_control
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_send
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_recv
</UL>

<P><STRONG><a name="[2a6]"></a>rt_interrupt_enter</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[3db]"></a>rt_interrupt_get_nest</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, irq.o(i.rt_interrupt_get_nest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>

<P><STRONG><a name="[2a8]"></a>rt_interrupt_leave</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[331]"></a>rt_kprintf</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, kservice.o(i.rt_kprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage_fault_track
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_manage_fault_track
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_fault_track
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_gt917s_init
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_blk_device_create
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elmfat_mount
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_find_by_dev_name
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_alloc_host
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_host_create
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sdio_init
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rthw_sdio_wait_completed
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rthw_sdio_transfer_by_dma
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rthw_sdio_iocfg
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sram_test
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sram_init
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lcd_init
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_write
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_read
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_erase
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_device_attach
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_header
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_table
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_header
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_4_byte_address_mode
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_jedec_id
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write_status
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_open
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_check_buffer_size
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_switch
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_parse_csd
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdio
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_clock
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_voltage
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_parse_csd
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_bus_width
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_parse_ext_csd
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_get_ext_csd
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_partition
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_blksize
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_touch_register
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_waitack
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_bytes
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack_or_nack
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_send_address
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_register
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_register_card
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cccr
<LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_init
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_init
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_stdio_write
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_stdio_read
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hello
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_dev_fwrite
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_dev_fread
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_dev_fopen
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_dev_write
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_dev_read
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_dev_control
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_show_part_table
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_scan()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_help()
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c(int, char**)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_pwd
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkfs
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkdir
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_df
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cp
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cd
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cat
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_strndup
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_strdup
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_realloc
<LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_mem_init
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_malloc
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_main
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_underflow
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_overflow
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_send
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_udps
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_if
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_socket
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_init
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_init
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_netmask
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_ipaddr
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_gw
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns_server
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ping
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_netstat
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ifconfig
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dns
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_if
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_if
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_dns
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_netstat
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wget
<LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
<LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_session_create
<LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
<LI><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_add
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read_line
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_test
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_sample
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_elmfat_sample
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_seek
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rename
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_remove
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_free
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_dir_open
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;littlevgl2rtt_init
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_sample
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_entry
</UL>

<P><STRONG><a name="[1b0]"></a>rt_lvgl_demo_init</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, littlevgl2rtt_demo.o(i.rt_lvgl_demo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = rt_lvgl_demo_init &rArr; littlevgl2rtt_init &rArr; lv_init &rArr; lv_theme_material_init &rArr; lv_obj_report_style_mod &rArr; report_style_mod_core &rArr;  report_style_mod_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;littlevgl2rtt_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> littlevgl2rtt_demo.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[a7]"></a>rt_malloc</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, memheap.o(i.rt_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_blk_device_create
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_alloc_host
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_host_create
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_device_attach
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_switch
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_get_ext_csd
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_register_card
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_poll_add
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_sandbox_create
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_send
<LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;littlevgl2rtt_init
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_sample
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cjson_port.o(i.cJSON_hook_init)
</UL>
<P><STRONG><a name="[95a]"></a>rt_mb_create</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ipc.o(i.rt_mb_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>

<P><STRONG><a name="[95d]"></a>rt_mb_delete</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ipc.o(i.rt_mb_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_mb_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[5de]"></a>rt_mb_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ipc.o(i.rt_mb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_mb_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_core_init
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init_private
</UL>

<P><STRONG><a name="[5db]"></a>rt_mb_recv</STRONG> (Thumb, 430 bytes, Stack size 48 bytes, ipc.o(i.rt_mb_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_mb_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_tx_thread_entry
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
</UL>

<P><STRONG><a name="[5d6]"></a>rt_mb_send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ipc.o(i.rt_mb_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_change
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_ready
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_linkoutput
</UL>

<P><STRONG><a name="[95e]"></a>rt_mb_send_wait</STRONG> (Thumb, 414 bytes, Stack size 48 bytes, ipc.o(i.rt_mb_send_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_mb_send_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>

<P><STRONG><a name="[47c]"></a>rt_memcmp</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, kservice.o(i.rt_memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_netdev_internet_up_work
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_auto_change_default
</UL>

<P><STRONG><a name="[3e9]"></a>rt_memcpy</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, kservice.o(i.rt_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_gt917s_init
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_host_create
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rthw_sdio_request
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_control
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_all_get_cid
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_control
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_sandbox_strdup
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_sandbox_realloc
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_push
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_pop
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_insert
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_add
</UL>

<P><STRONG><a name="[959]"></a>rt_memheap_alloc</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, memheap.o(i.rt_memheap_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
</UL>

<P><STRONG><a name="[939]"></a>rt_memheap_free</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, memheap.o(i.rt_memheap_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
</UL>

<P><STRONG><a name="[94d]"></a>rt_memheap_init</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, memheap.o(i.rt_memheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_memheap_init &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sram_init
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
</UL>

<P><STRONG><a name="[95f]"></a>rt_memheap_realloc</STRONG> (Thumb, 554 bytes, Stack size 48 bytes, memheap.o(i.rt_memheap_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
</UL>

<P><STRONG><a name="[62f]"></a>rt_memmove</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, kservice.o(i.rt_memmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[3d4]"></a>rt_memset</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, kservice.o(i.rt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_alloc_host
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_host_create
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rthw_sdio_request
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tc_flush
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_cmd
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_scr
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_card_addr
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_app_set_bus_width
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_switch
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_send_op_cond
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_op_cond
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmcsd_select_card
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_use_crc
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_read_ocr
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_go_idle
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_all_get_cid
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_op_cond
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_card_addr
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_get_ext_csd
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_direct
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cccr
<LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_sandbox_create
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_zalloc
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_hole_make
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_erase
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_text_buffer
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_line
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_netdev_internet_up_work
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_next_chunk
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_test
</UL>

<P><STRONG><a name="[6e7]"></a>rt_mmcsd_blk_probe</STRONG> (Thumb, 474 bytes, Stack size 48 bytes, block_dev.o(i.rt_mmcsd_blk_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = rt_mmcsd_blk_probe &rArr; rt_mmcsd_req_blk &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_partition
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_blksize
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
</UL>

<P><STRONG><a name="[6e9]"></a>rt_mmcsd_blk_remove</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, block_dev.o(i.rt_mmcsd_blk_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = rt_mmcsd_blk_remove &rArr; dfs_unmount &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_mounted_path
</UL>
<BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
</UL>

<P><STRONG><a name="[1a0]"></a>rt_mmcsd_core_init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, mmcsd_core.o(i.rt_mmcsd_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = rt_mmcsd_core_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sdio_init
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmcsd_core.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[618]"></a>rt_mutex_create</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ipc.o(i.rt_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
</UL>

<P><STRONG><a name="[619]"></a>rt_mutex_delete</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ipc.o(i.rt_mutex_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_mutex_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
</UL>

<P><STRONG><a name="[964]"></a>rt_mutex_detach</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ipc.o(i.rt_mutex_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_mutex_detach &rArr; rt_ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_delete
</UL>

<P><STRONG><a name="[524]"></a>rt_mutex_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ipc.o(i.rt_mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_mutex_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_attach
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_alloc_host
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_host_create
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_bus_device_register
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_init
</UL>

<P><STRONG><a name="[52b]"></a>rt_mutex_release</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, ipc.o(i.rt_mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rthw_sdio_request
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rthw_sdio_iocfg
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_tx
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_rx
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_unlock
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_send
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_unlock
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_unlock
</UL>

<P><STRONG><a name="[526]"></a>rt_mutex_take</STRONG> (Thumb, 390 bytes, Stack size 32 bytes, ipc.o(i.rt_mutex_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rthw_sdio_request
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rthw_sdio_iocfg
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_tx
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_rx
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lock
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_send
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_lock
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_lock
</UL>

<P><STRONG><a name="[95b]"></a>rt_object_allocate</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, object.o(i.rt_object_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
</UL>

<P><STRONG><a name="[95c]"></a>rt_object_delete</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, object.o(i.rt_object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[934]"></a>rt_object_detach</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, object.o(i.rt_object_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
</UL>

<P><STRONG><a name="[92f]"></a>rt_object_find</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, object.o(i.rt_object_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
</UL>

<P><STRONG><a name="[502]"></a>rt_object_get_information</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, object.o(i.rt_object_get_information))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>

<P><STRONG><a name="[92e]"></a>rt_object_get_type</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, object.o(i.rt_object_get_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
</UL>

<P><STRONG><a name="[931]"></a>rt_object_init</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, object.o(i.rt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_init
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
</UL>

<P><STRONG><a name="[933]"></a>rt_object_is_systemobject</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, object.o(i.rt_object_is_systemobject))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
</UL>

<P><STRONG><a name="[5ba]"></a>rt_pin_attach_irq</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, pin.o(i.rt_pin_attach_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_pin_attach_irq &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_init
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_touch_irq_init
</UL>

<P><STRONG><a name="[1b7]"></a>rt_pin_get</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, pin.o(i.rt_pin_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_pin_get &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(FSymTab)
</UL>
<P><STRONG><a name="[5bb]"></a>rt_pin_irq_enable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, pin.o(i.rt_pin_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_pin_irq_enable &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_init
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_touch_irq_init
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_touch_irq_enable
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_touch_irq_disable
</UL>

<P><STRONG><a name="[1b4]"></a>rt_pin_mode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pin.o(i.rt_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_pin_mode &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_gt917s_init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_init
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_i2c_gpio_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lcd_init
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_touch_irq_init
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::sdaSet(unsigned char)
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::sendByteAck(unsigned char)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::begin(int, int)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::read()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(FSymTab)
</UL>
<P><STRONG><a name="[1b6]"></a>rt_pin_read</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pin.o(i.rt_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_pin_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_i2c_bus_unlock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_get_sda
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_get_scl
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::sendByteAck(unsigned char)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::read()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(FSymTab)
</UL>
<P><STRONG><a name="[1b5]"></a>rt_pin_write</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pin.o(i.rt_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_gt917s_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_set_sda
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_set_scl
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_i2c_gpio_init
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_i2c_bus_unlock
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lcd_init
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::sdaSet(unsigned char)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::sclSet(unsigned char)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::begin(int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(FSymTab)
</UL>
<P><STRONG><a name="[614]"></a>rt_realloc</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, memheap.o(i.rt_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_alloc
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_alloc
</UL>

<P><STRONG><a name="[405]"></a>rt_schedule</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, scheduler.o(i.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_highest_priority_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
</UL>

<P><STRONG><a name="[968]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_insert_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_schedule_insert_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[969]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_remove_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_schedule_remove_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
</UL>

<P><STRONG><a name="[963]"></a>rt_sdio_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sdio.o(i.rt_sdio_init))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_core_init
</UL>

<P><STRONG><a name="[67e]"></a>rt_sem_create</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_sample
</UL>

<P><STRONG><a name="[962]"></a>rt_sem_delete</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ipc.o(i.rt_sem_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_remove
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
</UL>

<P><STRONG><a name="[871]"></a>rt_sem_detach</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ipc.o(i.rt_sem_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_sem_detach &rArr; rt_ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
</UL>

<P><STRONG><a name="[5d1]"></a>rt_sem_init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_alloc_host
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_init
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>

<P><STRONG><a name="[409]"></a>rt_sem_release</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ipc.o(i.rt_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_wakeup
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_req_complete
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_write
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_read
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_tx_thread_entry
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_callback
</UL>

<P><STRONG><a name="[5f4]"></a>rt_sem_take</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, ipc.o(i.rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_trytake
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_write
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_read
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_linkoutput
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_entry
</UL>

<P><STRONG><a name="[408]"></a>rt_sem_trytake</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ipc.o(i.rt_sem_trytake))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = rt_sem_trytake &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
</UL>

<P><STRONG><a name="[3e7]"></a>rt_set_errno</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, kservice.o(i.rt_set_errno))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statfs
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_write
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_read
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_write
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_read
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcntl
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
</UL>

<P><STRONG><a name="[96f]"></a>rt_sfud_flash_delete</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, spi_flash_sfud.o(i.rt_sfud_flash_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_sfud_flash_delete &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
</UL>

<P><STRONG><a name="[6e0]"></a>rt_sfud_flash_find_by_dev_name</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, spi_flash_sfud.o(i.rt_sfud_flash_find_by_dev_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_sfud_flash_find_by_dev_name &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[94b]"></a>rt_sfud_flash_probe</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, spi_flash_sfud.o(i.rt_sfud_flash_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = rt_sfud_flash_probe &rArr; rt_sfud_flash_probe_ex &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_flash_init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
</UL>

<P><STRONG><a name="[970]"></a>rt_sfud_flash_probe_ex</STRONG> (Thumb, 468 bytes, Stack size 40 bytes, spi_flash_sfud.o(i.rt_sfud_flash_probe_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_sfud_flash_probe_ex &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe
</UL>

<P><STRONG><a name="[973]"></a>rt_show_version</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, kservice.o(i.rt_show_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version
</UL>

<P><STRONG><a name="[47b]"></a>rt_snprintf</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, kservice.o(i.rt_snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = rt_snprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_netdev_internet_up_work
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
</UL>

<P><STRONG><a name="[94a]"></a>rt_spi_bus_attach_device</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, spi_core.o(i.rt_spi_bus_attach_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = rt_spi_bus_attach_device &rArr; rt_spidev_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spidev_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_device_attach
</UL>

<P><STRONG><a name="[975]"></a>rt_spi_bus_device_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spi_dev.o(i.rt_spi_bus_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
</UL>

<P><STRONG><a name="[948]"></a>rt_spi_bus_register</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_core.o(i.rt_spi_bus_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_bus_init
</UL>

<P><STRONG><a name="[5b2]"></a>rt_spi_configure</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, spi_core.o(i.rt_spi_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_spi_configure &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_attach
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
</UL>

<P><STRONG><a name="[5c6]"></a>rt_spi_send_then_recv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, spi_core.o(i.rt_spi_send_then_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_op
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_rx
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
</UL>

<P><STRONG><a name="[5c8]"></a>rt_spi_send_then_send</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, spi_core.o(i.rt_spi_send_then_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_spi_send_then_send &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_tx
</UL>

<P><STRONG><a name="[3f3]"></a>rt_spi_transfer</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, spi_core.o(i.rt_spi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_op
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_write
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_read
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_write
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_read
</UL>

<P><STRONG><a name="[974]"></a>rt_spidev_device_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spi_dev.o(i.rt_spidev_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_spidev_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
</UL>

<P><STRONG><a name="[540]"></a>rt_sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, kservice.o(i.rt_sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rename
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_remove
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_dir_open
</UL>

<P><STRONG><a name="[53f]"></a>rt_strcmp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, kservice.o(i.rt_strcmp))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_next_chunk
</UL>

<P><STRONG><a name="[51e]"></a>rt_strdup</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, kservice.o(i.rt_strdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
</UL>

<P><STRONG><a name="[a78]"></a>strdup</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, kservice.o(i.rt_strdup), UNUSED)

<P><STRONG><a name="[489]"></a>rt_strlen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, kservice.o(i.rt_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_get
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_sandbox_strdup
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_get
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
</UL>

<P><STRONG><a name="[8da]"></a>rt_strncmp</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, kservice.o(i.rt_strncmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
</UL>

<P><STRONG><a name="[500]"></a>rt_strncpy</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, kservice.o(i.rt_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_sandbox_strndup
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_getdents
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_add
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
</UL>

<P><STRONG><a name="[977]"></a>rt_strstr</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, kservice.o(i.rt_strstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_strstr &rArr; rt_memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_get
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
</UL>

<P><STRONG><a name="[93c]"></a>rt_system_heap_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, memheap.o(i.rt_system_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_system_heap_init &rArr; rt_memheap_init &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_init
</UL>
<BR>[Called By]<UL><LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[978]"></a>rt_system_scheduler_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, scheduler.o(i.rt_system_scheduler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_scheduler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[97a]"></a>rt_system_scheduler_start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, scheduler.o(i.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_system_scheduler_start &rArr; rt_schedule_remove_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_highest_priority_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[97c]"></a>rt_system_timer_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(i.rt_system_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[996]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(i.rt_system_timer_thread_init))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[965]"></a>rt_thread_control</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, thread.o(i.rt_thread_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>

<P><STRONG><a name="[62c]"></a>rt_thread_create</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, thread.o(i.rt_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_task_handler_init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_lvgl_demo_init
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_sample
</UL>

<P><STRONG><a name="[31d]"></a>rt_thread_delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, thread.o(i.rt_thread_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elmfat_mount
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_attach
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_delay_100us
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_send_op_cond
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_op_cond
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_delay_ms
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_delay_ms
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
</UL>

<P><STRONG><a name="[97e]"></a>rt_thread_delete</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, thread.o(i.rt_thread_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_thread_delete &rArr; rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[97d]"></a>rt_thread_detach</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, thread.o(i.rt_thread_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_thread_detach &rArr; rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[a4]"></a>rt_thread_exit</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, thread.o(i.rt_thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rt_thread_exit &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[5d2]"></a>rt_thread_find</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, thread.o(i.rt_thread_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_thread_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>
<BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>

<P><STRONG><a name="[981]"></a>rt_thread_idle_excute</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, idle.o(i.rt_thread_idle_excute))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[982]"></a>rt_thread_idle_init</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, idle.o(i.rt_thread_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[5df]"></a>rt_thread_init</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, thread.o(i.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_core_init
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init_private
</UL>

<P><STRONG><a name="[5a4]"></a>rt_thread_mdelay</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, thread.o(i.rt_thread_mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_gt917s_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_lcd_init
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_task_run
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_monitor
</UL>

<P><STRONG><a name="[404]"></a>rt_thread_resume</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, thread.o(i.rt_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>

<P><STRONG><a name="[3dc]"></a>rt_thread_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(i.rt_thread_self))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_table_init
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>

<P><STRONG><a name="[97f]"></a>rt_thread_sleep</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, thread.o(i.rt_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>

<P><STRONG><a name="[5e0]"></a>rt_thread_startup</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, thread.o(i.rt_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_core_init
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_system_device_init_private
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_task_handler_init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_lvgl_demo_init
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_sample
</UL>

<P><STRONG><a name="[406]"></a>rt_thread_suspend</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, thread.o(i.rt_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
</UL>

<P><STRONG><a name="[a5]"></a>rt_thread_timeout</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, thread.o(i.rt_thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rt_thread_timeout &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[90d]"></a>rt_tick_from_millisecond</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, clock.o(i.rt_tick_from_millisecond))
<BR><BR>[Called By]<UL><LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rthw_sdio_wait_completed
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
</UL>

<P><STRONG><a name="[31c]"></a>rt_tick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(i.rt_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sram_test
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get_millisecond
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_touch_up
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_touch_down
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareI2C::micros()
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netdev_ping
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_ping
</UL>

<P><STRONG><a name="[2c1]"></a>rt_tick_get_millisecond</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, clock.o(i.rt_tick_get_millisecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_tick_get_millisecond
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</UL>

<P><STRONG><a name="[329]"></a>rt_tick_increase</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, clock.o(i.rt_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rt_tick_increase &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[984]"></a>rt_timer_check</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, timer.o(i.rt_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[90e]"></a>rt_timer_control</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, timer.o(i.rt_timer_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_timer_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
</UL>

<P><STRONG><a name="[82b]"></a>rt_timer_create</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, timer.o(i.rt_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = rt_timer_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_tick_handler_init
</UL>

<P><STRONG><a name="[347]"></a>rt_timer_detach</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, timer.o(i.rt_timer_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_cancel_delayed_work
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delayed_work_timeout_handler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
</UL>

<P><STRONG><a name="[3e0]"></a>rt_timer_init</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, timer.o(i.rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_delayed_work
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[402]"></a>rt_timer_start</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, timer.o(i.rt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_delayed_work
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_tick_handler_init
</UL>

<P><STRONG><a name="[346]"></a>rt_timer_stop</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, timer.o(i.rt_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_cancel_delayed_work
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delayed_work_timeout_handler
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[957]"></a>rt_vsnprintf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, kservice.o(i.rt_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
<LI><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_add
</UL>

<P><STRONG><a name="[976]"></a>rt_vsprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, kservice.o(i.rt_vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
</UL>

<P><STRONG><a name="[98c]"></a>rt_work_submit</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, workqueue.o(i.rt_work_submit))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = rt_work_submit &rArr; rt_workqueue_submit_work &rArr; _workqueue_submit_delayed_work &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_submit_work
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_check_netdev_internet_up
</UL>

<P><STRONG><a name="[19f]"></a>rt_work_sys_workqueue_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, workqueue.o(i.rt_work_sys_workqueue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = rt_work_sys_workqueue_init &rArr; rt_workqueue_create &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> workqueue.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[98e]"></a>rt_workqueue_create</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, workqueue.o(i.rt_workqueue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = rt_workqueue_create &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_sys_workqueue_init
</UL>

<P><STRONG><a name="[98d]"></a>rt_workqueue_submit_work</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, workqueue.o(i.rt_workqueue_submit_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = rt_workqueue_submit_work &rArr; _workqueue_submit_delayed_work &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_delayed_work
</UL>
<BR>[Called By]<UL><LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_submit
</UL>

<P><STRONG><a name="[3d9]"></a>rt_wqueue_add</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, waitqueue.o(i.rt_wqueue_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_wqueue_add
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_poll_add
</UL>

<P><STRONG><a name="[90c]"></a>rt_wqueue_remove</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, waitqueue.o(i.rt_wqueue_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_wqueue_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_teardown
</UL>

<P><STRONG><a name="[98f]"></a>rt_wqueue_wait</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, waitqueue.o(i.rt_wqueue_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_wqueue_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_add
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_read
</UL>

<P><STRONG><a name="[990]"></a>rt_wqueue_wakeup</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, waitqueue.o(i.rt_wqueue_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rt_wqueue_wakeup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fops_rx_ind
</UL>

<P><STRONG><a name="[31f]"></a>rthw_sdio_irq_process</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, drv_sdio.o(i.rthw_sdio_irq_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rthw_sdio_irq_process &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_wakeup
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[165]"></a>rthw_sdio_irq_update</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drv_sdio.o(i.rthw_sdio_irq_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rthw_sdio_irq_update
</UL>
<BR>[Called By]<UL><LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_host_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sdio.o(.constdata)
</UL>
<P><STRONG><a name="[29f]"></a>rtthread_startup</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, components.o(i.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = rtthread_startup &rArr; rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8bf]"></a>safe_poll</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, vi_utils.o(i.safe_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = safe_poll &rArr; poll &rArr; poll_do &rArr; do_pollfd &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysleep
</UL>

<P><STRONG><a name="[63f]"></a>safe_read</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, vi_utils.o(i.safe_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = safe_read &rArr; read &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_read
</UL>

<P><STRONG><a name="[640]"></a>safe_write</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, vi_utils.o(i.safe_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = safe_write &rArr; write &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_write
</UL>

<P><STRONG><a name="[8e0]"></a>sal_check_netdev_internet_up</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, sal_socket.o(i.sal_check_netdev_internet_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = sal_check_netdev_internet_up &rArr; rt_work_submit &rArr; rt_workqueue_submit_work &rArr; _workqueue_submit_delayed_work &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_work_submit
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_delayed_work_init
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_netmask
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_link_status
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_ipaddr
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_gw
</UL>

<P><STRONG><a name="[487]"></a>sal_closesocket</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sal_socket.o(i.sal_closesocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = sal_closesocket &rArr; socket_delete &rArr; socket_free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_close
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
</UL>

<P><STRONG><a name="[4b2]"></a>sal_connect</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, sal_socket.o(i.sal_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sal_connect &rArr; sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>

<P><STRONG><a name="[63e]"></a>sal_freeaddrinfo</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, sal_socket.o(i.sal_freeaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sal_freeaddrinfo &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeaddrinfo
</UL>

<P><STRONG><a name="[997]"></a>sal_get_socket</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sal_socket.o(i.sal_get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_socket
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_setsockopt
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_sendto
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_recvfrom
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_poll
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_ioctlsocket
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_connect
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_closesocket
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
</UL>

<P><STRONG><a name="[66f]"></a>sal_getaddrinfo</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, sal_socket.o(i.sal_getaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sal_getaddrinfo &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_first_by_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getaddrinfo
</UL>

<P><STRONG><a name="[1ab]"></a>sal_init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, sal_socket.o(i.sal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = sal_init &rArr; rt_calloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sal_socket.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[527]"></a>sal_ioctlsocket</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sal_socket.o(i.sal_ioctlsocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sal_ioctlsocket &rArr; sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_ioctl
</UL>

<P><STRONG><a name="[528]"></a>sal_poll</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, sal_socket.o(i.sal_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sal_poll &rArr; sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_poll
</UL>

<P><STRONG><a name="[529]"></a>sal_recvfrom</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, sal_socket.o(i.sal_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sal_recvfrom &rArr; sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_read
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>

<P><STRONG><a name="[52a]"></a>sal_sendto</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, sal_socket.o(i.sal_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sal_sendto &rArr; sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_write
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[99a]"></a>sal_setsockopt</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, sal_socket.o(i.sal_setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sal_setsockopt &rArr; sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
</UL>

<P><STRONG><a name="[99b]"></a>sal_socket</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, sal_socket.o(i.sal_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = sal_socket &rArr; socket_new &rArr; socket_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_new
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_init
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</UL>

<P><STRONG><a name="[99f]"></a>sdio_free_cis</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, sdio.o(i.sdio_free_cis))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = sdio_free_cis &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[945]"></a>sdio_host_create</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, drv_sdio.o(i.sdio_host_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = sdio_host_create &rArr; mmcsd_alloc_host &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_change
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_alloc_host
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rthw_sdio_irq_update
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sdio_init
</UL>

<P><STRONG><a name="[9a7]"></a>sdio_io_readb</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, sdio.o(i.sdio_io_readb))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = sdio_io_readb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_highspeed
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_bus_wide
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_fbr
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cccr
</UL>

<P><STRONG><a name="[9a8]"></a>sdio_io_rw_direct</STRONG> (Thumb, 262 bytes, Stack size 80 bytes, sdio.o(i.sdio_io_rw_direct))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_writeb
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_readb
</UL>

<P><STRONG><a name="[89f]"></a>sdio_io_send_op_cond</STRONG> (Thumb, 172 bytes, Stack size 72 bytes, sdio.o(i.sdio_io_send_op_cond))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = sdio_io_send_op_cond &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[9a9]"></a>sdio_io_writeb</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, sdio.o(i.sdio_io_writeb))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = sdio_io_writeb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_highspeed
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_bus_wide
</UL>

<P><STRONG><a name="[991]"></a>sdio_irq_wakeup</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sdio.o(i.sdio_irq_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = sdio_irq_wakeup &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rthw_sdio_irq_process
</UL>

<P><STRONG><a name="[9af]"></a>send</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, net_sockets.o(i.send))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = send &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send
</UL>

<P><STRONG><a name="[1e3]"></a>set_dns</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ethernetif.o(i.set_dns))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = set_dns &rArr; ip4addr_aton &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(FSymTab)
</UL>
<P><STRONG><a name="[1e2]"></a>set_if</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, ethernetif.o(i.set_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 764<LI>Call Chain = set_if &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(FSymTab)
</UL>
<P><STRONG><a name="[913]"></a>set_termios_to_raw</STRONG> (Thumb, 36 bytes, Stack size 80 bytes, vi_utils.o(i.set_termios_to_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = set_termios_to_raw &rArr; get_termios_and_make_raw &rArr; tcgetattr &rArr; ioctl &rArr; fcntl &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcsetattr
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_termios_and_make_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawmode
</UL>

<P><STRONG><a name="[9b3]"></a>setsockopt</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, net_sockets.o(i.setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = setsockopt &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_getsocket
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_setsockopt
</UL>
<BR>[Called By]<UL><LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
</UL>

<P><STRONG><a name="[9b5]"></a>sfud_chip_erase</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, sfud.o(i.sfud_chip_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = sfud_chip_erase &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>

<P><STRONG><a name="[971]"></a>sfud_device_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, sfud.o(i.sfud_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = sfud_device_init &rArr; hardware_init &rArr; sfud_read_sfdp &rArr; read_basic_table &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;software_init
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>
<BR>[Called By]<UL><LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
</UL>

<P><STRONG><a name="[5ca]"></a>sfud_erase</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, sfud.o(i.sfud_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = sfud_erase &rArr; sfud_chip_erase &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_sfdp_get_suitable_eraser
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_adress_byte_array
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase_write
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_control
</UL>

<P><STRONG><a name="[972]"></a>sfud_erase_write</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, sfud.o(i.sfud_erase_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = sfud_erase_write &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_write
</UL>

<P><STRONG><a name="[914]"></a>sfud_read</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, sfud.o(i.sfud_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = sfud_read &rArr; wait_busy &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_adress_byte_array
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_read
</UL>

<P><STRONG><a name="[686]"></a>sfud_read_sfdp</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sfud_sfdp.o(i.sfud_read_sfdp))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = sfud_read_sfdp &rArr; read_basic_table &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_header
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_table
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_header
</UL>
<BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[9b1]"></a>sfud_read_status</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, sfud.o(i.sfud_read_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sfud_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
</UL>

<P><STRONG><a name="[9b7]"></a>sfud_sfdp_get_suitable_eraser</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, sfud_sfdp.o(i.sfud_sfdp_get_suitable_eraser))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sfud_sfdp_get_suitable_eraser
</UL>
<BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>

<P><STRONG><a name="[684]"></a>sfud_spi_port_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, spi_flash_sfud.o(i.sfud_spi_port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sfud_spi_port_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[9b4]"></a>sfud_write</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, sfud.o(i.sfud_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase_write
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
</UL>

<P><STRONG><a name="[688]"></a>sfud_write_status</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, sfud.o(i.sfud_write_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = sfud_write_status &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
</UL>

<P><STRONG><a name="[4a4]"></a>skip_non_whitespace</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, vi_utils.o(i.skip_non_whitespace))
<BR><BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
</UL>

<P><STRONG><a name="[4a6]"></a>skip_whitespace</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, vi_utils.o(i.skip_whitespace))
<BR><BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
</UL>

<P><STRONG><a name="[9bc]"></a>socket</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, net_sockets.o(i.socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = socket &rArr; sal_socket &rArr; socket_new &rArr; socket_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_net_get_fops
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
</UL>

<P><STRONG><a name="[411]"></a>stat</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dfs_posix.o(i.stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = stat &rArr; dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
</UL>

<P><STRONG><a name="[5ae]"></a>statfs</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dfs_posix.o(i.statfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = statfs &rArr; dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elmfat_mount
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_elmfat_sample
</UL>

<P><STRONG><a name="[60b]"></a>stm32_flash_erase</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, drv_flash_f4.o(i.stm32_flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = stm32_flash_erase &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSector
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_erase_64k
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_erase_16k
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_erase_128k
</UL>

<P><STRONG><a name="[60d]"></a>stm32_flash_read</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, drv_flash_f4.o(i.stm32_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = stm32_flash_read &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_read_64k
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_read_16k
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_read_128k
</UL>

<P><STRONG><a name="[60e]"></a>stm32_flash_write</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, drv_flash_f4.o(i.stm32_flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = stm32_flash_write &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_write_64k
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_write_16k
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_write_128k
</UL>

<P><STRONG><a name="[664]"></a>strchrnul</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, vi_utils.o(i.strchrnul))
<BR><BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_one_address
</UL>

<P><STRONG><a name="[54b]"></a>sys_arch_assert</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sys_arch.o(i.sys_arch_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_underflow
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_overflow
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_send
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_rx_thread_entry
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>

<P><STRONG><a name="[8ce]"></a>sys_arch_mbox_fetch</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, sys_arch.o(i.sys_arch_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = sys_arch_mbox_fetch &rArr; rt_mb_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[8c9]"></a>sys_arch_mbox_tryfetch</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sys_arch.o(i.sys_arch_mbox_tryfetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = sys_arch_mbox_tryfetch &rArr; rt_mb_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
</UL>

<P><STRONG><a name="[841]"></a>sys_arch_sem_wait</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, sys_arch.o(i.sys_arch_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = sys_arch_sem_wait &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
</UL>

<P><STRONG><a name="[835]"></a>sys_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_arch.o(i.sys_init))
<BR><BR>[Called By]<UL><LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[8c3]"></a>sys_mbox_free</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sys_arch.o(i.sys_mbox_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = sys_mbox_free &rArr; rt_mb_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[8c1]"></a>sys_mbox_new</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, sys_arch.o(i.sys_mbox_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = sys_mbox_new &rArr; rt_mb_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
</UL>
<BR>[Called By]<UL><LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[9c8]"></a>sys_mbox_post</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sys_arch.o(i.sys_mbox_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = sys_mbox_post &rArr; rt_mb_send_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[8c4]"></a>sys_mbox_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_mbox_set_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>

<P><STRONG><a name="[5cc]"></a>sys_mbox_trypost</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sys_arch.o(i.sys_mbox_trypost))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
</UL>

<P><STRONG><a name="[5cb]"></a>sys_mbox_valid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_mbox_valid))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
</UL>

<P><STRONG><a name="[842]"></a>sys_mutex_lock</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sys_arch.o(i.sys_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
</UL>

<P><STRONG><a name="[9c9]"></a>sys_mutex_new</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, sys_arch.o(i.sys_mutex_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = sys_mutex_new &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[840]"></a>sys_mutex_unlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.sys_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = sys_mutex_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init_done_callback
</UL>

<P><STRONG><a name="[84b]"></a>sys_now</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sys_arch.o(i.sys_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sys_now &rArr; rt_tick_get_millisecond
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get_millisecond
</UL>
<BR>[Called By]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_sleeptime
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
</UL>

<P><STRONG><a name="[8ca]"></a>sys_sem_free</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sys_arch.o(i.sys_sem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = sys_sem_free &rArr; rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
</UL>

<P><STRONG><a name="[8c2]"></a>sys_sem_new</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, sys_arch.o(i.sys_sem_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = sys_sem_new &rArr; rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
</UL>

<P><STRONG><a name="[8cb]"></a>sys_sem_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_sem_set_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>

<P><STRONG><a name="[5ce]"></a>sys_sem_signal</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_arch.o(i.sys_sem_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = sys_sem_signal &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_dns_found
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
</UL>

<P><STRONG><a name="[5cd]"></a>sys_sem_valid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_arch.o(i.sys_sem_valid))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[9ca]"></a>sys_thread_new</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, sys_arch.o(i.sys_thread_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = sys_thread_new &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[4cb]"></a>sys_timeout</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, timeouts.o(i.sys_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = sys_timeout &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
</UL>
<BR>[Called By]<UL><LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclic_timer
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</UL>

<P><STRONG><a name="[83d]"></a>sys_timeouts_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timeouts.o(i.sys_timeouts_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = sys_timeouts_init &rArr; sys_timeout &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[9cb]"></a>sys_timeouts_mbox_fetch</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, timeouts.o(i.sys_timeouts_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = sys_timeouts_mbox_fetch &rArr; sys_check_timeouts &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_sleeptime
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[66d]"></a>tcgetattr</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, posix_termios.o(i.tcgetattr))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = tcgetattr &rArr; ioctl &rArr; fcntl &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isatty
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_termios_and_make_raw
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBufferedInput
</UL>

<P><STRONG><a name="[9cf]"></a>tcp_abandon</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, tcp.o(i.tcp_abandon))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
</UL>

<P><STRONG><a name="[84c]"></a>tcp_abort</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tcp.o(i.tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
</UL>

<P><STRONG><a name="[844]"></a>tcp_accept</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tcp.o(i.tcp_accept))
<BR><BR>[Called By]<UL><LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[9d2]"></a>tcp_alloc</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, tcp.o(i.tcp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_ip_type
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[843]"></a>tcp_arg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_arg))
<BR><BR>[Called By]<UL><LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[849]"></a>tcp_close</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcp.o(i.tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[71b]"></a>tcp_debug_state_str</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tcp.o(i.tcp_debug_state_str))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_tcps
</UL>

<P><STRONG><a name="[9df]"></a>tcp_eff_send_mss_impl</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tcp.o(i.tcp_eff_send_mss_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_eff_send_mss_impl &rArr; ip4_route
</UL>
<BR>[Calls]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[9e0]"></a>tcp_enqueue_flags</STRONG> (Thumb, 404 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_enqueue_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
</UL>
<BR>[Called By]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>

<P><STRONG><a name="[848]"></a>tcp_err</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tcp.o(i.tcp_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = tcp_err &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[9e2]"></a>tcp_fasttmr</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, tcp.o(i.tcp_fasttmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[83a]"></a>tcp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tcp.o(i.tcp_init))
<BR><BR>[Called By]<UL><LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[6f8]"></a>tcp_input</STRONG> (Thumb, 1924 bytes, Stack size 48 bytes, tcp_in.o(i.tcp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 780<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[9e8]"></a>tcp_keepalive</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = tcp_keepalive &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[8eb]"></a>tcp_netif_ip_addr_changed</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tcp.o(i.tcp_netif_ip_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
</UL>
<BR>[Called By]<UL><LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[905]"></a>tcp_new_ip_type</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tcp.o(i.tcp_new_ip_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[9eb]"></a>tcp_next_iss</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tcp.o(i.tcp_next_iss))
<BR><BR>[Called By]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[855]"></a>tcp_output</STRONG> (Thumb, 642 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>

<P><STRONG><a name="[9d7]"></a>tcp_pcb_purge</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tcp.o(i.tcp_pcb_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[9d0]"></a>tcp_pcb_remove</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[847]"></a>tcp_poll</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tcp.o(i.tcp_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = tcp_poll &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[9e3]"></a>tcp_process_refused_data</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, tcp.o(i.tcp_process_refused_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[845]"></a>tcp_recv</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tcp.o(i.tcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = tcp_recv &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[140]"></a>tcp_recv_null</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tcp.o(i.tcp_recv_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_alloc)
</UL>
<P><STRONG><a name="[84f]"></a>tcp_recved</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, tcp.o(i.tcp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[9f4]"></a>tcp_rexmit</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_rexmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[9f5]"></a>tcp_rexmit_fast</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_rexmit_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[9f2]"></a>tcp_rexmit_rto</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_rexmit_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[9d1]"></a>tcp_rst</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = tcp_rst &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[9f7]"></a>tcp_seg_copy</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tcp.o(i.tcp_seg_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = tcp_seg_copy &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[9de]"></a>tcp_seg_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcp.o(i.tcp_seg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>

<P><STRONG><a name="[8fe]"></a>tcp_segs_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tcp.o(i.tcp_segs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
</UL>

<P><STRONG><a name="[9e6]"></a>tcp_send_empty_ack</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_send_empty_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[9dc]"></a>tcp_send_fin</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_send_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>

<P><STRONG><a name="[846]"></a>tcp_sent</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tcp.o(i.tcp_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = tcp_sent &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[84a]"></a>tcp_shutdown</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tcp.o(i.tcp_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[9f8]"></a>tcp_slowtmr</STRONG> (Thumb, 1404 bytes, Stack size 56 bytes, tcp.o(i.tcp_slowtmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[9d8]"></a>tcp_timer_needed</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timeouts.o(i.tcp_timer_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = tcp_timer_needed &rArr; sys_timeout &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[188]"></a>tcp_tmr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tcp.o(i.tcp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[9d9]"></a>tcp_trigger_input_pcb_close</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tcp_in.o(i.tcp_trigger_input_pcb_close))
<BR><BR>[Called By]<UL><LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[9f6]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tcp.o(i.tcp_update_rcv_ann_wnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = tcp_update_rcv_ann_wnd &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[854]"></a>tcp_write</STRONG> (Thumb, 1850 bytes, Stack size 120 bytes, tcp_out.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
</UL>

<P><STRONG><a name="[9f9]"></a>tcp_zero_window_probe</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, tcp_out.o(i.tcp_zero_window_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = tcp_zero_window_probe &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[8ee]"></a>tcpip_api_call</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_api_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = tcpip_api_call &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_set_addr
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_add
</UL>

<P><STRONG><a name="[8cc]"></a>tcpip_callback_with_block</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, tcpip.o(i.tcpip_callback_with_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Called By]<UL><LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
</UL>

<P><STRONG><a name="[870]"></a>tcpip_init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = tcpip_init &rArr; lwip_init &rArr; sys_timeouts_init &rArr; sys_timeout &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_new
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_system_init
</UL>

<P><STRONG><a name="[9fb]"></a>tcpip_inpkt</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tcpip.o(i.tcpip_inpkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = tcpip_inpkt &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
</UL>

<P><STRONG><a name="[ba]"></a>tcpip_input</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = tcpip_input &rArr; tcpip_inpkt &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ethernetif.o(i.eth_device_init_with_flag)
<LI> sys_arch.o(i.tcpip_init_done_callback)
</UL>
<P><STRONG><a name="[8c6]"></a>tcpip_send_msg_wait_sem</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tcpip.o(i.tcpip_send_msg_wait_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>

<P><STRONG><a name="[9b0]"></a>tcsetattr</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, posix_termios.o(i.tcsetattr))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = tcsetattr &rArr; ioctl &rArr; fcntl &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcsetattr_stdin_TCSANOW
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_termios_to_raw
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBufferedInput
</UL>

<P><STRONG><a name="[4b3]"></a>tcsetattr_stdin_TCSANOW</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, vi_utils.o(i.tcsetattr_stdin_TCSANOW))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = tcsetattr_stdin_TCSANOW &rArr; tcsetattr &rArr; ioctl &rArr; fcntl &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcsetattr
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cookmode
</UL>

<P><STRONG><a name="[413]"></a>time</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, time.o(i.time))
<BR><BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addRandom
</UL>

<P><STRONG><a name="[545]"></a>udp_bind</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, udp.o(i.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = udp_bind &rArr; udp_new_port
</UL>
<BR>[Calls]<UL><LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[839]"></a>udp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, udp.o(i.udp_init))
<BR><BR>[Called By]<UL><LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[6f7]"></a>udp_input</STRONG> (Thumb, 370 bytes, Stack size 56 bytes, udp.o(i.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input_local_match
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[8ec]"></a>udp_netif_ip_addr_changed</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, udp.o(i.udp_netif_ip_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_netif_ip_addr_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[a00]"></a>udp_new</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, udp.o(i.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = udp_new &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
</UL>

<P><STRONG><a name="[544]"></a>udp_new_ip_type</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, udp.o(i.udp_new_ip_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = udp_new_ip_type &rArr; udp_new &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
</UL>
<BR>[Called By]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
</UL>

<P><STRONG><a name="[547]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(i.udp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
</UL>

<P><STRONG><a name="[546]"></a>udp_remove</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, udp.o(i.udp_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
</UL>

<P><STRONG><a name="[852]"></a>udp_send</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, udp.o(i.udp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
</UL>

<P><STRONG><a name="[55f]"></a>udp_sendto</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, udp.o(i.udp_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[a01]"></a>udp_sendto_if</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, udp.o(i.udp_sendto_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>

<P><STRONG><a name="[a02]"></a>udp_sendto_if_src</STRONG> (Thumb, 322 bytes, Stack size 56 bytes, udp.o(i.udp_sendto_if_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[48a]"></a>unlink</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dfs_posix.o(i.unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = unlink &rArr; dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
</UL>

<P><STRONG><a name="[1bd]"></a>version</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.version))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = version &rArr; rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[49c]"></a>vi_free</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, vi_utils.o(i.vi_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = vi_free &rArr; mem_sandbox_free &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_sandbox_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_main
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_filename
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_pop
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_yank
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_screen
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_text_buffer
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_filename
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_one_char
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_one_address
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_undo_data
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_args
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_file
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
</UL>

<P><STRONG><a name="[8ef]"></a>vi_malloc</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, vi_utils.o(i.vi_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = vi_malloc &rArr; mem_sandbox_malloc &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_sandbox_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vasprintf
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_zalloc
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_screen
</UL>

<P><STRONG><a name="[a06]"></a>vi_mem_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, vi_utils.o(i.vi_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = vi_mem_init &rArr; mem_sandbox_create &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_sandbox_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_main
</UL>

<P><STRONG><a name="[a09]"></a>vi_mem_release</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, vi_utils.o(i.vi_mem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = vi_mem_release &rArr; mem_sandbox_delete &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_sandbox_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_main
</UL>

<P><STRONG><a name="[9fc]"></a>vi_realloc</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, vi_utils.o(i.vi_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = vi_realloc &rArr; mem_sandbox_realloc &rArr; mem_sandbox_malloc &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_sandbox_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_hole_make
</UL>

<P><STRONG><a name="[572]"></a>vi_strdup</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, vi_utils.o(i.vi_strdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = vi_strdup &rArr; mem_sandbox_strdup &rArr; mem_sandbox_malloc &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_sandbox_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vasprintf
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_filename
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_filename
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_args
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
</UL>

<P><STRONG><a name="[665]"></a>vi_strndup</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, vi_utils.o(i.vi_strndup))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = vi_strndup &rArr; mem_sandbox_strndup &rArr; mem_sandbox_malloc &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_sandbox_strndup
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_main
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_yank
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_one_address
</UL>

<P><STRONG><a name="[6ef]"></a>vi_zalloc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, vi_utils.o(i.vi_zalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = vi_zalloc &rArr; vi_malloc &rArr; mem_sandbox_malloc &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_main
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_push
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_text_buffer
</UL>

<P><STRONG><a name="[a0a]"></a>vt_clear</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, vt100.o(i.vt_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = vt_clear &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_sl
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_monitor
</UL>

<P><STRONG><a name="[a0b]"></a>vt_clear_attr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, vt100.o(i.vt_clear_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = vt_clear_attr &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_sl
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_monitor
</UL>

<P><STRONG><a name="[a0c]"></a>vt_draw_box</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, vt100.o(i.vt_draw_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = vt_draw_box &rArr; vt_draw_vline &rArr; vt_draw_char_at &rArr; vt_move_to &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_draw_vline
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_draw_hline
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_draw_char_at
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_monitor
</UL>

<P><STRONG><a name="[a0f]"></a>vt_draw_char</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, vt100.o(i.vt_draw_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = vt_draw_char &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_fill_box
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_draw_hline
</UL>

<P><STRONG><a name="[8be]"></a>vt_draw_char_at</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, vt100.o(i.vt_draw_char_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = vt_draw_char_at &rArr; vt_move_to &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_move_to
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_draw_vline
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_draw_box
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mvaddstr
</UL>

<P><STRONG><a name="[a0d]"></a>vt_draw_hline</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, vt100.o(i.vt_draw_hline))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = vt_draw_hline &rArr; vt_move_to &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_move_to
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_draw_char
</UL>
<BR>[Called By]<UL><LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_draw_box
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_monitor
</UL>

<P><STRONG><a name="[a11]"></a>vt_draw_str_at</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, vt100.o(i.vt_draw_str_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = vt_draw_str_at &rArr; vt_move_to &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_move_to
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_monitor
</UL>

<P><STRONG><a name="[a0e]"></a>vt_draw_vline</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, vt100.o(i.vt_draw_vline))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = vt_draw_vline &rArr; vt_draw_char_at &rArr; vt_move_to &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_draw_char_at
</UL>
<BR>[Called By]<UL><LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_draw_box
</UL>

<P><STRONG><a name="[a12]"></a>vt_fill_box</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, vt100.o(i.vt_fill_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = vt_fill_box &rArr; vt_move_to &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_move_to
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_draw_char
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_monitor
</UL>

<P><STRONG><a name="[a13]"></a>vt_hide_cursor</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, vt100.o(i.vt_hide_cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = vt_hide_cursor &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_sl
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_monitor
</UL>

<P><STRONG><a name="[a14]"></a>vt_list_thread</STRONG> (Thumb, 314 bytes, Stack size 232 bytes, vt_monitor.o(i.vt_list_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = vt_list_thread &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_monitor
</UL>

<P><STRONG><a name="[1ef]"></a>vt_monitor</STRONG> (Thumb, 320 bytes, Stack size 88 bytes, vt_monitor.o(i.vt_monitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = vt_monitor &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_show_cursor
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_set_font_color
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_set_bg_color
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_move_to
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_hide_cursor
<LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_fill_box
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_draw_str_at
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_draw_hline
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_draw_box
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_clear_attr
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_clear
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_list_thread
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vt_monitor.o(FSymTab)
</UL>
<P><STRONG><a name="[a10]"></a>vt_move_to</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, vt100.o(i.vt_move_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = vt_move_to &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_fill_box
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_draw_str_at
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_draw_hline
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_draw_char_at
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_sl
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_monitor
</UL>

<P><STRONG><a name="[a16]"></a>vt_set_bg_color</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, vt100.o(i.vt_set_bg_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = vt_set_bg_color &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_sl
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_monitor
</UL>

<P><STRONG><a name="[a15]"></a>vt_set_font_color</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, vt100.o(i.vt_set_font_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = vt_set_font_color &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_sl
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_monitor
</UL>

<P><STRONG><a name="[a17]"></a>vt_show_cursor</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, vt100.o(i.vt_show_cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = vt_show_cursor &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_sl
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_monitor
</UL>

<P><STRONG><a name="[1f0]"></a>vt_sl</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, vt_sl.o(i.vt_sl))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = vt_sl &rArr; add_sl &rArr; add_smoke &rArr; my_mvaddstr &rArr; vt_draw_char_at &rArr; vt_move_to &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_show_cursor
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_set_font_color
<LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_set_bg_color
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_move_to
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_hide_cursor
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_clear_attr
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_clear
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;option
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_sl
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_D51
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_C51
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vt_sl.o(FSymTab)
</UL>
<P><STRONG><a name="[a1a]"></a>webclient_close</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, webclient.o(i.webclient_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = webclient_close &rArr; webclient_clean &rArr; closesocket &rArr; sal_closesocket &rArr; socket_delete &rArr; socket_free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_clean
</UL>
<BR>[Called By]<UL><LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
</UL>

<P><STRONG><a name="[a1d]"></a>webclient_get</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, webclient.o(i.webclient_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + In Cycle
<LI>Call Chain = webclient_get &rArr;  webclient_get (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_get
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
<LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_clean
</UL>
<BR>[Called By]<UL><LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
</UL>

<P><STRONG><a name="[a21]"></a>webclient_get_file</STRONG> (Thumb, 378 bytes, Stack size 48 bytes, webclient_file.o(i.webclient_get_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = webclient_get_file &rArr; webclient_get &rArr;  webclient_get (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_session_create
<LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wget
</UL>

<P><STRONG><a name="[a1f]"></a>webclient_handle_response</STRONG> (Thumb, 466 bytes, Stack size 48 bytes, webclient.o(i.webclient_handle_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = webclient_handle_response &rArr; webclient_read_line &rArr; webclient_recv &rArr; recv &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_get
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read_line
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
</UL>

<P><STRONG><a name="[a25]"></a>webclient_header_fields_add</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, webclient.o(i.webclient_header_fields_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = webclient_header_fields_add &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
</UL>

<P><STRONG><a name="[a20]"></a>webclient_header_fields_get</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, webclient.o(i.webclient_header_fields_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = webclient_header_fields_get &rArr; webclient_strstri &rArr; webclient_strncasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_strstri
</UL>
<BR>[Called By]<UL><LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
</UL>

<P><STRONG><a name="[a23]"></a>webclient_read</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, webclient.o(i.webclient_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = webclient_read &rArr; webclient_next_chunk &rArr; webclient_read_line &rArr; webclient_recv &rArr; recv &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_recv
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_next_chunk
</UL>
<BR>[Called By]<UL><LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
</UL>

<P><STRONG><a name="[a22]"></a>webclient_session_create</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, webclient.o(i.webclient_session_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = webclient_session_create &rArr; rt_calloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
</UL>

<P><STRONG><a name="[a2a]"></a>webclient_write</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, webclient.o(i.webclient_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = webclient_write &rArr; closesocket &rArr; sal_closesocket &rArr; socket_delete &rArr; socket_free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send
</UL>
<BR>[Called By]<UL><LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_send_header
</UL>

<P><STRONG><a name="[1eb]"></a>wget</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, webclient_file.o(i.wget))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = wget &rArr; webclient_get_file &rArr; webclient_get &rArr;  webclient_get (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webclient_file.o(FSymTab)
</UL>
<P><STRONG><a name="[3fb]"></a>write</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dfs_posix.o(i.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = write &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_write
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_stdio_write
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_write
<LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get_file
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_elmfat_sample
</UL>

<P><STRONG><a name="[570]"></a>xasprintf</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, vi_utils.o(i.xasprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 492 + Unknown Stack Size
<LI>Call Chain = xasprintf &rArr; vasprintf &rArr; vi_strdup &rArr; mem_sandbox_strdup &rArr; mem_sandbox_malloc &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vasprintf
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_args
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
</UL>

<P><STRONG><a name="[7a]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[21f]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[312]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
</UL>

<P><STRONG><a name="[a2d]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[310]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
</UL>

<P><STRONG><a name="[a79]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[311]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
</UL>

<P><STRONG><a name="[a2f]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[a2e]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
</UL>

<P><STRONG><a name="[a30]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
</UL>

<P><STRONG><a name="[218]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[a7a]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[a7b]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1fa]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>

<P><STRONG><a name="[1fe]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2bd]"></a>HAL_FSMC_MspInit</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_FSMC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FSMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_MspInit
</UL>

<P><STRONG><a name="[44f]"></a>bus_fault_track</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, cpuport.o(i.bus_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = bus_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[680]"></a>hard_fault_track</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, cpuport.o(i.hard_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = hard_fault_track &rArr; usage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage_fault_track
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_manage_fault_track
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_fault_track
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>

<P><STRONG><a name="[681]"></a>mem_manage_fault_track</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, cpuport.o(i.mem_manage_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = mem_manage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[682]"></a>usage_fault_track</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, cpuport.o(i.usage_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = usage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[2c7]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[2c8]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[2ae]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>

<P><STRONG><a name="[2b0]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[2b2]"></a>DMA_SetConfig</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f4xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start
</UL>

<P><STRONG><a name="[2b9]"></a>FLASH_Program_Byte</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[2bc]"></a>FLASH_Program_DoubleWord</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_DoubleWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[2ba]"></a>FLASH_Program_HalfWord</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_HalfWord))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[2bb]"></a>FLASH_Program_Word</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_Word))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[2ab]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[2b5]"></a>FLASH_MassErase</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[93]"></a>SPI_DMAError</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.SPI_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 3]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
<LI> stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
<LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[91]"></a>SPI_DMAHalfReceiveCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.SPI_DMAHalfReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAHalfReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
<LI> stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[96]"></a>SPI_DMAHalfTransmitCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.SPI_DMAHalfTransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAHalfTransmitCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[94]"></a>SPI_DMAHalfTransmitReceiveCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.SPI_DMAHalfTransmitReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAHalfTransmitReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[92]"></a>SPI_DMAReceiveCplt</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.SPI_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SPI_DMAReceiveCplt &rArr; SPI_EndRxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; rt_tick_get_millisecond
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
<LI> stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[97]"></a>SPI_DMATransmitCplt</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.SPI_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SPI_DMATransmitCplt &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; rt_tick_get_millisecond
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[95]"></a>SPI_DMATransmitReceiveCplt</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.SPI_DMATransmitReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SPI_DMATransmitReceiveCplt &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; rt_tick_get_millisecond
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[2d5]"></a>SPI_EndRxTransaction</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.SPI_EndRxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SPI_EndRxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; rt_tick_get_millisecond
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
</UL>

<P><STRONG><a name="[2d9]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; rt_tick_get_millisecond
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
</UL>

<P><STRONG><a name="[327]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick &rArr; rt_tick_get_millisecond
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>

<P><STRONG><a name="[98]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_DMAAbortOnError &rArr; HAL_UART_ErrorCallback &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[9b]"></a>UART_DMAError</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_DMAError &rArr; HAL_UART_ErrorCallback &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
<LI> stm32f4xx_hal_uart.o(i.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[9c]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = UART_DMAReceiveCplt &rArr; HAL_UART_RxCpltCallback &rArr; dma_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[9d]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMARxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = UART_DMARxHalfCplt &rArr; HAL_UART_RxHalfCpltCallback &rArr; dma_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[99]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = UART_DMATransmitCplt &rArr; HAL_UART_TxCpltCallback &rArr; _dma_tx_complete &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[9a]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMATxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMATxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[2e7]"></a>UART_EndRxTransfer</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[2eb]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; _dma_tx_complete &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[32c]"></a>UART_EndTxTransfer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndTxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[2e6]"></a>UART_Receive_IT</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; dma_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2ee]"></a>UART_SetConfig</STRONG> (Thumb, 546 bytes, Stack size 40 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[2ea]"></a>UART_Transmit_IT</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1b2]"></a>reboot</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, drv_common.o(i.reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reboot
</UL>
<BR>[Calls]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_cpu_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_common.o(FSymTab)
</UL>
<P><STRONG><a name="[2c0]"></a>bit2bitno</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_gpio.o(i.bit2bitno))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_dettach_irq
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_attach_irq
</UL>

<P><STRONG><a name="[149]"></a>stm32_pin_attach_irq</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, drv_gpio.o(i.stm32_pin_attach_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stm32_pin_attach_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[14a]"></a>stm32_pin_dettach_irq</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, drv_gpio.o(i.stm32_pin_dettach_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stm32_pin_dettach_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[14c]"></a>stm32_pin_get</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, drv_gpio.o(i.stm32_pin_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stm32_pin_get
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[14b]"></a>stm32_pin_irq_enable</STRONG> (Thumb, 426 bytes, Stack size 56 bytes, drv_gpio.o(i.stm32_pin_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = stm32_pin_irq_enable &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[146]"></a>stm32_pin_mode</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, drv_gpio.o(i.stm32_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = stm32_pin_mode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[148]"></a>stm32_pin_read</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, drv_gpio.o(i.stm32_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stm32_pin_read
</UL>
<BR>[Calls]<UL><LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[147]"></a>stm32_pin_write</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, drv_gpio.o(i.stm32_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stm32_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[947]"></a>rt_hw_spi_bus_init</STRONG> (Thumb, 728 bytes, Stack size 16 bytes, drv_spi.o(i.rt_hw_spi_bus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_hw_spi_bus_init &rArr; rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_init
</UL>

<P><STRONG><a name="[14d]"></a>spi_configure</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, drv_spi.o(i.spi_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = spi_configure &rArr; stm32_spi_init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.constdata)
</UL>
<P><STRONG><a name="[14e]"></a>spixfer</STRONG> (Thumb, 484 bytes, Stack size 56 bytes, drv_spi.o(i.spixfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = spixfer &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.constdata)
</UL>
<P><STRONG><a name="[94c]"></a>stm32_get_dma_info</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_spi.o(i.stm32_get_dma_info))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_init
</UL>

<P><STRONG><a name="[9c0]"></a>stm32_spi_init</STRONG> (Thumb, 440 bytes, Stack size 24 bytes, drv_spi.o(i.stm32_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = stm32_spi_init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_configure
</UL>

<P><STRONG><a name="[2f8]"></a>_dma_tx_complete</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, drv_usart.o(i._dma_tx_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = _dma_tx_complete &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[2f4]"></a>dma_isr</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, drv_usart.o(i.dma_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = dma_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[14f]"></a>stm32_configure</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, drv_usart.o(i.stm32_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = stm32_configure &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[150]"></a>stm32_control</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, drv_usart.o(i.stm32_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = stm32_control &rArr; stm32_dma_config &rArr; HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_dma_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[9c2]"></a>stm32_dma_config</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, drv_usart.o(i.stm32_dma_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = stm32_dma_config &rArr; HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
</UL>

<P><STRONG><a name="[153]"></a>stm32_dma_transmit</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, drv_usart.o(i.stm32_dma_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = stm32_dma_transmit &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[152]"></a>stm32_getc</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, drv_usart.o(i.stm32_getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stm32_getc &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[151]"></a>stm32_putc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, drv_usart.o(i.stm32_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stm32_putc &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[950]"></a>stm32_uart_get_dma_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drv_usart.o(i.stm32_uart_get_dma_config))
<BR><BR>[Called By]<UL><LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
</UL>

<P><STRONG><a name="[32e]"></a>uart_isr</STRONG> (Thumb, 418 bytes, Stack size 32 bytes, drv_usart.o(i.uart_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = uart_isr &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; dma_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[9c4]"></a>GetSector</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, drv_flash_f4.o(i.GetSector))
<BR><BR>[Called By]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_erase
</UL>

<P><STRONG><a name="[15c]"></a>fal_flash_erase_128k</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, drv_flash_f4.o(i.fal_flash_erase_128k))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = fal_flash_erase_128k &rArr; stm32_flash_erase &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_flash_f4.o(.constdata)
</UL>
<P><STRONG><a name="[156]"></a>fal_flash_erase_16k</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, drv_flash_f4.o(i.fal_flash_erase_16k))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = fal_flash_erase_16k &rArr; stm32_flash_erase &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_flash_f4.o(.constdata)
</UL>
<P><STRONG><a name="[159]"></a>fal_flash_erase_64k</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, drv_flash_f4.o(i.fal_flash_erase_64k))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = fal_flash_erase_64k &rArr; stm32_flash_erase &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_flash_f4.o(.constdata)
</UL>
<P><STRONG><a name="[15a]"></a>fal_flash_read_128k</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, drv_flash_f4.o(i.fal_flash_read_128k))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = fal_flash_read_128k &rArr; stm32_flash_read &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_flash_f4.o(.constdata)
</UL>
<P><STRONG><a name="[154]"></a>fal_flash_read_16k</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, drv_flash_f4.o(i.fal_flash_read_16k))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = fal_flash_read_16k &rArr; stm32_flash_read &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_flash_f4.o(.constdata)
</UL>
<P><STRONG><a name="[157]"></a>fal_flash_read_64k</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, drv_flash_f4.o(i.fal_flash_read_64k))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = fal_flash_read_64k &rArr; stm32_flash_read &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_flash_f4.o(.constdata)
</UL>
<P><STRONG><a name="[15b]"></a>fal_flash_write_128k</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, drv_flash_f4.o(i.fal_flash_write_128k))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = fal_flash_write_128k &rArr; stm32_flash_write &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_flash_f4.o(.constdata)
</UL>
<P><STRONG><a name="[155]"></a>fal_flash_write_16k</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, drv_flash_f4.o(i.fal_flash_write_16k))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = fal_flash_write_16k &rArr; stm32_flash_write &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_flash_f4.o(.constdata)
</UL>
<P><STRONG><a name="[158]"></a>fal_flash_write_64k</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, drv_flash_f4.o(i.fal_flash_write_64k))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = fal_flash_write_64k &rArr; stm32_flash_write &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_flash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_flash_f4.o(.constdata)
</UL>
<P><STRONG><a name="[7]"></a>LCD_Fast_DrawPoint</STRONG> (Thumb, 276 bytes, Stack size 12 bytes, drv_lcd.o(i.LCD_Fast_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_Fast_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_lcd.o(.data)
</UL>
<P><STRONG><a name="[ae]"></a>drv_lcd_control</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, drv_lcd.o(i.drv_lcd_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = drv_lcd_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_lcd.o(i.drv_lcd_hw_init)
</UL>
<P><STRONG><a name="[ad]"></a>drv_lcd_init</STRONG> (Thumb, 9514 bytes, Stack size 72 bytes, drv_lcd.o(i.drv_lcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = drv_lcd_init &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_lcd.o(i.drv_lcd_hw_init)
</UL>
<P><STRONG><a name="[19c]"></a>rt_hw_sram_init</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, drv_sram.o(i.rt_hw_sram_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_hw_sram_init &rArr; rt_memheap_init &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sram.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[1b3]"></a>sram_test</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, drv_sram.o(i.sram_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = sram_test &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sram.o(FSymTab)
</UL>
<P><STRONG><a name="[160]"></a>stm32_get_scl</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, drv_soft_i2c.o(i.stm32_get_scl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stm32_get_scl &rArr; rt_pin_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_soft_i2c.o(.constdata)
</UL>
<P><STRONG><a name="[15f]"></a>stm32_get_sda</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, drv_soft_i2c.o(i.stm32_get_sda))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stm32_get_sda &rArr; rt_pin_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_soft_i2c.o(.constdata)
</UL>
<P><STRONG><a name="[944]"></a>stm32_i2c_bus_unlock</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, drv_soft_i2c.o(i.stm32_i2c_bus_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = stm32_i2c_bus_unlock &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_udelay
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
</UL>

<P><STRONG><a name="[942]"></a>stm32_i2c_gpio_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, drv_soft_i2c.o(i.stm32_i2c_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = stm32_i2c_gpio_init &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_i2c_init
</UL>

<P><STRONG><a name="[15e]"></a>stm32_set_scl</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, drv_soft_i2c.o(i.stm32_set_scl))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = stm32_set_scl &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_soft_i2c.o(.constdata)
</UL>
<P><STRONG><a name="[15d]"></a>stm32_set_sda</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, drv_soft_i2c.o(i.stm32_set_sda))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = stm32_set_sda &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_soft_i2c.o(.constdata)
</UL>
<P><STRONG><a name="[161]"></a>stm32_udelay</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, drv_soft_i2c.o(i.stm32_udelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = stm32_udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_i2c_bus_unlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_soft_i2c.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>DMA_RxConfig</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, drv_sdio.o(i.DMA_RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DMA_RxConfig &rArr; SD_LowLevel_DMA_RxConfig &rArr; HAL_DMA_Start &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sdio.o(i.rt_hw_sdio_init)
</UL>
<P><STRONG><a name="[115]"></a>DMA_TxConfig</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, drv_sdio.o(i.DMA_TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DMA_TxConfig &rArr; SD_LowLevel_DMA_TxConfig &rArr; HAL_DMA_Start &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sdio.o(i.rt_hw_sdio_init)
</UL>
<P><STRONG><a name="[993]"></a>get_order</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, drv_sdio.o(i.get_order))
<BR><BR>[Called By]<UL><LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rthw_sdio_send_command
</UL>

<P><STRONG><a name="[164]"></a>rthw_sd_detect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_sdio.o(i.rthw_sd_detect))
<BR>[Address Reference Count : 1]<UL><LI> drv_sdio.o(.constdata)
</UL>
<P><STRONG><a name="[163]"></a>rthw_sdio_iocfg</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, drv_sdio.o(i.rthw_sdio_iocfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rthw_sdio_iocfg &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sdio.o(.constdata)
</UL>
<P><STRONG><a name="[162]"></a>rthw_sdio_request</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, drv_sdio.o(i.rthw_sdio_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = rthw_sdio_request &rArr; rthw_sdio_send_command &rArr; rthw_sdio_wait_completed &rArr; rt_event_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_req_complete
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rthw_sdio_send_command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sdio.o(.constdata)
</UL>
<P><STRONG><a name="[992]"></a>rthw_sdio_send_command</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, drv_sdio.o(i.rthw_sdio_send_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rthw_sdio_send_command &rArr; rthw_sdio_wait_completed &rArr; rt_event_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rthw_sdio_wait_completed
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rthw_sdio_transfer_by_dma
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_order
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rthw_sdio_request
</UL>

<P><STRONG><a name="[994]"></a>rthw_sdio_transfer_by_dma</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, drv_sdio.o(i.rthw_sdio_transfer_by_dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = rthw_sdio_transfer_by_dma &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rthw_sdio_send_command
</UL>

<P><STRONG><a name="[995]"></a>rthw_sdio_wait_completed</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, drv_sdio.o(i.rthw_sdio_wait_completed))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rthw_sdio_wait_completed &rArr; rt_event_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rthw_sdio_send_command
</UL>

<P><STRONG><a name="[139]"></a>stm32_sdio_clk_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_sdio.o(i.stm32_sdio_clk_get))
<BR>[Address Reference Count : 1]<UL><LI> drv_sdio.o(i.sdio_host_create)
</UL>
<P><STRONG><a name="[113]"></a>stm32_sdio_clock_get</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_sdio.o(i.stm32_sdio_clock_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = stm32_sdio_clock_get &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sdio.o(i.rt_hw_sdio_init)
</UL>
<P><STRONG><a name="[e]"></a>erase</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fal_flash_sfud_port.o(i.erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = erase &rArr; sfud_erase &rArr; sfud_chip_erase &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_flash_sfud_port.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fal_flash_sfud_port.o(i.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = init &rArr; rt_sfud_flash_find_by_dev_name &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_find_by_dev_name
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_flash_sfud_port.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>read</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, fal_flash_sfud_port.o(i.read))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = read &rArr; sfud_read &rArr; wait_busy &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_flash_sfud_port.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>write</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fal_flash_sfud_port.o(i.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = write &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_flash_sfud_port.o(.data)
</UL>
<P><STRONG><a name="[1a6]"></a>rt_hw_spi_flash_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, spi_flash_init.o(i.rt_hw_spi_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = rt_hw_spi_flash_init &rArr; rt_hw_spi_device_attach &rArr; rt_spi_bus_attach_device &rArr; rt_spidev_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_device_attach
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_init.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[920]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, completion.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>

<P><STRONG><a name="[926]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dataqueue.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
</UL>

<P><STRONG><a name="[92a]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dataqueue.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
</UL>

<P><STRONG><a name="[92b]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dataqueue.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
</UL>

<P><STRONG><a name="[a6]"></a>_delayed_work_timeout_handler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, workqueue.o(i._delayed_work_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = _delayed_work_timeout_handler &rArr; _workqueue_submit_work &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
</UL>
<BR>[Address Reference Count : 1]<UL><LI> workqueue.o(i._workqueue_submit_delayed_work)
</UL>
<P><STRONG><a name="[3fe]"></a>_workqueue_cancel_delayed_work</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, workqueue.o(i._workqueue_cancel_delayed_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _workqueue_cancel_delayed_work &rArr; rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_cancel_work
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_delayed_work
</UL>

<P><STRONG><a name="[3ff]"></a>_workqueue_cancel_work</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, workqueue.o(i._workqueue_cancel_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _workqueue_cancel_work
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_cancel_delayed_work
</UL>

<P><STRONG><a name="[401]"></a>_workqueue_submit_delayed_work</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, workqueue.o(i._workqueue_submit_delayed_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _workqueue_submit_delayed_work &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_cancel_delayed_work
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_submit_work
</UL>

<P><STRONG><a name="[349]"></a>_workqueue_submit_work</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, workqueue.o(i._workqueue_submit_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = _workqueue_submit_work &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_submit_work
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_delayed_work
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delayed_work_timeout_handler
</UL>

<P><STRONG><a name="[136]"></a>_workqueue_thread_entry</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, workqueue.o(i._workqueue_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = _workqueue_thread_entry &rArr; rt_sem_trytake &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_trytake
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> workqueue.o(i.rt_workqueue_create)
</UL>
<P><STRONG><a name="[92d]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, workqueue.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_workqueue_create
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_delayed_work_init
</UL>

<P><STRONG><a name="[403]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, workqueue.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
</UL>

<P><STRONG><a name="[400]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, workqueue.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_thread_entry
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_submit_work
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_workqueue_cancel_work
</UL>

<P><STRONG><a name="[112]"></a>_pin_control</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, pin.o(i._pin_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _pin_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(i.rt_device_pin_register)
</UL>
<P><STRONG><a name="[110]"></a>_pin_read</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, pin.o(i._pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _pin_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(i.rt_device_pin_register)
</UL>
<P><STRONG><a name="[111]"></a>_pin_write</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, pin.o(i._pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(i.rt_device_pin_register)
</UL>
<P><STRONG><a name="[96e]"></a>_get_baudrate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, serial.o(i._get_baudrate))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
</UL>

<P><STRONG><a name="[96c]"></a>_get_speed</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, serial.o(i._get_speed))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
</UL>

<P><STRONG><a name="[3e5]"></a>_serial_check_buffer_size</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, serial.o(i._serial_check_buffer_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = _serial_check_buffer_size &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_put_index
</UL>

<P><STRONG><a name="[3e6]"></a>_serial_dma_rx</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, serial.o(i._serial_dma_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _serial_dma_rx &rArr; rt_dma_recv_update_get_index &rArr; rt_dma_calc_recved_len &rArr; _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_get_index
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[3eb]"></a>_serial_dma_tx</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, serial.o(i._serial_dma_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = _serial_dma_tx &rArr; rt_data_queue_push &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[3ed]"></a>_serial_fifo_calc_recved_len</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, serial.o(i._serial_fifo_calc_recved_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
</UL>

<P><STRONG><a name="[3ee]"></a>_serial_int_rx</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, serial.o(i._serial_int_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _serial_int_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[3ef]"></a>_serial_int_tx</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, serial.o(i._serial_int_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = _serial_int_tx &rArr; rt_completion_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[3f1]"></a>_serial_poll_rx</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, serial.o(i._serial_poll_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _serial_poll_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[3f2]"></a>_serial_poll_tx</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, serial.o(i._serial_poll_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _serial_poll_tx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[3fc]"></a>_tc_flush</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, serial.o(i._tc_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _tc_flush &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
</UL>

<P><STRONG><a name="[3e8]"></a>rt_dma_calc_recved_len</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, serial.o(i.rt_dma_calc_recved_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_dma_calc_recved_len &rArr; _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_calc_recved_len
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_get_index
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
</UL>

<P><STRONG><a name="[3ea]"></a>rt_dma_recv_update_get_index</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, serial.o(i.rt_dma_recv_update_get_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_dma_recv_update_get_index &rArr; rt_dma_calc_recved_len &rArr; _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
</UL>

<P><STRONG><a name="[935]"></a>rt_dma_recv_update_put_index</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, serial.o(i.rt_dma_recv_update_put_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = rt_dma_recv_update_put_index &rArr; _serial_check_buffer_size &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_check_buffer_size
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[118]"></a>rt_serial_close</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, serial.o(i.rt_serial_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_serial_close &rArr; rt_data_queue_deinit &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[11b]"></a>rt_serial_control</STRONG> (Thumb, 660 bytes, Stack size 48 bytes, serial.o(i.rt_serial_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rt_serial_control &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfsetospeed
<LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfgetospeed
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tc_flush
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_fifo_calc_recved_len
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_speed
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_baudrate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[116]"></a>rt_serial_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, serial.o(i.rt_serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_serial_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[117]"></a>rt_serial_open</STRONG> (Thumb, 582 bytes, Stack size 24 bytes, serial.o(i.rt_serial_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = rt_serial_open &rArr; rt_data_queue_init &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[119]"></a>rt_serial_read</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, serial.o(i.rt_serial_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rt_serial_read &rArr; _serial_dma_rx &rArr; rt_dma_recv_update_get_index &rArr; rt_dma_calc_recved_len &rArr; _serial_fifo_calc_recved_len &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_rx
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[11a]"></a>rt_serial_write</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, serial.o(i.rt_serial_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_serial_write &rArr; _serial_dma_tx &rArr; rt_data_queue_push &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[167]"></a>serial_fops_close</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, serial.o(i.serial_fops_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = serial_fops_close &rArr; rt_device_set_rx_indicate &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[168]"></a>serial_fops_ioctl</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, serial.o(i.serial_fops_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = serial_fops_ioctl &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[166]"></a>serial_fops_open</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, serial.o(i.serial_fops_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = serial_fops_open &rArr; rt_device_open &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[16b]"></a>serial_fops_poll</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, serial.o(i.serial_fops_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = serial_fops_poll &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[169]"></a>serial_fops_read</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, serial.o(i.serial_fops_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = serial_fops_read &rArr; rt_wqueue_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wait
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[13a]"></a>serial_fops_rx_ind</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, serial.o(i.serial_fops_rx_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = serial_fops_rx_ind &rArr; rt_wqueue_wakeup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_wakeup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.serial_fops_open)
</UL>
<P><STRONG><a name="[16a]"></a>serial_fops_write</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, serial.o(i.serial_fops_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = serial_fops_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata)
</UL>
<P><STRONG><a name="[130]"></a>_spi_bus_device_control</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, spi_dev.o(i._spi_bus_device_control))
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(i.rt_spi_bus_device_init)
</UL>
<P><STRONG><a name="[12e]"></a>_spi_bus_device_read</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_dev.o(i._spi_bus_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = _spi_bus_device_read &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(i.rt_spi_bus_device_init)
</UL>
<P><STRONG><a name="[12f]"></a>_spi_bus_device_write</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_dev.o(i._spi_bus_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = _spi_bus_device_write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(i.rt_spi_bus_device_init)
</UL>
<P><STRONG><a name="[133]"></a>_spidev_device_control</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, spi_dev.o(i._spidev_device_control))
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(i.rt_spidev_device_init)
</UL>
<P><STRONG><a name="[131]"></a>_spidev_device_read</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_dev.o(i._spidev_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = _spidev_device_read &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(i.rt_spidev_device_init)
</UL>
<P><STRONG><a name="[132]"></a>_spidev_device_write</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_dev.o(i._spidev_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = _spidev_device_write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(i.rt_spidev_device_init)
</UL>
<P><STRONG><a name="[13f]"></a>retry_delay_100us</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_flash_sfud.o(i.retry_delay_100us))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = retry_delay_100us &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[12d]"></a>rt_sfud_control</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, spi_flash_sfud.o(i.rt_sfud_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = rt_sfud_control &rArr; sfud_erase &rArr; sfud_chip_erase &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.rt_sfud_flash_probe_ex)
</UL>
<P><STRONG><a name="[12b]"></a>rt_sfud_read</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, spi_flash_sfud.o(i.rt_sfud_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_sfud_read &rArr; sfud_read &rArr; wait_busy &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.rt_sfud_flash_probe_ex)
</UL>
<P><STRONG><a name="[12c]"></a>rt_sfud_write</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, spi_flash_sfud.o(i.rt_sfud_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = rt_sfud_write &rArr; sfud_erase_write &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.rt_sfud_flash_probe_ex)
</UL>
<P><STRONG><a name="[1b8]"></a>sf</STRONG> (Thumb, 2014 bytes, Stack size 96 bytes, spi_flash_sfud.o(i.sf))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = sf &rArr; rt_sfud_flash_probe &rArr; rt_sfud_flash_probe_ex &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write_status
<LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_status
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_delete
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(FSymTab)
</UL>
<P><STRONG><a name="[13d]"></a>spi_lock</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, spi_flash_sfud.o(i.spi_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = spi_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[13e]"></a>spi_unlock</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, spi_flash_sfud.o(i.spi_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = spi_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[13c]"></a>spi_write_read</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, spi_flash_sfud.o(i.spi_write_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = spi_write_read &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[40b]"></a>aai_write</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, sfud.o(i.aai_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_adress_byte_array
</UL>
<BR>[Called By]<UL><LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
</UL>

<P><STRONG><a name="[683]"></a>hardware_init</STRONG> (Thumb, 524 bytes, Stack size 24 bytes, sfud.o(i.hardware_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = hardware_init &rArr; sfud_read_sfdp &rArr; read_basic_table &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_4_byte_address_mode
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_jedec_id
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write_status
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_spi_port_init
</UL>
<BR>[Called By]<UL><LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
</UL>

<P><STRONG><a name="[40e]"></a>make_adress_byte_array</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, sfud.o(i.make_adress_byte_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = make_adress_byte_array
</UL>
<BR>[Called By]<UL><LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
</UL>

<P><STRONG><a name="[40c]"></a>page256_or_1_byte_write</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, sfud.o(i.page256_or_1_byte_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = page256_or_1_byte_write &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_adress_byte_array
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
</UL>

<P><STRONG><a name="[685]"></a>read_jedec_id</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, sfud.o(i.read_jedec_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = read_jedec_id &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[687]"></a>reset</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, sfud.o(i.reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = reset &rArr; wait_busy &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[689]"></a>set_4_byte_address_mode</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, sfud.o(i.set_4_byte_address_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = set_4_byte_address_mode &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[40d]"></a>set_write_enabled</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, sfud.o(i.set_write_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_4_byte_address_mode
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write_status
</UL>

<P><STRONG><a name="[9b6]"></a>software_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sfud.o(i.software_init))
<BR><BR>[Called By]<UL><LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
</UL>

<P><STRONG><a name="[40f]"></a>wait_busy</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, sfud.o(i.wait_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = wait_busy &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
</UL>

<P><STRONG><a name="[915]"></a>read_basic_header</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, sfud_sfdp.o(i.read_basic_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = read_basic_header &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_data
</UL>
<BR>[Called By]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
</UL>

<P><STRONG><a name="[917]"></a>read_basic_table</STRONG> (Thumb, 618 bytes, Stack size 72 bytes, sfud_sfdp.o(i.read_basic_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = read_basic_table &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_data
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
</UL>

<P><STRONG><a name="[916]"></a>read_sfdp_data</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, sfud_sfdp.o(i.read_sfdp_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_sfdp_data
</UL>
<BR>[Called By]<UL><LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_header
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_table
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_header
</UL>

<P><STRONG><a name="[918]"></a>read_sfdp_header</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, sfud_sfdp.o(i.read_sfdp_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = read_sfdp_header &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_data
</UL>
<BR>[Called By]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
</UL>

<P><STRONG><a name="[5c2]"></a>_delay_us</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, enc28j60.o(i._delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_phy_write
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_phy_read
</UL>

<P><STRONG><a name="[5bc]"></a>_tx_chain_init</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, enc28j60.o(i._tx_chain_init))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_rx
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_init
</UL>

<P><STRONG><a name="[1b9]"></a>enc28j60</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, enc28j60.o(i.enc28j60))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = enc28j60 &rArr; enc28j60_phy_read &rArr; spi_write &rArr; enc28j60_set_bank &rArr; spi_write_op &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_phy_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enc28j60.o(FSymTab)
</UL>
<P><STRONG><a name="[5b6]"></a>enc28j60_check_link_status</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, enc28j60.o(i.enc28j60_check_link_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = enc28j60_check_link_status &rArr; enc28j60_phy_read &rArr; spi_write &rArr; enc28j60_set_bank &rArr; spi_write_op &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_phy_read
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_rx
</UL>

<P><STRONG><a name="[5b7]"></a>enc28j60_clkout</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, enc28j60.o(i.enc28j60_clkout))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = enc28j60_clkout &rArr; spi_write &rArr; enc28j60_set_bank &rArr; spi_write_op &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_init
</UL>

<P><STRONG><a name="[b1]"></a>enc28j60_close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, enc28j60.o(i.enc28j60_close))
<BR>[Address Reference Count : 1]<UL><LI> enc28j60.o(i.enc28j60_attach)
</UL>
<P><STRONG><a name="[b4]"></a>enc28j60_control</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, enc28j60.o(i.enc28j60_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = enc28j60_control &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enc28j60.o(i.enc28j60_attach)
</UL>
<P><STRONG><a name="[af]"></a>enc28j60_init</STRONG> (Thumb, 478 bytes, Stack size 16 bytes, enc28j60.o(i.enc28j60_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = enc28j60_init &rArr; enc28j60_phy_write &rArr; spi_write &rArr; enc28j60_set_bank &rArr; spi_write_op &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_op
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_set_bank
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_phy_write
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_clkout
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_chain_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enc28j60.o(i.enc28j60_attach)
</UL>
<P><STRONG><a name="[5bf]"></a>enc28j60_interrupt_disable</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, enc28j60.o(i.enc28j60_interrupt_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = enc28j60_interrupt_disable &rArr; spi_read &rArr; enc28j60_set_bank &rArr; spi_write_op &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_op
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_set_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_tx
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_rx
</UL>

<P><STRONG><a name="[5c0]"></a>enc28j60_interrupt_enable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, enc28j60.o(i.enc28j60_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = enc28j60_interrupt_enable &rArr; enc28j60_set_bank &rArr; spi_write_op &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_op
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_set_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_tx
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_rx
</UL>

<P><STRONG><a name="[b0]"></a>enc28j60_open</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, enc28j60.o(i.enc28j60_open))
<BR>[Address Reference Count : 1]<UL><LI> enc28j60.o(i.enc28j60_attach)
</UL>
<P><STRONG><a name="[5b0]"></a>enc28j60_phy_read</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, enc28j60.o(i.enc28j60_phy_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = enc28j60_phy_read &rArr; spi_write &rArr; enc28j60_set_bank &rArr; spi_write_op &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_attach
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_rx
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_check_link_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60
</UL>

<P><STRONG><a name="[5bd]"></a>enc28j60_phy_write</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, enc28j60.o(i.enc28j60_phy_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = enc28j60_phy_write &rArr; spi_write &rArr; enc28j60_set_bank &rArr; spi_write_op &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_init
</UL>

<P><STRONG><a name="[b2]"></a>enc28j60_read</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, enc28j60.o(i.enc28j60_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = enc28j60_read &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enc28j60.o(i.enc28j60_attach)
</UL>
<P><STRONG><a name="[b5]"></a>enc28j60_rx</STRONG> (Thumb, 750 bytes, Stack size 56 bytes, enc28j60.o(i.enc28j60_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = enc28j60_rx &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_linkchange
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_op
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_op
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_set_bank
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_phy_read
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_interrupt_enable
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_interrupt_disable
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_check_link_status
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_chain_init
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enc28j60.o(i.enc28j60_attach)
</UL>
<P><STRONG><a name="[5be]"></a>enc28j60_set_bank</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, enc28j60.o(i.enc28j60_set_bank))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = enc28j60_set_bank &rArr; spi_write_op &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_op
</UL>
<BR>[Called By]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_rx
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_interrupt_enable
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_interrupt_disable
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_init
</UL>

<P><STRONG><a name="[b6]"></a>enc28j60_tx</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, enc28j60.o(i.enc28j60_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = enc28j60_tx &rArr; enc28j60_interrupt_disable &rArr; spi_read &rArr; enc28j60_set_bank &rArr; spi_write_op &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_op
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_interrupt_enable
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_interrupt_disable
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enc28j60.o(i.enc28j60_attach)
</UL>
<P><STRONG><a name="[b3]"></a>enc28j60_write</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, enc28j60.o(i.enc28j60_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = enc28j60_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enc28j60.o(i.enc28j60_attach)
</UL>
<P><STRONG><a name="[5af]"></a>spi_read</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, enc28j60.o(i.spi_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = spi_read &rArr; enc28j60_set_bank &rArr; spi_write_op &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_op
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_set_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_attach
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_tx
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_rx
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_phy_write
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_phy_read
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_interrupt_disable
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60
</UL>

<P><STRONG><a name="[5c5]"></a>spi_read_op</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, enc28j60.o(i.spi_read_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = spi_read_op &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_rx
</UL>

<P><STRONG><a name="[5b8]"></a>spi_write</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, enc28j60.o(i.spi_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = spi_write &rArr; enc28j60_set_bank &rArr; spi_write_op &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_op
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_set_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_tx
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_rx
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_phy_write
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_phy_read
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_init
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_clkout
</UL>

<P><STRONG><a name="[5b4]"></a>spi_write_op</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, enc28j60.o(i.spi_write_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = spi_write_op &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_attach
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_tx
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_set_bank
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_rx
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_interrupt_enable
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_interrupt_disable
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_init
</UL>

<P><STRONG><a name="[122]"></a>i2c_bus_device_control</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, i2c_dev.o(i.i2c_bus_device_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = i2c_bus_device_control &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_dev.o(i.rt_i2c_bus_device_device_init)
</UL>
<P><STRONG><a name="[120]"></a>i2c_bus_device_read</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, i2c_dev.o(i.i2c_bus_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = i2c_bus_device_read &rArr; rt_i2c_master_recv &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_dev.o(i.rt_i2c_bus_device_device_init)
</UL>
<P><STRONG><a name="[121]"></a>i2c_bus_device_write</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, i2c_dev.o(i.i2c_bus_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = i2c_bus_device_write &rArr; rt_i2c_master_send &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_master_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_dev.o(i.rt_i2c_bus_device_device_init)
</UL>
<P><STRONG><a name="[31b]"></a>SCL_H</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, i2c-bit-ops.o(i.SCL_H))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_waitack
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack_or_nack
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_restart
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readb
</UL>

<P><STRONG><a name="[68c]"></a>i2c_bit_send_address</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, i2c-bit-ops.o(i.i2c_bit_send_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = i2c_bit_send_address &rArr; i2c_send_address &rArr; i2c_writeb &rArr; i2c_waitack &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
</UL>

<P><STRONG><a name="[16c]"></a>i2c_bit_xfer</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, i2c-bit-ops.o(i.i2c_bit_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = i2c_bit_xfer &rArr; i2c_bit_send_address &rArr; i2c_send_address &rArr; i2c_writeb &rArr; i2c_waitack &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_bytes
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_restart
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_recv_bytes
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_send_address
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c-bit-ops.o(.constdata)
</UL>
<P><STRONG><a name="[31e]"></a>i2c_delay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, i2c-bit-ops.o(i.i2c_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_waitack
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack_or_nack
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_restart
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readb
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>

<P><STRONG><a name="[697]"></a>i2c_delay2</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, i2c-bit-ops.o(i.i2c_delay2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_delay2
</UL>
<BR>[Called By]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readb
</UL>

<P><STRONG><a name="[696]"></a>i2c_readb</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, i2c-bit-ops.o(i.i2c_readb))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = i2c_readb &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay2
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_recv_bytes
</UL>

<P><STRONG><a name="[691]"></a>i2c_recv_bytes</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, i2c-bit-ops.o(i.i2c_recv_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = i2c_recv_bytes &rArr; i2c_readb &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_ack_or_nack
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
</UL>

<P><STRONG><a name="[68f]"></a>i2c_restart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, i2c-bit-ops.o(i.i2c_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = i2c_restart &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_send_address
</UL>

<P><STRONG><a name="[698]"></a>i2c_send_ack_or_nack</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, i2c-bit-ops.o(i.i2c_send_ack_or_nack))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = i2c_send_ack_or_nack &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_recv_bytes
</UL>

<P><STRONG><a name="[68d]"></a>i2c_send_address</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, i2c-bit-ops.o(i.i2c_send_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = i2c_send_address &rArr; i2c_writeb &rArr; i2c_waitack &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_stop
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_start
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay2
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_send_address
</UL>

<P><STRONG><a name="[692]"></a>i2c_send_bytes</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, i2c-bit-ops.o(i.i2c_send_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = i2c_send_bytes &rArr; i2c_writeb &rArr; i2c_waitack &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
</UL>

<P><STRONG><a name="[690]"></a>i2c_start</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, i2c-bit-ops.o(i.i2c_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_start &rArr; i2c_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
</UL>

<P><STRONG><a name="[693]"></a>i2c_stop</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, i2c-bit-ops.o(i.i2c_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = i2c_stop &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay2
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_xfer
</UL>

<P><STRONG><a name="[699]"></a>i2c_waitack</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, i2c-bit-ops.o(i.i2c_waitack))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = i2c_waitack &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeb
</UL>

<P><STRONG><a name="[68e]"></a>i2c_writeb</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, i2c-bit-ops.o(i.i2c_writeb))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = i2c_writeb &rArr; i2c_waitack &rArr; SCL_H &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_waitack
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_delay
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_H
</UL>
<BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_bytes
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_bit_send_address
</UL>

<P><STRONG><a name="[11d]"></a>rt_touch_close</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, touch.o(i.rt_touch_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_touch_close &rArr; rt_touch_irq_disable &rArr; rt_pin_irq_enable &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_touch_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(i.rt_hw_touch_register)
</UL>
<P><STRONG><a name="[11f]"></a>rt_touch_control</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, touch.o(i.rt_touch_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_touch_control &rArr; rt_touch_irq_enable &rArr; rt_pin_irq_enable &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_touch_irq_enable
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_touch_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(i.rt_hw_touch_register)
</UL>
<P><STRONG><a name="[987]"></a>rt_touch_irq_disable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, touch.o(i.rt_touch_irq_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_touch_irq_disable &rArr; rt_pin_irq_enable &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_touch_control
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_touch_close
</UL>

<P><STRONG><a name="[988]"></a>rt_touch_irq_enable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, touch.o(i.rt_touch_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_touch_irq_enable &rArr; rt_pin_irq_enable &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_touch_control
</UL>

<P><STRONG><a name="[989]"></a>rt_touch_irq_init</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, touch.o(i.rt_touch_irq_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_touch_irq_init &rArr; rt_pin_attach_irq &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_irq_enable
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_attach_irq
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_touch_open
</UL>

<P><STRONG><a name="[11c]"></a>rt_touch_open</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, touch.o(i.rt_touch_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_touch_open &rArr; rt_touch_irq_init &rArr; rt_pin_attach_irq &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_touch_irq_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(i.rt_hw_touch_register)
</UL>
<P><STRONG><a name="[11e]"></a>rt_touch_read</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, touch.o(i.rt_touch_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_touch_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(i.rt_hw_touch_register)
</UL>
<P><STRONG><a name="[135]"></a>touch_irq_callback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, touch.o(i.touch_irq_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = touch_irq_callback &rArr; rt_hw_touch_isr &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_touch_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch.o(i.rt_touch_irq_init)
</UL>
<P><STRONG><a name="[10]"></a>gt917s_control</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, gt917s.o(i.gt917s_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = gt917s_control &rArr; gt917s_get_info &rArr; gt917s_read_regs &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_write_reg
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_get_product_id
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_get_info
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt917s.o(.data)
</UL>
<P><STRONG><a name="[675]"></a>gt917s_get_info</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, gt917s.o(i.gt917s_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = gt917s_get_info &rArr; gt917s_read_regs &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_read_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_control
</UL>

<P><STRONG><a name="[674]"></a>gt917s_get_product_id</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, gt917s.o(i.gt917s_get_product_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = gt917s_get_product_id &rArr; gt917s_read_regs &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_read_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_control
</UL>

<P><STRONG><a name="[f]"></a>gt917s_read_point</STRONG> (Thumb, 416 bytes, Stack size 104 bytes, gt917s.o(i.gt917s_read_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = gt917s_read_point &rArr; gt917s_read_regs &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_write_reg
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_touch_up
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_touch_down
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_read_regs
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt917s.o(.data)
</UL>
<P><STRONG><a name="[678]"></a>gt917s_read_regs</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, gt917s.o(i.gt917s_read_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = gt917s_read_regs &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_read_point
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_get_product_id
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_get_info
</UL>

<P><STRONG><a name="[67f]"></a>gt917s_soft_reset</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gt917s.o(i.gt917s_soft_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = gt917s_soft_reset &rArr; gt917s_write_reg &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_gt917s_init
</UL>

<P><STRONG><a name="[67a]"></a>gt917s_touch_down</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, gt917s.o(i.gt917s_touch_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gt917s_touch_down
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_read_point
</UL>

<P><STRONG><a name="[679]"></a>gt917s_touch_up</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, gt917s.o(i.gt917s_touch_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gt917s_touch_up
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_read_point
</UL>

<P><STRONG><a name="[676]"></a>gt917s_write_reg</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, gt917s.o(i.gt917s_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = gt917s_write_reg &rArr; rt_i2c_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_i2c_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_soft_reset
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_read_point
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt917s_control
</UL>

<P><STRONG><a name="[8b4]"></a>mmcsd_set_blksize</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, block_dev.o(i.mmcsd_set_blksize))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = mmcsd_set_blksize &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_unlock
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
</UL>

<P><STRONG><a name="[961]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, block_dev.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
</UL>

<P><STRONG><a name="[126]"></a>rt_mmcsd_close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, block_dev.o(i.rt_mmcsd_close))
<BR>[Address Reference Count : 1]<UL><LI> block_dev.o(i.rt_mmcsd_blk_probe)
</UL>
<P><STRONG><a name="[129]"></a>rt_mmcsd_control</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, block_dev.o(i.rt_mmcsd_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_mmcsd_control &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> block_dev.o(i.rt_mmcsd_blk_probe)
</UL>
<P><STRONG><a name="[124]"></a>rt_mmcsd_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, block_dev.o(i.rt_mmcsd_init))
<BR>[Address Reference Count : 1]<UL><LI> block_dev.o(i.rt_mmcsd_blk_probe)
</UL>
<P><STRONG><a name="[125]"></a>rt_mmcsd_open</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, block_dev.o(i.rt_mmcsd_open))
<BR>[Address Reference Count : 1]<UL><LI> block_dev.o(i.rt_mmcsd_blk_probe)
</UL>
<P><STRONG><a name="[127]"></a>rt_mmcsd_read</STRONG> (Thumb, 170 bytes, Stack size 64 bytes, block_dev.o(i.rt_mmcsd_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = rt_mmcsd_read &rArr; rt_mmcsd_req_blk &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> block_dev.o(i.rt_mmcsd_blk_probe)
</UL>
<P><STRONG><a name="[960]"></a>rt_mmcsd_req_blk</STRONG> (Thumb, 398 bytes, Stack size 192 bytes, block_dev.o(i.rt_mmcsd_req_blk))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = rt_mmcsd_req_blk &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_data_timeout
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_unlock
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_write
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_read
</UL>

<P><STRONG><a name="[128]"></a>rt_mmcsd_write</STRONG> (Thumb, 170 bytes, Stack size 64 bytes, block_dev.o(i.rt_mmcsd_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = rt_mmcsd_write &rArr; rt_mmcsd_req_blk &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> block_dev.o(i.rt_mmcsd_blk_probe)
</UL>
<P><STRONG><a name="[88d]"></a>GET_BITS</STRONG> (Thumb, 94 bytes, Stack size 28 bytes, mmc.o(i.GET_BITS))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GET_BITS
</UL>
<BR>[Called By]<UL><LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_parse_csd
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_bus_width
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_get_ext_csd
</UL>

<P><STRONG><a name="[88b]"></a>mmc_compare_ext_csds</STRONG> (Thumb, 430 bytes, Stack size 24 bytes, mmc.o(i.mmc_compare_ext_csds))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = mmc_compare_ext_csds &rArr; mmc_get_ext_csd &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_get_ext_csd
</UL>
<BR>[Called By]<UL><LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_bus_width
</UL>

<P><STRONG><a name="[88c]"></a>mmc_get_ext_csd</STRONG> (Thumb, 178 bytes, Stack size 112 bytes, mmc.o(i.mmc_get_ext_csd))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = mmc_get_ext_csd &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_BITS
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_compare_ext_csds
</UL>

<P><STRONG><a name="[88f]"></a>mmc_parse_ext_csd</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, mmc.o(i.mmc_parse_ext_csd))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = mmc_parse_ext_csd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>

<P><STRONG><a name="[890]"></a>mmc_select_bus_width</STRONG> (Thumb, 290 bytes, Stack size 56 bytes, mmc.o(i.mmc_select_bus_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = mmc_select_bus_width &rArr; mmc_compare_ext_csds &rArr; mmc_get_ext_csd &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_bus_width
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_delay_ms
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_switch
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_compare_ext_csds
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_BITS
</UL>
<BR>[Called By]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>

<P><STRONG><a name="[895]"></a>mmc_set_card_addr</STRONG> (Thumb, 54 bytes, Stack size 64 bytes, mmc.o(i.mmc_set_card_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = mmc_set_card_addr &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>

<P><STRONG><a name="[891]"></a>mmc_switch</STRONG> (Thumb, 78 bytes, Stack size 72 bytes, mmc.o(i.mmc_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = mmc_switch &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_bus_width
</UL>

<P><STRONG><a name="[893]"></a>mmcsd_delay_ms</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mmc.o(i.mmcsd_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = mmcsd_delay_ms &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_op_cond
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_bus_width
</UL>

<P><STRONG><a name="[6e5]"></a>mmcsd_mmc_init_card</STRONG> (Thumb, 374 bytes, Stack size 48 bytes, mmc.o(i.mmcsd_mmc_init_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = mmcsd_mmc_init_card &rArr; mmc_select_bus_width &rArr; mmc_compare_ext_csds &rArr; mmc_get_ext_csd &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_use_crc
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_clock
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_bus_mode
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_card
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_go_idle
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_all_get_cid
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_op_cond
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_parse_csd
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_card_addr
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_bus_width
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_parse_ext_csd
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_get_ext_csd
</UL>
<BR>[Called By]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
</UL>

<P><STRONG><a name="[8aa]"></a>mmcsd_parse_csd</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, mmc.o(i.mmcsd_parse_csd))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = mmcsd_parse_csd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_BITS
</UL>
<BR>[Called By]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>

<P><STRONG><a name="[8b1]"></a>__rt_fls</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, mmcsd_core.o(i.__rt_fls))
<BR><BR>[Called By]<UL><LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_power_up
</UL>

<P><STRONG><a name="[3d3]"></a>_mmcsd_select_card</STRONG> (Thumb, 66 bytes, Stack size 64 bytes, mmcsd_core.o(i._mmcsd_select_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = _mmcsd_select_card &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_card
</UL>

<P><STRONG><a name="[89c]"></a>mmcsd_delay_ms</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mmcsd_core.o(i.mmcsd_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = mmcsd_delay_ms &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_power_up
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_go_idle
</UL>

<P><STRONG><a name="[8a0]"></a>mmcsd_power_off</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mmcsd_core.o(i.mmcsd_power_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mmcsd_power_off &rArr; mmcsd_set_iocfg
</UL>
<BR>[Calls]<UL><LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_iocfg
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[89d]"></a>mmcsd_power_up</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, mmcsd_core.o(i.mmcsd_power_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = mmcsd_power_up &rArr; mmcsd_delay_ms &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_iocfg
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_delay_ms
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fls
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[8b0]"></a>mmcsd_set_iocfg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mmcsd_core.o(i.mmcsd_set_iocfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mmcsd_set_iocfg
</UL>
<BR>[Called By]<UL><LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_chip_select
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_power_up
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_power_off
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_clock
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_bus_width
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_bus_mode
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_voltage
</UL>

<P><STRONG><a name="[8ae]"></a>GET_BITS</STRONG> (Thumb, 94 bytes, Stack size 28 bytes, sd.o(i.GET_BITS))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GET_BITS
</UL>
<BR>[Called By]<UL><LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_parse_scr
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_parse_csd
</UL>

<P><STRONG><a name="[898]"></a>mmcsd_app_cmd</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, sd.o(i.mmcsd_app_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = mmcsd_app_cmd &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_cmd
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_scr
</UL>

<P><STRONG><a name="[8ad]"></a>mmcsd_parse_csd</STRONG> (Thumb, 612 bytes, Stack size 16 bytes, sd.o(i.mmcsd_parse_csd))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = mmcsd_parse_csd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_BITS
</UL>
<BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
</UL>

<P><STRONG><a name="[8af]"></a>mmcsd_parse_scr</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, sd.o(i.mmcsd_parse_scr))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mmcsd_parse_scr &rArr; GET_BITS
</UL>
<BR>[Calls]<UL><LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_BITS
</UL>
<BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
</UL>

<P><STRONG><a name="[6ec]"></a>mmcsd_sd_init_card</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, sd.o(i.mmcsd_sd_init_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = mmcsd_sd_init_card &rArr; mmcsd_get_scr &rArr; mmcsd_app_cmd &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_scr
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_card_addr
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_app_set_bus_width
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_switch
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_parse_scr
<LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_parse_csd
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_if_cond
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_op_cond
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_use_crc
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_clock
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_bus_width
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_bus_mode
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_card
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_go_idle
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_all_get_cid
</UL>
<BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
</UL>

<P><STRONG><a name="[8b3]"></a>mmcsd_switch</STRONG> (Thumb, 334 bytes, Stack size 120 bytes, sd.o(i.mmcsd_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = mmcsd_switch &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_data_timeout
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
</UL>

<P><STRONG><a name="[9aa]"></a>cistpl_funce_func</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sdio.o(i.cistpl_funce_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cistpl_funce_func
</UL>
<BR>[Called By]<UL><LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
</UL>

<P><STRONG><a name="[9ab]"></a>cistpl_funce_func0</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, sdio.o(i.cistpl_funce_func0))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cistpl_funce_func0
</UL>
<BR>[Called By]<UL><LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
</UL>

<P><STRONG><a name="[9ac]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdio.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_register_card
</UL>

<P><STRONG><a name="[9ad]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sdio.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_register_card
</UL>

<P><STRONG><a name="[6ee]"></a>sdio_init_card</STRONG> (Thumb, 528 bytes, Stack size 32 bytes, sdio.o(i.sdio_init_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = sdio_init_card &rArr; sdio_initialize_function &rArr; sdio_read_cis &rArr; sdio_io_readb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_card_addr
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_send_op_cond
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_use_crc
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_clock
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_bus_mode
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_card
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_free_cis
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_highspeed
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_bus_wide
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_register_card
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cccr
<LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
</UL>
<BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdio
</UL>

<P><STRONG><a name="[9a4]"></a>sdio_initialize_function</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, sdio.o(i.sdio_initialize_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = sdio_initialize_function &rArr; sdio_read_cis &rArr; sdio_io_readb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_free_cis
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_fbr
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
</UL>
<BR>[Called By]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[9ae]"></a>sdio_match_card</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, sdio.o(i.sdio_match_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sdio_match_card
</UL>
<BR>[Called By]<UL><LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_register_card
</UL>

<P><STRONG><a name="[9a0]"></a>sdio_read_cccr</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, sdio.o(i.sdio_read_cccr))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = sdio_read_cccr &rArr; sdio_io_readb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[9a1]"></a>sdio_read_cis</STRONG> (Thumb, 426 bytes, Stack size 48 bytes, sdio.o(i.sdio_read_cis))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = sdio_read_cis &rArr; sdio_io_readb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_readb
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cistpl_funce_func0
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cistpl_funce_func
</UL>
<BR>[Called By]<UL><LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[9a6]"></a>sdio_read_fbr</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, sdio.o(i.sdio_read_fbr))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = sdio_read_fbr &rArr; sdio_io_readb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
</UL>

<P><STRONG><a name="[9a5]"></a>sdio_register_card</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, sdio.o(i.sdio_register_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = sdio_register_card &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_match_card
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[9a3]"></a>sdio_set_bus_wide</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, sdio.o(i.sdio_set_bus_wide))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = sdio_set_bus_wide &rArr; sdio_io_writeb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_bus_width
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_writeb
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[9a2]"></a>sdio_set_highspeed</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, sdio.o(i.sdio_set_highspeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = sdio_set_highspeed &rArr; sdio_io_writeb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_writeb
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[19e]"></a>rti_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.1.end)
</UL>
<P><STRONG><a name="[19a]"></a>rti_board_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0.end)
</UL>
<P><STRONG><a name="[1b1]"></a>rti_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.6.end)
</UL>
<P><STRONG><a name="[199]"></a>rti_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0)
</UL>
<P><STRONG><a name="[134]"></a>rt_thread_idle_entry</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, idle.o(i.rt_thread_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_thread_idle_entry &rArr; rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(i.rt_thread_idle_init)
</UL>
<P><STRONG><a name="[953]"></a>rt_ipc_list_resume</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ipc.o(i.rt_ipc_list_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>

<P><STRONG><a name="[954]"></a>rt_ipc_list_resume_all</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ipc.o(i.rt_ipc_list_resume_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
</UL>

<P><STRONG><a name="[937]"></a>rt_ipc_list_suspend</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ipc.o(i.rt_ipc_list_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>

<P><STRONG><a name="[936]"></a>rt_ipc_object_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ipc.o(i.rt_ipc_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ipc_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
</UL>

<P><STRONG><a name="[956]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipc.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>

<P><STRONG><a name="[955]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[938]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipc.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>

<P><STRONG><a name="[98b]"></a>print_number</STRONG> (Thumb, 400 bytes, Stack size 60 bytes, kservice.o(i.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[98a]"></a>skip_atoi</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, kservice.o(i.skip_atoi))
<BR><BR>[Called By]<UL><LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[966]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, object.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[967]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[34b]"></a>_get_highest_priority_thread</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, scheduler.o(i._get_highest_priority_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_highest_priority_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[3dd]"></a>_rt_scheduler_stack_check</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, scheduler.o(i._rt_scheduler_stack_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[979]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
</UL>

<P><STRONG><a name="[3de]"></a>_rt_thread_init</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, thread.o(i._rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[3fd]"></a>_thread_cleanup_execute</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, thread.o(i._thread_cleanup_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _thread_cleanup_execute
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
</UL>

<P><STRONG><a name="[980]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, thread.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
</UL>

<P><STRONG><a name="[983]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, thread.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[3e1]"></a>_rt_timer_init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, timer.o(i._rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _rt_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
</UL>

<P><STRONG><a name="[3e3]"></a>_rt_timer_remove</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, timer.o(i._rt_timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[3e2]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>

<P><STRONG><a name="[985]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[986]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[3e4]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>

<P><STRONG><a name="[c2]"></a>blk_dev_control</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, fal_rtt.o(i.blk_dev_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = blk_dev_control &rArr; fal_partition_erase &rArr; fal_flash_device_find &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_rtt.o(i.fal_blk_device_create)
</UL>
<P><STRONG><a name="[c0]"></a>blk_dev_read</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fal_rtt.o(i.blk_dev_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = blk_dev_read &rArr; fal_partition_read &rArr; fal_flash_device_find &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_rtt.o(i.fal_blk_device_create)
</UL>
<P><STRONG><a name="[c1]"></a>blk_dev_write</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, fal_rtt.o(i.blk_dev_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = blk_dev_write &rArr; fal_partition_write &rArr; fal_flash_device_find &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_rtt.o(i.fal_blk_device_create)
</UL>
<P><STRONG><a name="[16d]"></a>char_dev_fopen</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, fal_rtt.o(i.char_dev_fopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = char_dev_fopen &rArr; fal_partition_erase_all &rArr; fal_partition_erase &rArr; fal_flash_device_find &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase_all
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[16e]"></a>char_dev_fread</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, fal_rtt.o(i.char_dev_fread))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = char_dev_fread &rArr; fal_partition_read &rArr; fal_flash_device_find &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[16f]"></a>char_dev_fwrite</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, fal_rtt.o(i.char_dev_fwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = char_dev_fwrite &rArr; fal_partition_write &rArr; fal_flash_device_find &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[1ba]"></a>fal</STRONG> (Thumb, 2092 bytes, Stack size 96 bytes, fal_rtt.o(i.fal))
<BR><BR>[Stack]<UL><LI>Max Depth = 404 + Unknown Stack Size
<LI>Call Chain = fal &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init_check
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_show_part_table
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_rtt.o(FSymTab)
</UL>
<P><STRONG><a name="[1bc]"></a>clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(i.clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = clear &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[710]"></a>list_find_init</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, cmd.o(i.list_find_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = list_find_init
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
</UL>

<P><STRONG><a name="[712]"></a>list_get_next</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, cmd.o(i.list_get_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = list_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
</UL>

<P><STRONG><a name="[711]"></a>object_split</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmd.o(i.object_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
</UL>

<P><STRONG><a name="[713]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmd.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[714]"></a>rt_list_len</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cmd.o(i.rt_list_len))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[715]"></a>show_wait_queue</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cmd.o(i.show_wait_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[3d6]"></a>_msh_exec_cmd</STRONG> (Thumb, 136 bytes, Stack size 72 bytes, msh.o(i._msh_exec_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = _msh_exec_cmd &rArr; msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</UL>

<P><STRONG><a name="[3d7]"></a>msh_get_cmd</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, msh.o(i.msh_get_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = msh_get_cmd &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[3d8]"></a>msh_split</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, msh.o(i.msh_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[8b9]"></a>str_common</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, msh.o(i.str_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = str_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[48c]"></a>directory_delete_for_msh</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, msh_file.o(i.directory_delete_for_msh))
<BR><BR>[Stack]<UL><LI>Max Depth = 468 + In Cycle
<LI>Call Chain = directory_delete_for_msh &rArr;  directory_delete_for_msh (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
</UL>

<P><STRONG><a name="[8bd]"></a>msh_readline</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, msh_file.o(i.msh_readline))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = msh_readline &rArr; read &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>
<BR>[Called By]<UL><LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
</UL>

<P><STRONG><a name="[629]"></a>finsh_getchar</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, shell.o(i.finsh_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = finsh_getchar &rArr; getc &rArr; fgetc &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[62e]"></a>shell_auto_complete</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, shell.o(i.shell_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = shell_auto_complete &rArr; msh_auto_complete &rArr; msh_auto_complete_path &rArr; opendir &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_is_used
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[62d]"></a>shell_handle_history</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, shell.o(i.shell_handle_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = shell_handle_history &rArr; finsh_get_prompt &rArr; getcwd &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[630]"></a>shell_push_history</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, shell.o(i.shell_push_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = shell_push_history &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[1d7]"></a>i2c(int, char**)</STRONG> (Thumb, 282 bytes, Stack size 88 bytes, i2c_tools.o(i._Z3i2ciPPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = i2c(int, char**) &rArr; i2c_scan() &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write(char, unsigned char*, int)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtonum(const char*)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_scan()
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read(unsigned char, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init(int, int)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_help()
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_tools.o(FSymTab)
</UL>
<P><STRONG><a name="[613]"></a>fd_alloc</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, dfs.o(i.fd_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
</UL>

<P><STRONG><a name="[34d]"></a>_get_path_lastname</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfs_file.o(i._get_path_lastname))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_path_lastname
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>

<P><STRONG><a name="[4b6]"></a>copydir</STRONG> (Thumb, 246 bytes, Stack size 384 bytes, dfs_file.o(i.copydir))
<BR><BR>[Stack]<UL><LI>Max Depth = 844 + In Cycle
<LI>Call Chain = copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[4b5]"></a>copyfile</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, dfs_file.o(i.copyfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = copyfile &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_write
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[a3]"></a>__wqueue_pollwake</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, poll.o(i.__wqueue_pollwake))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __wqueue_pollwake
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wqueue_default_wake
</UL>
<BR>[Address Reference Count : 1]<UL><LI> poll.o(i._poll_add)
</UL>
<P><STRONG><a name="[10e]"></a>_poll_add</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, poll.o(i._poll_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = _poll_add &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_add
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> poll.o(i.poll_table_init)
</UL>
<P><STRONG><a name="[57f]"></a>do_pollfd</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, poll.o(i.do_pollfd))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = do_pollfd &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_do
</UL>

<P><STRONG><a name="[909]"></a>poll_do</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, poll.o(i.poll_do))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = poll_do &rArr; do_pollfd &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_wait_timeout
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_pollfd
</UL>
<BR>[Called By]<UL><LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
</UL>

<P><STRONG><a name="[908]"></a>poll_table_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, poll.o(i.poll_table_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = poll_table_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
</UL>

<P><STRONG><a name="[90a]"></a>poll_teardown</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, poll.o(i.poll_teardown))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = poll_teardown &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_wqueue_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll
</UL>

<P><STRONG><a name="[90b]"></a>poll_wait_timeout</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, poll.o(i.poll_wait_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = poll_wait_timeout &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_do
</UL>

<P><STRONG><a name="[176]"></a>dfs_device_fs_poll</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, devfs.o(i.dfs_device_fs_poll))
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[508]"></a>elm_result_to_dfs</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, dfs_elm.o(i.elm_result_to_dfs))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_write
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_read
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_ioctl
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_flush
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
</UL>

<P><STRONG><a name="[50e]"></a>get_disk</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dfs_elm.o(i.get_disk))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</UL>

<P><STRONG><a name="[477]"></a>check_fs</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[4c2]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[5fb]"></a>clmt_clust</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, ff.o(i.clmt_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[532]"></a>clst2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clst2sect))
<BR><BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[48d]"></a>cmp_lfn</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cmp_lfn &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[4bb]"></a>create_chain</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[4c0]"></a>create_name</STRONG> (Thumb, 582 bytes, Stack size 56 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = create_name &rArr; tchar2uni &rArr; ff_oem2uni
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_uni2oem
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[4c5]"></a>create_partition</STRONG> (Thumb, 348 bytes, Stack size 72 bytes, ff.o(i.create_partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = create_partition &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[649]"></a>dbc_1st</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.dbc_1st))
<BR><BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
</UL>

<P><STRONG><a name="[9cd]"></a>dbc_2nd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.dbc_2nd))
<BR><BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
</UL>

<P><STRONG><a name="[52d]"></a>dir_alloc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[530]"></a>dir_clear</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, ff.o(i.dir_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[535]"></a>dir_find</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[52f]"></a>dir_next</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[537]"></a>dir_read</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = dir_read &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[539]"></a>dir_register</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[53d]"></a>dir_remove</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(i.dir_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = dir_remove &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[52e]"></a>dir_sdi</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[624]"></a>find_volume</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[5fc]"></a>follow_path</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[53b]"></a>gen_numname</STRONG> (Thumb, 198 bytes, Stack size 64 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[4bc]"></a>get_fat</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[606]"></a>get_fileinfo</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, ff.o(i.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_fileinfo &rArr; put_utf &rArr; ff_uni2oem
</UL>
<BR>[Calls]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_utf
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[601]"></a>get_ldnumber</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[605]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[5fa]"></a>ld_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[479]"></a>ld_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[72a]"></a>lock_fs</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ff.o(i.lock_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[47a]"></a>mem_cmp</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[53a]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[4c3]"></a>mem_set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[5f9]"></a>mount_volume</STRONG> (Thumb, 750 bytes, Stack size 64 bytes, ff.o(i.mount_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = mount_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[478]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[538]"></a>pick_lfn</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, ff.o(i.pick_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pick_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[4bd]"></a>put_fat</STRONG> (Thumb, 400 bytes, Stack size 40 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[53c]"></a>put_lfn</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ff.o(i.put_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = put_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[65f]"></a>put_utf</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ff.o(i.put_utf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = put_utf &rArr; ff_uni2oem
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_uni2oem
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>

<P><STRONG><a name="[600]"></a>remove_chain</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[5fe]"></a>st_clust</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ff.o(i.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[4c7]"></a>st_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[4c8]"></a>st_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[536]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(i.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[5ff]"></a>sync_fs</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[531]"></a>sync_window</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[4c1]"></a>tchar2uni</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ff.o(i.tchar2uni))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tchar2uni &rArr; ff_oem2uni
</UL>
<BR>[Calls]<UL><LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_oem2uni
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_2nd
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[5f7]"></a>unlock_fs</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ff.o(i.unlock_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[5f6]"></a>validate</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[885]"></a>prvHeapInit</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, mem_sandbox.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_sandbox_malloc
</UL>

<P><STRONG><a name="[883]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, mem_sandbox.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_sandbox_malloc
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_sandbox_free
</UL>

<P><STRONG><a name="[8f8]"></a>optparse_argtype</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, optparse.o(i.optparse_argtype))
<BR><BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optparse
</UL>

<P><STRONG><a name="[8f5]"></a>optparse_is_dashdash</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, optparse.o(i.optparse_is_dashdash))
<BR><BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optparse
</UL>

<P><STRONG><a name="[8f6]"></a>optparse_is_shortopt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, optparse.o(i.optparse_is_shortopt))
<BR><BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optparse
</UL>

<P><STRONG><a name="[8f7]"></a>optparse_permute</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, optparse.o(i.optparse_permute))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = optparse_permute
</UL>
<BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optparse
</UL>

<P><STRONG><a name="[2f9]"></a>Hit_Return</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, vi.o(i.Hit_Return))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = Hit_Return &rArr; redraw &rArr;  show_status_line (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write1
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standout_start
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standout_end
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redraw
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_one_char
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_status_line
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
</UL>

<P><STRONG><a name="[623]"></a>at_eof</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, vi.o(i.at_eof))
<BR><BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_range
</UL>

<P><STRONG><a name="[448]"></a>begin_line</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, vi.o(i.begin_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = begin_line &rArr; memrchr
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_cursor
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prev_line
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_col
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_one_address
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_column
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_range
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_file
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_scroll
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_begin
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dollar_line
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[44d]"></a>bound_dot</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, vi.o(i.bound_dot))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + Unknown Stack Size
<LI>Call Chain = bound_dot &rArr; indicate_error &rArr; flash &rArr; redraw &rArr;  show_status_line (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_error
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
</UL>

<P><STRONG><a name="[9b9]"></a>bufsum</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, vi.o(i.bufsum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bufsum
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_status_line
</UL>

<P><STRONG><a name="[45a]"></a>char_insert</STRONG> (Thumb, 722 bytes, Stack size 56 bytes, vi.o(i.char_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + Unknown Stack Size
<LI>Call Chain = char_insert &rArr; showmatching &rArr; indicate_error &rArr; flash &rArr; redraw &rArr;  show_status_line (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_queue_commit
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_push_insert
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_hole_make
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_hole_delete
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stupid_insert
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showmatching
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prev_tabstop
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prev_line
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_tabstop
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indent_len
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_one_char
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_column
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_line
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_cmd_q
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_line
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_text_buffer
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
</UL>

<P><STRONG><a name="[46b]"></a>char_search</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, vi.o(i.char_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = char_search &rArr; mycmp &rArr; strncasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prev_line
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_line
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mycmp
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_one_address
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
</UL>

<P><STRONG><a name="[476]"></a>check_context</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, vi.o(i.check_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_context
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
</UL>

<P><STRONG><a name="[482]"></a>clear_to_eol</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, vi.o(i.clear_to_eol))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = clear_to_eol &rArr; write1 &rArr; fputs &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write1
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_bottom_and_clear_to_eol
</UL>

<P><STRONG><a name="[48f]"></a>colon</STRONG> (Thumb, 3010 bytes, Stack size 264 bytes, vi.o(i.colon))
<BR><BR>[Stack]<UL><LI>Max Depth = 924 + Unknown Stack Size
<LI>Call Chain = colon &rArr; init_text_buffer &rArr; char_insert &rArr; showmatching &rArr; indicate_error &rArr; flash &rArr; redraw &rArr;  show_status_line (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_free
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_whitespace
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_non_whitespace
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isblank
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yank_delete
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write1
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;what_reg
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_filename
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_yank
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_hole_delete
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_insert
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_line_bold_errno
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_line_bold
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_line
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standout_start
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standout_end
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_help
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setops
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawmode
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;not_implemented
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_line
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_text_buffer
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_filename
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_bottom_and_clear_to_eol
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_address
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_line
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_insert
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_args
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_line
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_skip_over_ws
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_lines
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cookmode
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_search
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bound_dot
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_line
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hit_Return
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_file
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
</UL>

<P><STRONG><a name="[49f]"></a>cookmode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, vi.o(i.cookmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = cookmode &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcsetattr_stdin_TCSANOW
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readit
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_file
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
</UL>

<P><STRONG><a name="[490]"></a>count_lines</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, vi.o(i.count_lines))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = count_lines &rArr; end_line
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_line
</UL>
<BR>[Called By]<UL><LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_cursor
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_one_address
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_address
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_edit_status
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
</UL>

<P><STRONG><a name="[563]"></a>do_cmd</STRONG> (Thumb, 6106 bytes, Stack size 88 bytes, vi.o(i.do_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1012 + Unknown Stack Size
<LI>Call Chain = do_cmd &rArr; colon &rArr; init_text_buffer &rArr; char_insert &rArr; showmatching &rArr; indicate_error &rArr; flash &rArr; redraw &rArr;  show_status_line (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xasprintf
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_strdup
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_free
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isblank
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yank_status
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yank_delete
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;what_reg
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_queue_commit
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_push
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_pop
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_hole_delete
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_context
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_insert
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_line_bold
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_thing
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_status_line
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redraw
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prev_line
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;not_implemented
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_line
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_col
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_error
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_one_char
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input_line
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_range
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_pair
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_line
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_screen
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_line
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_cmd_q
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_to_char
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_skip_over_ws
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_scroll
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_right
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_prev
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_next
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_left
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_end
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_begin
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dollar_line
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_lines
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_context
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_search
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bound_dot
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_line
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_range
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_file
</UL>

<P><STRONG><a name="[576]"></a>dollar_line</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, vi.o(i.dollar_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dollar_line &rArr; begin_line &rArr; memrchr
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_line
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_line
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
</UL>

<P><STRONG><a name="[569]"></a>dot_begin</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, vi.o(i.dot_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dot_begin &rArr; undo_queue_commit &rArr;  undo_push (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_queue_commit
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_line
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
</UL>

<P><STRONG><a name="[574]"></a>dot_end</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, vi.o(i.dot_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dot_end &rArr; undo_queue_commit &rArr;  undo_push (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_queue_commit
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_line
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
</UL>

<P><STRONG><a name="[566]"></a>dot_left</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, vi.o(i.dot_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dot_left &rArr; undo_queue_commit &rArr;  undo_push (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_queue_commit
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_to_char
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
</UL>

<P><STRONG><a name="[56b]"></a>dot_next</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, vi.o(i.dot_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dot_next &rArr; undo_queue_commit &rArr;  undo_push (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_queue_commit
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_line
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
</UL>

<P><STRONG><a name="[579]"></a>dot_prev</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, vi.o(i.dot_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dot_prev &rArr; prev_line &rArr; begin_line &rArr; memrchr
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_queue_commit
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prev_line
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
</UL>

<P><STRONG><a name="[568]"></a>dot_right</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, vi.o(i.dot_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dot_right &rArr; undo_queue_commit &rArr;  undo_push (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_queue_commit
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_to_char
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
</UL>

<P><STRONG><a name="[565]"></a>dot_scroll</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, vi.o(i.dot_scroll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dot_scroll &rArr; end_screen &rArr; next_line &rArr; end_line
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_queue_commit
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prev_line
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_line
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_screen
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_skip_over_ws
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_line
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
</UL>

<P><STRONG><a name="[496]"></a>dot_skip_over_ws</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, vi.o(i.dot_skip_over_ws))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dot_skip_over_ws &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_scroll
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
</UL>

<P><STRONG><a name="[56f]"></a>dot_to_char</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, vi.o(i.dot_to_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + Unknown Stack Size
<LI>Call Chain = dot_to_char &rArr; indicate_error &rArr; flash &rArr; redraw &rArr;  show_status_line (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_error
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_right
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_left
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
</UL>

<P><STRONG><a name="[5a5]"></a>edit_file</STRONG> (Thumb, 566 bytes, Stack size 24 bytes, vi.o(i.edit_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 1036 + Unknown Stack Size
<LI>Call Chain = edit_file &rArr; do_cmd &rArr; colon &rArr; init_text_buffer &rArr; char_insert &rArr; showmatching &rArr; indicate_error &rArr; flash &rArr; redraw &rArr;  show_status_line (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_free
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write1
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_yank
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_new_cmd_q
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_status_line
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redraw
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawmode
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_screen_dimensions
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_screen
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysleep
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_text_buffer
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_bottom_and_clear_to_eol
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_one_char
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_line
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cookmode
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_line
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_main
</UL>

<P><STRONG><a name="[45f]"></a>end_cmd_q</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, vi.o(i.end_cmd_q))
<BR><BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[464]"></a>end_line</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, vi.o(i.end_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = end_line
</UL>
<BR>[Calls]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
</UL>
<BR>[Called By]<UL><LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_cursor
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_line
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_screen
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_file
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_end
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dollar_line
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_lines
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[578]"></a>end_screen</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, vi.o(i.end_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = end_screen &rArr; next_line &rArr; end_line
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_line
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_line
</UL>
<BR>[Called By]<UL><LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_cursor
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_scroll
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
</UL>

<P><STRONG><a name="[49a]"></a>expand_args</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, vi.o(i.expand_args))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = expand_args &rArr; xasprintf &rArr; vasprintf &rArr; vi_strdup &rArr; mem_sandbox_strdup &rArr; mem_sandbox_malloc &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xasprintf
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_strdup
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_free
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_line_bold
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
</UL>

<P><STRONG><a name="[4a3]"></a>file_insert</STRONG> (Thumb, 282 bytes, Stack size 96 bytes, vi.o(i.file_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + Unknown Stack Size
<LI>Call Chain = file_insert &rArr; access &rArr; stat &rArr; dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_read
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_push_insert
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_hole_make
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_hole_delete
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_line_bold_errno
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_line_bold
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_text_buffer
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
</UL>

<P><STRONG><a name="[4a8]"></a>file_write</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, vi.o(i.file_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = file_write &rArr; open &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_write
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_line_bold
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
</UL>

<P><STRONG><a name="[495]"></a>find_line</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, vi.o(i.find_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = find_line &rArr; next_line &rArr; end_line
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_line
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_address
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
</UL>

<P><STRONG><a name="[56e]"></a>find_pair</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, vi.o(i.find_pair))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = find_pair
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showmatching
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
</UL>

<P><STRONG><a name="[573]"></a>find_range</STRONG> (Thumb, 588 bytes, Stack size 40 bytes, vi.o(i.find_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = find_range &rArr;  do_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_error
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_motion_char
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_line
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_eof
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
</UL>

<P><STRONG><a name="[632]"></a>flash</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, vi.o(i.flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = flash &rArr; redraw &rArr;  show_status_line (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standout_start
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standout_end
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redraw
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysleep
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_error
</UL>

<P><STRONG><a name="[633]"></a>flush_undo_data</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, vi.o(i.flush_undo_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = flush_undo_data &rArr; vi_free &rArr; mem_sandbox_free &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_text_buffer
</UL>

<P><STRONG><a name="[639]"></a>format_edit_status</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, vi.o(i.format_edit_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = format_edit_status &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_lines
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_status_line
</UL>

<P><STRONG><a name="[63a]"></a>format_line</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, vi.o(i.format_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = format_line &rArr; rt_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh
</UL>

<P><STRONG><a name="[491]"></a>get_address</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, vi.o(i.get_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = get_address &rArr; get_one_address &rArr; vi_strndup &rArr; mem_sandbox_strndup &rArr; mem_sandbox_malloc &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isblank
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_one_address
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_line
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_lines
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
</UL>

<P><STRONG><a name="[461]"></a>get_column</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, vi.o(i.get_column))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_column &rArr; next_column
</UL>
<BR>[Calls]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_column
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_line
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[571]"></a>get_input_line</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, vi.o(i.get_input_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = get_input_line &rArr; refresh &rArr; query_screen_dimensions &rArr; get_terminal_width_height &rArr; isatty &rArr; tcgetattr &rArr; ioctl &rArr; fcntl &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write1
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_bottom_and_clear_to_eol
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_one_char
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
</UL>

<P><STRONG><a name="[622]"></a>get_motion_char</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, vi.o(i.get_motion_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = get_motion_char &rArr; get_one_char &rArr; readit &rArr; read_key &rArr; safe_poll &rArr; poll &rArr; poll_do &rArr; do_pollfd &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_one_char
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_range
</UL>

<P><STRONG><a name="[659]"></a>get_one_address</STRONG> (Thumb, 458 bytes, Stack size 48 bytes, vi.o(i.get_one_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = get_one_address &rArr; vi_strndup &rArr; mem_sandbox_strndup &rArr; mem_sandbox_malloc &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_strndup
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_free
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchrnul
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isblank
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_line
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_lines
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_search
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_line
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_address
</UL>

<P><STRONG><a name="[2fd]"></a>get_one_char</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, vi.o(i.get_one_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 500 + Unknown Stack Size
<LI>Call Chain = get_one_char &rArr; readit &rArr; read_key &rArr; safe_poll &rArr; poll &rArr; poll_do &rArr; do_pollfd &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_free
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readit
</UL>
<BR>[Called By]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_motion_char
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input_line
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_file
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hit_Return
</UL>

<P><STRONG><a name="[49e]"></a>go_bottom_and_clear_to_eol</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, vi.o(i.go_bottom_and_clear_to_eol))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = go_bottom_and_clear_to_eol &rArr; place_cursor &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;place_cursor
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_to_eol
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_status_line
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readit
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input_line
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_file
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
</UL>

<P><STRONG><a name="[460]"></a>indent_len</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, vi.o(i.indent_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = indent_len
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isblank
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[44e]"></a>indicate_error</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, vi.o(i.indicate_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 572 + Unknown Stack Size
<LI>Call Chain = indicate_error &rArr; flash &rArr; redraw &rArr;  show_status_line (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write1
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showmatching
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_range
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_to_char
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bound_dot
</UL>

<P><STRONG><a name="[4a2]"></a>init_filename</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, vi.o(i.init_filename))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = init_filename &rArr; vi_strdup &rArr; mem_sandbox_strdup &rArr; mem_sandbox_malloc &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_strdup
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
</UL>

<P><STRONG><a name="[49b]"></a>init_text_buffer</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, vi.o(i.init_text_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 660 + Unknown Stack Size
<LI>Call Chain = init_text_buffer &rArr; char_insert &rArr; showmatching &rArr; indicate_error &rArr; flash &rArr; redraw &rArr;  show_status_line (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_zalloc
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_free
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_filename
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_undo_data
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_insert
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_file
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
</UL>

<P><STRONG><a name="[567]"></a>move_to_col</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, vi.o(i.move_to_col))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = move_to_col &rArr; next_column
</UL>
<BR>[Calls]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_column
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_line
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
</UL>

<P><STRONG><a name="[46e]"></a>mycmp</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, vi.o(i.mycmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mycmp &rArr; strncasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_search
</UL>

<P><STRONG><a name="[5aa]"></a>mysleep</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, vi.o(i.mysleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 468 + Unknown Stack Size
<LI>Call Chain = mysleep &rArr; fflush &rArr; _do_fflush &rArr; _fseek &rArr; _sys_flen &rArr; fstat &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_poll
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showmatching
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_file
</UL>

<P><STRONG><a name="[5a8]"></a>new_screen</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, vi.o(i.new_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = new_screen &rArr; vi_malloc &rArr; mem_sandbox_malloc &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_malloc
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_free
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_file
</UL>

<P><STRONG><a name="[65b]"></a>next_column</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, vi.o(i.next_column))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = next_column
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_tabstop
</UL>
<BR>[Called By]<UL><LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_cursor
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_col
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_column
</UL>

<P><STRONG><a name="[46d]"></a>next_line</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, vi.o(i.next_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = next_line &rArr; end_line
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_line
</UL>
<BR>[Called By]<UL><LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_cursor
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_one_address
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_line
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_screen
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_scroll
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_next
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_search
</UL>

<P><STRONG><a name="[465]"></a>next_tabstop</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, vi.o(i.next_tabstop))
<BR><BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_column
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[4ac]"></a>not_implemented</STRONG> (Thumb, 26 bytes, Stack size 136 bytes, vi.o(i.not_implemented))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = not_implemented &rArr; status_line_bold &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_line_bold
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_literal
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
</UL>

<P><STRONG><a name="[672]"></a>place_cursor</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, vi.o(i.place_cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = place_cursor &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write1
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_status_line
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_bottom_and_clear_to_eol
</UL>

<P><STRONG><a name="[468]"></a>prev_line</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, vi.o(i.prev_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prev_line &rArr; begin_line &rArr; memrchr
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_line
</UL>
<BR>[Called By]<UL><LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_cursor
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_scroll
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_prev
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_search
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[463]"></a>prev_tabstop</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, vi.o(i.prev_tabstop))
<BR><BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[8f1]"></a>print_literal</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, vi.o(i.print_literal))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = print_literal &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;not_implemented
</UL>

<P><STRONG><a name="[5a6]"></a>query_screen_dimensions</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, vi.o(i.query_screen_dimensions))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = query_screen_dimensions &rArr; get_terminal_width_height &rArr; isatty &rArr; tcgetattr &rArr; ioctl &rArr; fcntl &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_terminal_width_height
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_file
</UL>

<P><STRONG><a name="[4a1]"></a>rawmode</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, vi.o(i.rawmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = rawmode &rArr; set_termios_to_raw &rArr; get_termios_and_make_raw &rArr; tcgetattr &rArr; ioctl &rArr; fcntl &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_termios_to_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_file
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
</UL>

<P><STRONG><a name="[666]"></a>readit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, vi.o(i.readit))
<BR><BR>[Stack]<UL><LI>Max Depth = 492 + Unknown Stack Size
<LI>Call Chain = readit &rArr; read_key &rArr; safe_poll &rArr; poll &rArr; poll_do &rArr; do_pollfd &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_bottom_and_clear_to_eol
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cookmode
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_one_char
</UL>

<P><STRONG><a name="[2fe]"></a>redraw</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, vi.o(i.redraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = redraw &rArr;  show_status_line (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write1
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_status_line
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_erase
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_file
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hit_Return
</UL>

<P><STRONG><a name="[45c]"></a>refresh</STRONG> (Thumb, 440 bytes, Stack size 40 bytes, vi.o(i.refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = refresh &rArr; query_screen_dimensions &rArr; get_terminal_width_height &rArr; isatty &rArr; tcgetattr &rArr; ioctl &rArr; fcntl &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_cursor
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_screen_dimensions
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;place_cursor
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_screen
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_line
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_pop
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showmatching
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redraw
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input_line
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_file
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[8f0]"></a>screen_erase</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, vi.o(i.screen_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = screen_erase &rArr; rt_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redraw
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_screen
</UL>

<P><STRONG><a name="[4a5]"></a>setops</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, vi.o(i.setops))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = setops &rArr; status_line_bold &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_in_strings
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_line_bold
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
</UL>

<P><STRONG><a name="[4a0]"></a>show_help</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, vi.o(i.show_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = show_help &rArr; puts &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_main
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
</UL>

<P><STRONG><a name="[564]"></a>show_status_line</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, vi.o(i.show_status_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 580 + Unknown Stack Size
<LI>Call Chain = show_status_line &rArr; Hit_Return &rArr; redraw &rArr;  show_status_line (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write1
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;place_cursor
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_bottom_and_clear_to_eol
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_edit_status
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bufsum
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hit_Return
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redraw
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_file
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
</UL>

<P><STRONG><a name="[467]"></a>showmatching</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, vi.o(i.showmatching))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + Unknown Stack Size
<LI>Call Chain = showmatching &rArr; indicate_error &rArr; flash &rArr; redraw &rArr;  show_status_line (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mysleep
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_error
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_pair
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[575]"></a>skip_thing</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, vi.o(i.skip_thing))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = skip_thing &rArr; st_test &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_test
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
</UL>

<P><STRONG><a name="[9ba]"></a>st_test</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, vi.o(i.st_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = st_test &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_thing
</UL>

<P><STRONG><a name="[2fc]"></a>standout_end</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, vi.o(i.standout_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = standout_end &rArr; write1 &rArr; fputs &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write1
</UL>
<BR>[Called By]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hit_Return
</UL>

<P><STRONG><a name="[2fa]"></a>standout_start</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, vi.o(i.standout_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = standout_start &rArr; write1 &rArr; fputs &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write1
</UL>
<BR>[Called By]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hit_Return
</UL>

<P><STRONG><a name="[5a9]"></a>start_new_cmd_q</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, vi.o(i.start_new_cmd_q))
<BR><BR>[Called By]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_file
</UL>

<P><STRONG><a name="[497]"></a>status_line</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, vi.o(i.status_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = status_line &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yank_status
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_pop
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
</UL>

<P><STRONG><a name="[492]"></a>status_line_bold</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, vi.o(i.status_line_bold))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = status_line_bold &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_line_bold_errno
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setops
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;not_implemented
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_insert
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expand_args
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
</UL>

<P><STRONG><a name="[4a9]"></a>status_line_bold_errno</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, vi.o(i.status_line_bold_errno))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = status_line_bold_errno &rArr; status_line_bold &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_line_bold
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_insert
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
</UL>

<P><STRONG><a name="[4a7]"></a>string_insert</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, vi.o(i.string_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = string_insert &rArr; undo_push_insert &rArr; undo_push &rArr;  undo_push (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_push_insert
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_hole_make
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
</UL>

<P><STRONG><a name="[45b]"></a>stupid_insert</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, vi.o(i.stupid_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = stupid_insert &rArr; text_hole_make &rArr; vi_realloc &rArr; mem_sandbox_realloc &rArr; mem_sandbox_malloc &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_hole_make
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[56a]"></a>swap_context</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, vi.o(i.swap_context))
<BR><BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
</UL>

<P><STRONG><a name="[91a]"></a>sync_cursor</STRONG> (Thumb, 386 bytes, Stack size 48 bytes, vi.o(i.sync_cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sync_cursor &rArr; end_screen &rArr; next_line &rArr; end_line
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prev_line
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_line
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_column
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_screen
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_line
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_lines
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_line
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh
</UL>

<P><STRONG><a name="[462]"></a>text_hole_delete</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, vi.o(i.text_hole_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = text_hole_delete &rArr; undo_push &rArr;  undo_push (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_push
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yank_delete
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_pop
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_insert
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[46a]"></a>text_hole_make</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, vi.o(i.text_hole_make))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = text_hole_make &rArr; vi_realloc &rArr; mem_sandbox_realloc &rArr; mem_sandbox_malloc &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_realloc
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_pop
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stupid_insert
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_insert
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_insert
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[4aa]"></a>text_yank</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, vi.o(i.text_yank))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = text_yank &rArr; vi_strndup &rArr; mem_sandbox_strndup &rArr; mem_sandbox_malloc &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_strndup
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_free
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yank_delete
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_file
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
</UL>

<P><STRONG><a name="[56d]"></a>undo_pop</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, vi.o(i.undo_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 572 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = undo_pop &rArr;  undo_pop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_free
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_queue_commit
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_pop
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_hole_make
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_hole_delete
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_line
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_pop
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
</UL>

<P><STRONG><a name="[577]"></a>undo_push</STRONG> (Thumb, 452 bytes, Stack size 24 bytes, vi.o(i.undo_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + In Cycle
<LI>Call Chain = undo_push &rArr;  undo_push (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_zalloc
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_queue_commit
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_queue_commit
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_push_insert
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_push
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_hole_delete
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
</UL>

<P><STRONG><a name="[45d]"></a>undo_push_insert</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, vi.o(i.undo_push_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = undo_push_insert &rArr; undo_push &rArr;  undo_push (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_insert
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_insert
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[45e]"></a>undo_queue_commit</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, vi.o(i.undo_queue_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = undo_queue_commit &rArr;  undo_push (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_push
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undo_pop
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_scroll
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_right
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_prev
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_next
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_left
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_end
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dot_begin
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_insert
</UL>

<P><STRONG><a name="[49d]"></a>update_filename</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, vi.o(i.update_filename))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = update_filename &rArr; vi_strdup &rArr; mem_sandbox_strdup &rArr; mem_sandbox_malloc &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_strdup
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_free
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_text_buffer
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
</UL>

<P><STRONG><a name="[1e1]"></a>vi_main</STRONG> (Thumb, 418 bytes, Stack size 24 bytes, vi.o(i.vi_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060 + Unknown Stack Size
<LI>Call Chain = vi_main &rArr; edit_file &rArr; do_cmd &rArr; colon &rArr; init_text_buffer &rArr; char_insert &rArr; showmatching &rArr; indicate_error &rArr; flash &rArr; redraw &rArr;  show_status_line (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_zalloc
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_strndup
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_mem_release
<LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_mem_init
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_free
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write1
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_help
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_file
<LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optparse_init
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optparse_arg
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;optparse
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vi.o(FSymTab)
</UL>
<P><STRONG><a name="[4ab]"></a>what_reg</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, vi.o(i.what_reg))
<BR><BR>[Called By]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yank_status
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
</UL>

<P><STRONG><a name="[2fb]"></a>write1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, vi.o(i.write1))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = write1 &rArr; fputs &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_main
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standout_start
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standout_end
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_status_line
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;redraw
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;place_cursor
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_error
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input_line
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edit_file
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_to_eol
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hit_Return
</UL>

<P><STRONG><a name="[499]"></a>yank_delete</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, vi.o(i.yank_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = yank_delete &rArr; text_hole_delete &rArr; undo_push &rArr;  undo_push (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_yank
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;text_hole_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;colon
</UL>

<P><STRONG><a name="[56c]"></a>yank_status</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, vi.o(i.yank_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = yank_status &rArr; status_line &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;what_reg
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_line
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_cmd
</UL>

<P><STRONG><a name="[66c]"></a>get_termios_and_make_raw</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, vi_utils.o(i.get_termios_and_make_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = get_termios_and_make_raw &rArr; tcgetattr &rArr; ioctl &rArr; fcntl &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcgetattr
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_termios_to_raw
</UL>

<P><STRONG><a name="[a05]"></a>vasprintf</STRONG> (Thumb, 100 bytes, Stack size 160 bytes, vi_utils.o(i.vasprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = vasprintf &rArr; vi_strdup &rArr; mem_sandbox_strdup &rArr; mem_sandbox_malloc &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_strdup
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vi_malloc
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xasprintf
</UL>

<P><STRONG><a name="[66b]"></a>wh_helper</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, vi_utils.o(i.wh_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wh_helper &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_terminal_width_height
</UL>

<P><STRONG><a name="[8c5]"></a>netconn_apimsg</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, api_lib.o(i.netconn_apimsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[8c7]"></a>netconn_close_shutdown</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, api_lib.o(i.netconn_close_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>

<P><STRONG><a name="[8cd]"></a>netconn_recv_data</STRONG> (Thumb, 370 bytes, Stack size 48 bytes, api_lib.o(i.netconn_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
</UL>

<P><STRONG><a name="[fb]"></a>err_tcp</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, api_msg.o(i.err_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = err_tcp &rArr; sys_mbox_trypost &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.setup_tcp)
<LI> api_msg.o(i.lwip_netconn_do_close_internal)
</UL>
<P><STRONG><a name="[83f]"></a>lwip_netconn_do_close_internal</STRONG> (Thumb, 634 bytes, Stack size 48 bytes, api_msg.o(i.lwip_netconn_do_close_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
</UL>

<P><STRONG><a name="[fc]"></a>lwip_netconn_do_dns_found</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, api_msg.o(i.lwip_netconn_do_dns_found))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = lwip_netconn_do_dns_found &rArr; sys_sem_signal &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.lwip_netconn_do_gethostbyname)
</UL>
<P><STRONG><a name="[853]"></a>lwip_netconn_do_writemore</STRONG> (Thumb, 662 bytes, Stack size 56 bytes, api_msg.o(i.lwip_netconn_do_writemore))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = lwip_netconn_do_writemore &rArr; tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
</UL>

<P><STRONG><a name="[83e]"></a>netconn_drain</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, api_msg.o(i.netconn_drain))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + In Cycle
<LI>Call Chain = netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_set_invalid
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_tryfetch
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>
<BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
</UL>

<P><STRONG><a name="[84e]"></a>pcb_new</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, api_msg.o(i.pcb_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = pcb_new &rArr; tcp_new_ip_type &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_ip_type
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_recv
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new_ip_type
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
</UL>

<P><STRONG><a name="[fa]"></a>poll_tcp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, api_msg.o(i.poll_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = poll_tcp &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.setup_tcp)
<LI> api_msg.o(i.lwip_netconn_do_close_internal)
</UL>
<P><STRONG><a name="[10c]"></a>recv_raw</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, api_msg.o(i.recv_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = recv_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.pcb_new)
</UL>
<P><STRONG><a name="[13b]"></a>recv_tcp</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, api_msg.o(i.recv_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = recv_tcp &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.setup_tcp)
</UL>
<P><STRONG><a name="[10d]"></a>recv_udp</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, api_msg.o(i.recv_udp))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = recv_udp &rArr; netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_msg.o(i.pcb_new)
</UL>
<P><STRONG><a name="[f9]"></a>sent_tcp</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, api_msg.o(i.sent_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = sent_tcp &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 2]<UL><LI> api_msg.o(i.setup_tcp)
<LI> api_msg.o(i.lwip_netconn_do_close_internal)
</UL>
<P><STRONG><a name="[906]"></a>setup_tcp</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, api_msg.o(i.setup_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = setup_tcp &rArr; tcp_sent &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
</UL>

<P><STRONG><a name="[108]"></a>netifapi_do_netif_add</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, netifapi.o(i.netifapi_do_netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = netifapi_do_netif_add &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netifapi.o(i.netifapi_netif_add)
</UL>
<P><STRONG><a name="[109]"></a>netifapi_do_netif_common</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, netifapi.o(i.netifapi_do_netif_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netifapi_do_netif_common
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netifapi.o(i.netifapi_netif_common)
</UL>
<P><STRONG><a name="[10a]"></a>netifapi_do_netif_set_addr</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, netifapi.o(i.netifapi_do_netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = netifapi_do_netif_set_addr &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netifapi.o(i.netifapi_netif_set_addr)
</UL>
<P><STRONG><a name="[41d]"></a>alloc_socket</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, sockets.o(i.alloc_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = alloc_socket &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</UL>

<P><STRONG><a name="[fd]"></a>event_callback</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, sockets.o(i.event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = event_callback &rArr; sys_sem_signal &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sockets.o(i.lwip_socket)
</UL>
<P><STRONG><a name="[63b]"></a>free_socket</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sockets.o(i.free_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>

<P><STRONG><a name="[5f5]"></a>get_socket</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sockets.o(i.get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_socket &rArr; _rt_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_unregister_membership
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_register_membership
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_drop_registered_memberships
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[86a]"></a>lwip_setsockopt_impl</STRONG> (Thumb, 1092 bytes, Stack size 48 bytes, sockets.o(i.lwip_setsockopt_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = lwip_setsockopt_impl &rArr; igmp_leavegroup &rArr; igmp_leavegroup_netif &rArr; igmp_send &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_unregister_membership
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_register_membership
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
</UL>
<BR>[Called By]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
</UL>

<P><STRONG><a name="[82e]"></a>lwip_socket_drop_registered_memberships</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, sockets.o(i.lwip_socket_drop_registered_memberships))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = lwip_socket_drop_registered_memberships &rArr; netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mutex_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
</UL>
<BR>[Called By]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>

<P><STRONG><a name="[86c]"></a>lwip_socket_register_membership</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sockets.o(i.lwip_socket_register_membership))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lwip_socket_register_membership &rArr; get_socket &rArr; _rt_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
</UL>

<P><STRONG><a name="[86d]"></a>lwip_socket_unregister_membership</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, sockets.o(i.lwip_socket_unregister_membership))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lwip_socket_unregister_membership &rArr; get_socket &rArr; _rt_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
</UL>

<P><STRONG><a name="[86b]"></a>tryget_socket</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, sockets.o(i.tryget_socket))
<BR><BR>[Called By]<UL><LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
</UL>

<P><STRONG><a name="[142]"></a>tcpip_thread</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, tcpip.o(i.tcpip_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = tcpip_thread &rArr; sys_timeouts_mbox_fetch &rArr; sys_check_timeouts &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(i.tcpip_init)
</UL>
<P><STRONG><a name="[542]"></a>dns_alloc_pcb</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, dns.o(i.dns_alloc_pcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = dns_alloc_pcb &rArr; dns_alloc_random_port &rArr; udp_new_ip_type &rArr; udp_new &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_random_port
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
</UL>

<P><STRONG><a name="[543]"></a>dns_alloc_random_port</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dns.o(i.dns_alloc_random_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = dns_alloc_random_port &rArr; udp_new_ip_type &rArr; udp_new &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_pcb
</UL>

<P><STRONG><a name="[548]"></a>dns_call_found</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, dns.o(i.dns_call_found))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = dns_call_found &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_correct_response
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[549]"></a>dns_check_entries</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dns.o(i.dns_check_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = dns_check_entries &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
</UL>

<P><STRONG><a name="[54a]"></a>dns_check_entry</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, dns.o(i.dns_check_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_create_txid
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entries
</UL>

<P><STRONG><a name="[54e]"></a>dns_compare_name</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, dns.o(i.dns_compare_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = dns_compare_name &rArr; pbuf_try_get_at &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[550]"></a>dns_correct_response</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dns.o(i.dns_correct_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = dns_correct_response &rArr; dns_call_found &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[54c]"></a>dns_create_txid</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dns.o(i.dns_create_txid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dns_create_txid
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[551]"></a>dns_enqueue</STRONG> (Thumb, 388 bytes, Stack size 64 bytes, dns.o(i.dns_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_pcb
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_strnicmp
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</UL>

<P><STRONG><a name="[555]"></a>dns_lookup</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, dns.o(i.dns_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dns_lookup &rArr; lwip_strnicmp
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_strnicmp
</UL>
<BR>[Called By]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</UL>

<P><STRONG><a name="[ac]"></a>dns_recv</STRONG> (Thumb, 456 bytes, Stack size 72 bytes, dns.o(i.dns_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = dns_recv &rArr; dns_correct_response &rArr; dns_call_found &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_skip_name
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_correct_response
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_compare_name
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dns.o(i.dns_alloc_random_port)
</UL>
<P><STRONG><a name="[54d]"></a>dns_send</STRONG> (Thumb, 326 bytes, Stack size 72 bytes, dns.o(i.dns_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_put_at
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[558]"></a>dns_skip_name</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, dns.o(i.dns_skip_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = dns_skip_name &rArr; pbuf_try_get_at &rArr; pbuf_skip_const
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[6d9]"></a>inet_cksum_pseudo_base</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, inet_chksum.o(i.inet_cksum_pseudo_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = inet_cksum_pseudo_base &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>

<P><STRONG><a name="[57b]"></a>do_memp_free_pool</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, memp.o(i.do_memp_free_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_underflow
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_overflow
</UL>
<BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>

<P><STRONG><a name="[57e]"></a>do_memp_malloc_pool_fn</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, memp.o(i.do_memp_malloc_pool_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_underflow
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_overflow_check_element_overflow
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
</UL>

<P><STRONG><a name="[57c]"></a>memp_overflow_check_element_overflow</STRONG> (Thumb, 80 bytes, Stack size 152 bytes, memp.o(i.memp_overflow_check_element_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = memp_overflow_check_element_overflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
</UL>

<P><STRONG><a name="[57d]"></a>memp_overflow_check_element_underflow</STRONG> (Thumb, 76 bytes, Stack size 152 bytes, memp.o(i.memp_overflow_check_element_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool_fn
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
</UL>

<P><STRONG><a name="[88a]"></a>memp_overflow_init_element</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, memp.o(i.memp_overflow_init_element))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = memp_overflow_init_element
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init_pool
</UL>

<P><STRONG><a name="[8ea]"></a>netif_issue_reports</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, netif.o(i.netif_issue_reports))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = netif_issue_reports &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_report_groups
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[8fd]"></a>pbuf_free_ooseq</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_free_ooseq))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = pbuf_free_ooseq &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq_callback
</UL>

<P><STRONG><a name="[10b]"></a>pbuf_free_ooseq_callback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_free_ooseq_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = pbuf_free_ooseq_callback &rArr; pbuf_free_ooseq &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pbuf.o(i.pbuf_pool_is_empty)
</UL>
<P><STRONG><a name="[8ff]"></a>pbuf_header_impl</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_header_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = pbuf_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>

<P><STRONG><a name="[8fa]"></a>pbuf_pool_is_empty</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_pool_is_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[902]"></a>pbuf_skip_const</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, pbuf.o(i.pbuf_skip_const))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pbuf_skip_const
</UL>
<BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
</UL>

<P><STRONG><a name="[911]"></a>raw_input_match</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, raw.o(i.raw_input_match))
<BR><BR>[Called By]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
</UL>

<P><STRONG><a name="[9d6]"></a>tcp_close_shutdown</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, tcp.o(i.tcp_close_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_trigger_input_pcb_close
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
<LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>
<BR>[Called By]<UL><LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[9db]"></a>tcp_close_shutdown_fin</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tcp.o(i.tcp_close_shutdown_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>
<BR>[Called By]<UL><LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[9d5]"></a>tcp_kill_prio</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, tcp.o(i.tcp_kill_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[9d4]"></a>tcp_kill_state</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, tcp.o(i.tcp_kill_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = tcp_kill_state &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[9d3]"></a>tcp_kill_timewait</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tcp.o(i.tcp_kill_timewait))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[9da]"></a>tcp_listen_closed</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tcp.o(i.tcp_listen_closed))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = tcp_listen_closed &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_remove_listener
</UL>
<BR>[Called By]<UL><LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[9ed]"></a>tcp_netif_ip_addr_changed_pcblist</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, tcp.o(i.tcp_netif_ip_addr_changed_pcblist))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
</UL>

<P><STRONG><a name="[9ea]"></a>tcp_remove_listener</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tcp.o(i.tcp_remove_listener))
<BR><BR>[Called By]<UL><LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_closed
</UL>

<P><STRONG><a name="[9f0]"></a>tcp_getoptbyte</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, tcp_in.o(i.tcp_getoptbyte))
<BR><BR>[Called By]<UL><LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
</UL>

<P><STRONG><a name="[9e5]"></a>tcp_listen_input</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_listen_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[9ee]"></a>tcp_oos_insert_segment</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, tcp_in.o(i.tcp_oos_insert_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = tcp_oos_insert_segment &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[9ec]"></a>tcp_parseopt</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_parseopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_parseopt
</UL>
<BR>[Calls]<UL><LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_getoptbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[9e7]"></a>tcp_process</STRONG> (Thumb, 1700 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[9f3]"></a>tcp_receive</STRONG> (Thumb, 3376 bytes, Stack size 48 bytes, tcp_in.o(i.tcp_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
</UL>
<BR>[Called By]<UL><LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[9e4]"></a>tcp_timewait_input</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, tcp_in.o(i.tcp_timewait_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[9dd]"></a>tcp_create_segment</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_create_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[9e9]"></a>tcp_output_alloc_header</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output_alloc_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[9ef]"></a>tcp_output_segment</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_output_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; pbuf_header &rArr; pbuf_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[9f1]"></a>tcp_pbuf_prealloc</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, tcp_out.o(i.tcp_pbuf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[9fa]"></a>tcp_write_checks</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_write_checks))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = tcp_write_checks &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[a9]"></a>cyclic_timer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, timeouts.o(i.cyclic_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = cyclic_timer &rArr; sys_timeout &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timeouts.o(i.sys_timeouts_init)
<LI> timeouts.o(i.cyclic_timer)
</UL>
<P><STRONG><a name="[9c7]"></a>sys_check_timeouts</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, timeouts.o(i.sys_check_timeouts))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = sys_check_timeouts &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[9cc]"></a>sys_timeouts_sleeptime</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, timeouts.o(i.sys_timeouts_sleeptime))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sys_timeouts_sleeptime &rArr; sys_now &rArr; rt_tick_get_millisecond
</UL>
<BR>[Calls]<UL><LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</UL>
<BR>[Called By]<UL><LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch
</UL>

<P><STRONG><a name="[141]"></a>tcpip_tcp_timer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timeouts.o(i.tcpip_tcp_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timeouts.o(i.tcp_timer_needed)
<LI> timeouts.o(i.tcpip_tcp_timer)
</UL>
<P><STRONG><a name="[9ff]"></a>udp_input_local_match</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, udp.o(i.udp_input_local_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = udp_input_local_match
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[9fe]"></a>udp_new_port</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, udp.o(i.udp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>

<P><STRONG><a name="[5e3]"></a>etharp_find_entry</STRONG> (Thumb, 494 bytes, Stack size 48 bytes, etharp.o(i.etharp_find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = etharp_find_entry &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[5e2]"></a>etharp_free_entry</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, etharp.o(i.etharp_free_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
</UL>
<BR>[Called By]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>

<P><STRONG><a name="[5e9]"></a>etharp_output_to_arp_index</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, etharp.o(i.etharp_output_to_arp_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = etharp_output_to_arp_index &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request_dst
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[5e7]"></a>etharp_raw</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, etharp.o(i.etharp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request_dst
</UL>

<P><STRONG><a name="[5ed]"></a>etharp_request_dst</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, etharp.o(i.etharp_request_dst))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[5e6]"></a>etharp_update_arp_entry</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, etharp.o(i.etharp_update_arp_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
</UL>

<P><STRONG><a name="[5e4]"></a>free_etharp_q</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, etharp.o(i.free_etharp_q))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = free_etharp_q &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>

<P><STRONG><a name="[69b]"></a>icmp_send_response</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, icmp.o(i.icmp_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = icmp_send_response &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[6a1]"></a>igmp_delaying_member</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, igmp.o(i.igmp_delaying_member))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = igmp_delaying_member &rArr; igmp_start_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_report_groups
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
</UL>

<P><STRONG><a name="[6a5]"></a>igmp_ip_output_if</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, igmp.o(i.igmp_ip_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = igmp_ip_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; pbuf_header &rArr; pbuf_header_impl &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
</UL>

<P><STRONG><a name="[6a9]"></a>igmp_lookup_group</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, igmp.o(i.igmp_lookup_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = igmp_lookup_group &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_fn
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
</UL>

<P><STRONG><a name="[6ad]"></a>igmp_remove_group</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, igmp.o(i.igmp_remove_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = igmp_remove_group
</UL>
<BR>[Called By]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
</UL>

<P><STRONG><a name="[6aa]"></a>igmp_send</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, igmp.o(i.igmp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = igmp_send &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_timeout
</UL>

<P><STRONG><a name="[6a2]"></a>igmp_start_timer</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, igmp.o(i.igmp_start_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = igmp_start_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
</UL>

<P><STRONG><a name="[6b0]"></a>igmp_timeout</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, igmp.o(i.igmp_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = igmp_timeout &rArr; igmp_send &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_tmr
</UL>

<P><STRONG><a name="[bb]"></a>eth_netif_device_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ethernetif.o(i.eth_netif_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = eth_netif_device_init &rArr; netif_set_up &rArr; netif_issue_reports &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_device_init_with_flag)
</UL>
<P><STRONG><a name="[be]"></a>eth_rx_thread_entry</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, ethernetif.o(i.eth_rx_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = eth_rx_thread_entry &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_system_device_init_private)
</UL>
<P><STRONG><a name="[bf]"></a>eth_tx_thread_entry</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ethernetif.o(i.eth_tx_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = eth_tx_thread_entry &rArr; rt_mb_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_system_device_init_private)
</UL>
<P><STRONG><a name="[b9]"></a>ethernetif_linkoutput</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ethernetif.o(i.ethernetif_linkoutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = ethernetif_linkoutput &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.eth_device_init_with_flag)
</UL>
<P><STRONG><a name="[18e]"></a>lwip_netdev_set_addr_info</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ethernetif.o(i.lwip_netdev_set_addr_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 780<LI>Call Chain = lwip_netdev_set_addr_info &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.constdata)
</UL>
<P><STRONG><a name="[192]"></a>lwip_netdev_set_default</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ethernetif.o(i.lwip_netdev_set_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lwip_netdev_set_default
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.constdata)
</UL>
<P><STRONG><a name="[18f]"></a>lwip_netdev_set_dns_server</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ethernetif.o(i.lwip_netdev_set_dns_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lwip_netdev_set_dns_server &rArr; dns_setserver &rArr; netdev_low_level_set_dns_server &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.constdata)
</UL>
<P><STRONG><a name="[18d]"></a>lwip_netdev_set_down</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ethernetif.o(i.lwip_netdev_set_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = lwip_netdev_set_down &rArr; netif_set_down &rArr; etharp_cleanup_netif &rArr; etharp_free_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.constdata)
</UL>
<P><STRONG><a name="[18c]"></a>lwip_netdev_set_up</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ethernetif.o(i.lwip_netdev_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = lwip_netdev_set_up &rArr; netif_set_up &rArr; netif_issue_reports &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.constdata)
</UL>
<P><STRONG><a name="[5d7]"></a>netdev_add</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ethernetif.o(i.netdev_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = netdev_add &rArr; rt_calloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_register
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_netif_device_init
</UL>

<P><STRONG><a name="[5d5]"></a>netdev_flags_sync</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ethernetif.o(i.netdev_flags_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = netdev_flags_sync &rArr; netdev_get_by_name &rArr; rt_strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
</UL>
<BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_device_init_with_flag
</UL>

<P><STRONG><a name="[143]"></a>netif_device_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sys_arch.o(i.netif_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = netif_device_init &rArr; rt_device_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(i.tcpip_init_done_callback)
</UL>
<P><STRONG><a name="[fe]"></a>tcpip_init_done_callback</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, sys_arch.o(i.tcpip_init_done_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 844<LI>Call Chain = tcpip_init_done_callback &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; memp_malloc_fn &rArr; do_memp_malloc_pool_fn &rArr; memp_overflow_check_element_underflow &rArr; sys_arch_assert &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_unlock
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mutex_lock
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_assert
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_arch.o(i.lwip_system_init)
</UL>
<P><STRONG><a name="[8d0]"></a>netdev_auto_change_default</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, netdev.o(i.netdev_auto_change_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = netdev_auto_change_default &rArr; netdev_get_first_by_flags
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_default
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_first_by_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_status
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_low_level_set_link_status
</UL>

<P><STRONG><a name="[8d3]"></a>netdev_cmd_netstat</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, netdev.o(i.netdev_cmd_netstat))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = netdev_cmd_netstat &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_netstat
</UL>

<P><STRONG><a name="[8d7]"></a>netdev_list_dns</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, netdev.o(i.netdev_list_dns))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = netdev_list_dns &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dns
</UL>

<P><STRONG><a name="[8db]"></a>netdev_list_if</STRONG> (Thumb, 454 bytes, Stack size 24 bytes, netdev.o(i.netdev_list_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = netdev_list_if &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_ntoa
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ifconfig
</UL>

<P><STRONG><a name="[8d8]"></a>netdev_set_dns</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, netdev.o(i.netdev_set_dns))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = netdev_set_dns &rArr; netdev_set_dns_server &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_aton
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_dns_server
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_dns
</UL>

<P><STRONG><a name="[8dc]"></a>netdev_set_if</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, netdev.o(i.netdev_set_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = netdev_set_if &rArr; netdev_set_netmask &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ip4addr_aton
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_netmask
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_ipaddr
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_ifconfig
</UL>

<P><STRONG><a name="[8d4]"></a>rt_slist_next</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netdev.o(i.rt_slist_next))
<BR><BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_name
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_first_by_flags
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_family
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_if
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_list_dns
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_cmd_netstat
</UL>

<P><STRONG><a name="[138]"></a>check_netdev_internet_up_work</STRONG> (Thumb, 466 bytes, Stack size 168 bytes, sal_socket.o(i.check_netdev_internet_up_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = check_netdev_internet_up_work &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sal_socket.o(i.sal_check_netdev_internet_up)
</UL>
<P><STRONG><a name="[999]"></a>sal_lock</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sal_socket.o(i.sal_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = sal_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_new
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
</UL>

<P><STRONG><a name="[99e]"></a>sal_unlock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sal_socket.o(i.sal_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = sal_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_new
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
</UL>

<P><STRONG><a name="[9be]"></a>socket_alloc</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, sal_socket.o(i.socket_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = socket_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_new
</UL>

<P><STRONG><a name="[998]"></a>socket_delete</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, sal_socket.o(i.socket_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = socket_delete &rArr; socket_free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_get_socket
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_free
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_unlock
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_socket
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_closesocket
</UL>

<P><STRONG><a name="[9bf]"></a>socket_free</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sal_socket.o(i.socket_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = socket_free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_delete
</UL>

<P><STRONG><a name="[99d]"></a>socket_init</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, sal_socket.o(i.socket_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = socket_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netdev_get_by_family
</UL>
<BR>[Called By]<UL><LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_socket
</UL>

<P><STRONG><a name="[99c]"></a>socket_new</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sal_socket.o(i.socket_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = socket_new &rArr; socket_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_alloc
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_unlock
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_socket
</UL>

<P><STRONG><a name="[193]"></a>dfs_net_close</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, dfs_net.o(i.dfs_net_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = dfs_net_close &rArr; sal_closesocket &rArr; socket_delete &rArr; socket_free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_closesocket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_net.o(.constdata)
</UL>
<P><STRONG><a name="[194]"></a>dfs_net_ioctl</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, dfs_net.o(i.dfs_net_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dfs_net_ioctl &rArr; sal_ioctlsocket &rArr; sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_ioctlsocket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_net.o(.constdata)
</UL>
<P><STRONG><a name="[197]"></a>dfs_net_poll</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dfs_net.o(i.dfs_net_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dfs_net_poll &rArr; sal_poll &rArr; sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_net.o(.constdata)
</UL>
<P><STRONG><a name="[195]"></a>dfs_net_read</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, dfs_net.o(i.dfs_net_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dfs_net_read &rArr; sal_recvfrom &rArr; sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_recvfrom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_net.o(.constdata)
</UL>
<P><STRONG><a name="[196]"></a>dfs_net_write</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, dfs_net.o(i.dfs_net_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dfs_net_write &rArr; sal_sendto &rArr; sal_get_socket &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sal_sendto
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_net.o(.constdata)
</UL>
<P><STRONG><a name="[860]"></a>ping_prepare_echo</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ping.o(i.ping_prepare_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ping_prepare_echo &rArr; inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ping_send
</UL>

<P><STRONG><a name="[a19]"></a>webclient_clean</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, webclient.o(i.webclient_clean))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = webclient_clean &rArr; closesocket &rArr; sal_closesocket &rArr; socket_delete &rArr; socket_free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
</UL>
<BR>[Called By]<UL><LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_close
</UL>

<P><STRONG><a name="[a1b]"></a>webclient_connect</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, webclient.o(i.webclient_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = webclient_connect &rArr; socket &rArr; sal_socket &rArr; socket_new &rArr; socket_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeaddrinfo
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_resolve_address
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
</UL>

<P><STRONG><a name="[a27]"></a>webclient_next_chunk</STRONG> (Thumb, 144 bytes, Stack size 80 bytes, webclient.o(i.webclient_next_chunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = webclient_next_chunk &rArr; webclient_read_line &rArr; webclient_recv &rArr; recv &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read_line
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
</UL>

<P><STRONG><a name="[a24]"></a>webclient_read_line</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, webclient.o(i.webclient_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = webclient_read_line &rArr; webclient_recv &rArr; recv &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_handle_response
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_next_chunk
</UL>

<P><STRONG><a name="[a28]"></a>webclient_recv</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, webclient.o(i.webclient_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = webclient_recv &rArr; recv &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>
<BR>[Called By]<UL><LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_read_line
</UL>

<P><STRONG><a name="[a1c]"></a>webclient_resolve_address</STRONG> (Thumb, 468 bytes, Stack size 104 bytes, webclient.o(i.webclient_resolve_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = webclient_resolve_address &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getaddrinfo
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeaddrinfo
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_connect
</UL>

<P><STRONG><a name="[a29]"></a>webclient_send</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, webclient.o(i.webclient_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = webclient_send &rArr; send &rArr; dfs_net_getsocket &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Called By]<UL><LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_write
</UL>

<P><STRONG><a name="[a1e]"></a>webclient_send_header</STRONG> (Thumb, 548 bytes, Stack size 40 bytes, webclient.o(i.webclient_send_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = webclient_send_header &rArr; webclient_write &rArr; closesocket &rArr; sal_closesocket &rArr; socket_delete &rArr; socket_free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_write
<LI><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_add
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_get
</UL>

<P><STRONG><a name="[a2b]"></a>webclient_strncasecmp</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, webclient.o(i.webclient_strncasecmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = webclient_strncasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_strstri
</UL>

<P><STRONG><a name="[a26]"></a>webclient_strstri</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, webclient.o(i.webclient_strstri))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = webclient_strstri &rArr; webclient_strncasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_strncasecmp
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webclient_header_fields_get
</UL>

<P><STRONG><a name="[d1]"></a>decoder_close</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_bmp.o(i.decoder_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = decoder_close &rArr; lv_fs_close &rArr; lv_mem_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bmp.o(i.lv_bmp_init)
</UL>
<P><STRONG><a name="[ce]"></a>decoder_info</STRONG> (Thumb, 150 bytes, Stack size 104 bytes, lv_bmp.o(i.decoder_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = decoder_info &rArr; lv_fs_open &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bmp.o(i.lv_bmp_init)
</UL>
<P><STRONG><a name="[cf]"></a>decoder_open</STRONG> (Thumb, 216 bytes, Stack size 112 bytes, lv_bmp.o(i.decoder_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = decoder_open &rArr; lv_fs_open &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bmp.o(i.lv_bmp_init)
</UL>
<P><STRONG><a name="[d0]"></a>decoder_read_line</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, lv_bmp.o(i.decoder_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = decoder_read_line &rArr; lv_fs_read
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bmp.o(i.lv_bmp_init)
</UL>
<P><STRONG><a name="[2a0]"></a>Adam7_deinterlace</STRONG> (Thumb, 356 bytes, Stack size 224 bytes, lodepng.o(i.Adam7_deinterlace))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Adam7_deinterlace &rArr; Adam7_getpassvalues
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBitFromReversedStream
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adam7_getpassvalues
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBitOfReversedStream
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postProcessScanlines
</UL>

<P><STRONG><a name="[2a1]"></a>Adam7_getpassvalues</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, lodepng.o(i.Adam7_getpassvalues))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Adam7_getpassvalues
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postProcessScanlines
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adam7_deinterlace
</UL>

<P><STRONG><a name="[2ff]"></a>HuffmanTree_cleanup</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lodepng.o(i.HuffmanTree_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = HuffmanTree_cleanup &rArr; lodepng_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic
</UL>

<P><STRONG><a name="[653]"></a>HuffmanTree_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lodepng.o(i.HuffmanTree_init))
<BR><BR>[Called By]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic
</UL>

<P><STRONG><a name="[301]"></a>HuffmanTree_makeFromLengths</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lodepng.o(i.HuffmanTree_makeFromLengths))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; HuffmanTree_makeTable &rArr; lodepng_malloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths2
</UL>
<BR>[Called By]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateFixedLitLenTree
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateFixedDistanceTree
</UL>

<P><STRONG><a name="[303]"></a>HuffmanTree_makeFromLengths2</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, lodepng.o(i.HuffmanTree_makeFromLengths2))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = HuffmanTree_makeFromLengths2 &rArr; HuffmanTree_makeTable &rArr; lodepng_malloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeTable
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths
</UL>

<P><STRONG><a name="[304]"></a>HuffmanTree_makeTable</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, lodepng.o(i.HuffmanTree_makeTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = HuffmanTree_makeTable &rArr; lodepng_malloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_memset
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverseBits
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths2
</UL>

<P><STRONG><a name="[314]"></a>LodePNGBitReader_init</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lodepng.o(i.LodePNGBitReader_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LodePNGBitReader_init
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_mulofl
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_addofl
</UL>
<BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflatev
</UL>

<P><STRONG><a name="[317]"></a>LodePNGIText_cleanup</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lodepng.o(i.LodePNGIText_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = LodePNGIText_cleanup &rArr; string_cleanup &rArr; lodepng_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_cleanup
</UL>

<P><STRONG><a name="[74d]"></a>LodePNGIText_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lodepng.o(i.LodePNGIText_init))
<BR><BR>[Called By]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_init
</UL>

<P><STRONG><a name="[319]"></a>LodePNGText_cleanup</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lodepng.o(i.LodePNGText_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = LodePNGText_cleanup &rArr; string_cleanup &rArr; lodepng_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_cleanup
</UL>

<P><STRONG><a name="[74c]"></a>LodePNGText_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lodepng.o(i.LodePNGText_init))
<BR><BR>[Called By]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_init
</UL>

<P><STRONG><a name="[31a]"></a>LodePNGUnknownChunks_cleanup</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lodepng.o(i.LodePNGUnknownChunks_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = LodePNGUnknownChunks_cleanup &rArr; lodepng_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>
<BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_cleanup
</UL>

<P><STRONG><a name="[74e]"></a>LodePNGUnknownChunks_init</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lodepng.o(i.LodePNGUnknownChunks_init))
<BR><BR>[Called By]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_info_init
</UL>

<P><STRONG><a name="[91b]"></a>addColorBits</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, lodepng.o(i.addColorBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = addColorBits
</UL>
<BR>[Called By]<UL><LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgba8ToPixel
</UL>

<P><STRONG><a name="[41b]"></a>adler32</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lodepng.o(i.adler32))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = adler32 &rArr; update_adler32
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_adler32
</UL>
<BR>[Called By]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_zlib_decompressv
</UL>

<P><STRONG><a name="[68b]"></a>advanceBits</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lodepng.o(i.advanceBits))
<BR><BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBits
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huffmanDecodeSymbol
</UL>

<P><STRONG><a name="[41e]"></a>alloc_string</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lodepng.o(i.alloc_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = alloc_string &rArr; alloc_string_sized &rArr; lodepng_malloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_strlen
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_string_sized
</UL>
<BR>[Called By]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_text_sized
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_itext_sized
</UL>

<P><STRONG><a name="[420]"></a>alloc_string_sized</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lodepng.o(i.alloc_string_sized))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = alloc_string_sized &rArr; lodepng_malloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_memcpy
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_text_sized
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_itext_sized
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_string
</UL>

<P><STRONG><a name="[74f]"></a>checkColorValidity</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, lodepng.o(i.checkColorValidity))
<BR><BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inspect
</UL>

<P><STRONG><a name="[4ae]"></a>color_tree_add</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, lodepng.o(i.color_tree_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = color_tree_add &rArr; lodepng_malloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_init
</UL>
<BR>[Called By]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
</UL>

<P><STRONG><a name="[4b0]"></a>color_tree_cleanup</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lodepng.o(i.color_tree_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + In Cycle
<LI>Call Chain = color_tree_cleanup &rArr;  color_tree_cleanup (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_cleanup
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
</UL>

<P><STRONG><a name="[91c]"></a>color_tree_get</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lodepng.o(i.color_tree_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = color_tree_get
</UL>
<BR>[Called By]<UL><LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgba8ToPixel
</UL>

<P><STRONG><a name="[4af]"></a>color_tree_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lodepng.o(i.color_tree_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = color_tree_init &rArr; lodepng_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_add
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
</UL>

<P><STRONG><a name="[4cf]"></a>decodeGeneric</STRONG> (Thumb, 1392 bytes, Stack size 80 bytes, lodepng.o(i.decodeGeneric))
<BR><BR>[Stack]<UL><LI>Max Depth = 1020<LI>Call Chain = decodeGeneric &rArr; readChunk_iTXt &rArr; zlib_decompress &rArr; lodepng_zlib_decompressv &rArr; inflatev &rArr; lodepng_inflatev &rArr; inflateHuffmanBlock &rArr; getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; HuffmanTree_makeTable &rArr; lodepng_malloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_PLTE
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postProcessScanlines
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_pixel_overflow
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_memset
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_memcpy
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_raw_size_idat
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_addofl
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inspect
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_raw_size
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_bpp
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_type_equals
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_next_const
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_length
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_data_const
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_check_crc
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_append
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_ancillary
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zlib_decompress
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_tRNS
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_tIME
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_tEXt
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_sRGB
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_pHYs
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iCCP
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_gAMA
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_cHRM
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_bKGD
</UL>
<BR>[Called By]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
</UL>

<P><STRONG><a name="[651]"></a>ensureBits17</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, lodepng.o(i.ensureBits17))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ensureBits17
</UL>
<BR>[Called By]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic
</UL>

<P><STRONG><a name="[656]"></a>ensureBits25</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, lodepng.o(i.ensureBits25))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ensureBits25
</UL>
<BR>[Called By]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic
</UL>

<P><STRONG><a name="[6dc]"></a>ensureBits32</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, lodepng.o(i.ensureBits32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ensureBits32
</UL>
<BR>[Called By]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock
</UL>

<P><STRONG><a name="[655]"></a>ensureBits9</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lodepng.o(i.ensureBits9))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ensureBits9
</UL>
<BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflatev
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic
</UL>

<P><STRONG><a name="[64a]"></a>generateFixedDistanceTree</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lodepng.o(i.generateFixedDistanceTree))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = generateFixedDistanceTree &rArr; HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; HuffmanTree_makeTable &rArr; lodepng_malloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths
</UL>
<BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateFixed
</UL>

<P><STRONG><a name="[64b]"></a>generateFixedLitLenTree</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, lodepng.o(i.generateFixedLitLenTree))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = generateFixedLitLenTree &rArr; HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; HuffmanTree_makeTable &rArr; lodepng_malloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths
</UL>
<BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateFixed
</UL>

<P><STRONG><a name="[747]"></a>getNumColorChannels</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, lodepng.o(i.getNumColorChannels))
<BR><BR>[Called By]<UL><LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_bpp_lct
</UL>

<P><STRONG><a name="[739]"></a>getPixelColorRGBA16</STRONG> (Thumb, 576 bytes, Stack size 24 bytes, lodepng.o(i.getPixelColorRGBA16))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = getPixelColorRGBA16
</UL>
<BR>[Called By]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
</UL>

<P><STRONG><a name="[64c]"></a>getPixelColorRGBA8</STRONG> (Thumb, 766 bytes, Stack size 48 bytes, lodepng.o(i.getPixelColorRGBA8))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = getPixelColorRGBA8 &rArr; readBitsFromReversedStream &rArr; readBitFromReversedStream
</UL>
<BR>[Calls]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBitsFromReversedStream
</UL>
<BR>[Called By]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
</UL>

<P><STRONG><a name="[64e]"></a>getPixelColorsRGB8</STRONG> (Thumb, 458 bytes, Stack size 40 bytes, lodepng.o(i.getPixelColorsRGB8))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = getPixelColorsRGB8 &rArr; readBitsFromReversedStream &rArr; readBitFromReversedStream
</UL>
<BR>[Calls]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBitsFromReversedStream
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
</UL>

<P><STRONG><a name="[64f]"></a>getPixelColorsRGBA8</STRONG> (Thumb, 768 bytes, Stack size 40 bytes, lodepng.o(i.getPixelColorsRGBA8))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = getPixelColorsRGBA8 &rArr; readBitsFromReversedStream &rArr; readBitFromReversedStream
</UL>
<BR>[Calls]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBitsFromReversedStream
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
</UL>

<P><STRONG><a name="[650]"></a>getTreeInflateDynamic</STRONG> (Thumb, 714 bytes, Stack size 96 bytes, lodepng.o(i.getTreeInflateDynamic))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; HuffmanTree_makeTable &rArr; lodepng_malloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBits
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_memset
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_gtofl
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huffmanDecodeSymbol
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensureBits9
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensureBits25
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensureBits17
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_init
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock
</UL>

<P><STRONG><a name="[658]"></a>getTreeInflateFixed</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lodepng.o(i.getTreeInflateFixed))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = getTreeInflateFixed &rArr; generateFixedLitLenTree &rArr; HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; HuffmanTree_makeTable &rArr; lodepng_malloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateFixedLitLenTree
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateFixedDistanceTree
</UL>
<BR>[Called By]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock
</UL>

<P><STRONG><a name="[657]"></a>huffmanDecodeSymbol</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, lodepng.o(i.huffmanDecodeSymbol))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = huffmanDecodeSymbol
</UL>
<BR>[Calls]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peekBits
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advanceBits
</UL>
<BR>[Called By]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic
</UL>

<P><STRONG><a name="[6da]"></a>inflateHuffmanBlock</STRONG> (Thumb, 408 bytes, Stack size 120 bytes, lodepng.o(i.inflateHuffmanBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = inflateHuffmanBlock &rArr; getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; HuffmanTree_makeTable &rArr; lodepng_malloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBits
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_memcpy
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huffmanDecodeSymbol
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateFixed
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensureBits32
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensureBits25
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_init
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_cleanup
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflatev
</UL>

<P><STRONG><a name="[6dd]"></a>inflateNoCompression</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, lodepng.o(i.inflateNoCompression))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = inflateNoCompression &rArr; ucvector_resize &rArr; lodepng_realloc &rArr; realloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_memcpy
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_resize
</UL>
<BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflatev
</UL>

<P><STRONG><a name="[6de]"></a>inflatev</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, lodepng.o(i.inflatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 740<LI>Call Chain = inflatev &rArr; lodepng_inflatev &rArr; inflateHuffmanBlock &rArr; getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; HuffmanTree_makeTable &rArr; lodepng_malloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflatev
</UL>
<BR>[Called By]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_zlib_decompressv
</UL>

<P><STRONG><a name="[72b]"></a>lodepng_add_itext_sized</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, lodepng.o(i.lodepng_add_itext_sized))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = lodepng_add_itext_sized &rArr; lodepng_realloc &rArr; realloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_realloc
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_string_sized
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_string
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt
</UL>

<P><STRONG><a name="[72e]"></a>lodepng_add_text_sized</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, lodepng.o(i.lodepng_add_text_sized))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = lodepng_add_text_sized &rArr; lodepng_realloc &rArr; realloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_realloc
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_string_sized
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_string
</UL>
<BR>[Called By]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_text
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt
</UL>

<P><STRONG><a name="[316]"></a>lodepng_addofl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lodepng.o(i.lodepng_addofl))
<BR><BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_pixel_overflow
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_gtofl
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGBitReader_init
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_next_const
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_append
</UL>

<P><STRONG><a name="[72f]"></a>lodepng_buffer_file</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, lodepng.o(i.lodepng_buffer_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = lodepng_buffer_file &rArr; lv_fs_open &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_load_file
</UL>

<P><STRONG><a name="[733]"></a>lodepng_color_mode_alloc_palette</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lodepng.o(i.lodepng_color_mode_alloc_palette))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = lodepng_color_mode_alloc_palette &rArr; lodepng_malloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_PLTE
</UL>

<P><STRONG><a name="[738]"></a>lodepng_color_mode_equal</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, lodepng.o(i.lodepng_color_mode_equal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lodepng_color_mode_equal
</UL>
<BR>[Called By]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
</UL>

<P><STRONG><a name="[744]"></a>lodepng_filesize</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lodepng.o(i.lodepng_filesize))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = lodepng_filesize &rArr; lv_fs_open &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_size
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_load_file
</UL>

<P><STRONG><a name="[300]"></a>lodepng_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lodepng.o(i.lodepng_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = lodepng_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateFixedLitLenTree
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateFixedDistanceTree
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_cleanup
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGUnknownChunks_cleanup
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGText_cleanup
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGIText_cleanup
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeTable
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths2
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_cleanup
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_palette_clear
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_clear_icc
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_cleanup
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_tEXt
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt
</UL>

<P><STRONG><a name="[746]"></a>lodepng_get_bpp_lct</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lodepng.o(i.lodepng_get_bpp_lct))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lodepng_get_bpp_lct
</UL>
<BR>[Calls]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNumColorChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_raw_size_lct
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_bpp
</UL>

<P><STRONG><a name="[4e6]"></a>lodepng_get_raw_size_idat</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, lodepng.o(i.lodepng_get_raw_size_idat))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lodepng_get_raw_size_idat
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
<LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unfilter
</UL>

<P><STRONG><a name="[748]"></a>lodepng_get_raw_size_lct</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, lodepng.o(i.lodepng_get_raw_size_lct))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lodepng_get_raw_size_lct &rArr; lodepng_get_bpp_lct
</UL>
<BR>[Calls]<UL><LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_bpp_lct
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_raw_size
</UL>

<P><STRONG><a name="[654]"></a>lodepng_gtofl</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lodepng.o(i.lodepng_gtofl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lodepng_gtofl
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_addofl
</UL>
<BR>[Called By]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic
</UL>

<P><STRONG><a name="[6df]"></a>lodepng_inflatev</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, lodepng.o(i.lodepng_inflatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = lodepng_inflatev &rArr; inflateHuffmanBlock &rArr; getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; HuffmanTree_makeTable &rArr; lodepng_malloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBits
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateNoCompression
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensureBits9
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGBitReader_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflatev
</UL>

<P><STRONG><a name="[302]"></a>lodepng_malloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lodepng.o(i.lodepng_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = lodepng_malloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_alloc_palette
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateFixedLitLenTree
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateFixedDistanceTree
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_add
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_string_sized
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeTable
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths2
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeFromLengths
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_load_file
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_copy
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_tEXt
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iCCP
</UL>

<P><STRONG><a name="[421]"></a>lodepng_memcpy</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lodepng.o(i.lodepng_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lodepng_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateNoCompression
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixelColorsRGBA8
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixelColorsRGB8
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_string_sized
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_copy
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_tEXt
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt
</UL>

<P><STRONG><a name="[305]"></a>lodepng_memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lodepng.o(i.lodepng_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lodepng_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_init
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeTable
</UL>

<P><STRONG><a name="[315]"></a>lodepng_mulofl</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lodepng.o(i.lodepng_mulofl))
<BR><BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_pixel_overflow
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGBitReader_init
</UL>

<P><STRONG><a name="[4d1]"></a>lodepng_pixel_overflow</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, lodepng.o(i.lodepng_pixel_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lodepng_pixel_overflow &rArr; lodepng_get_bpp &rArr; lodepng_get_bpp_lct
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_mulofl
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_addofl
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_bpp
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[730]"></a>lodepng_read32bitInt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lodepng.o(i.lodepng_read32bitInt))
<BR><BR>[Called By]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_zlib_decompressv
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inspect
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_length
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_check_crc
</UL>

<P><STRONG><a name="[72c]"></a>lodepng_realloc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lodepng.o(i.lodepng_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = lodepng_realloc &rArr; realloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_text_sized
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_itext_sized
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_append
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_resize
</UL>

<P><STRONG><a name="[41f]"></a>lodepng_strlen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lodepng.o(i.lodepng_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_string
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_chunk_type_equals
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_text
</UL>

<P><STRONG><a name="[751]"></a>lodepng_zlib_decompressv</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, lodepng.o(i.lodepng_zlib_decompressv))
<BR><BR>[Stack]<UL><LI>Max Depth = 788<LI>Call Chain = lodepng_zlib_decompressv &rArr; inflatev &rArr; lodepng_inflatev &rArr; inflateHuffmanBlock &rArr; getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; HuffmanTree_makeTable &rArr; lodepng_malloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_read32bitInt
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflatev
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adler32
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zlib_decompress
</UL>

<P><STRONG><a name="[a04]"></a>paethPredictor</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lodepng.o(i.paethPredictor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = paethPredictor
</UL>
<BR>[Called By]<UL><LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unfilterScanline
</UL>

<P><STRONG><a name="[68a]"></a>peekBits</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lodepng.o(i.peekBits))
<BR><BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBits
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huffmanDecodeSymbol
</UL>

<P><STRONG><a name="[4e9]"></a>postProcessScanlines</STRONG> (Thumb, 326 bytes, Stack size 208 bytes, lodepng.o(i.postProcessScanlines))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = postProcessScanlines &rArr; Adam7_deinterlace &rArr; Adam7_getpassvalues
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adam7_getpassvalues
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adam7_deinterlace
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_bpp
<LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unfilter
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removePaddingBits
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[2a2]"></a>readBitFromReversedStream</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lodepng.o(i.readBitFromReversedStream))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = readBitFromReversedStream
</UL>
<BR>[Called By]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBitsFromReversedStream
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adam7_deinterlace
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removePaddingBits
</UL>

<P><STRONG><a name="[652]"></a>readBits</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lodepng.o(i.readBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = readBits
</UL>
<BR>[Calls]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peekBits
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advanceBits
</UL>
<BR>[Called By]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_inflatev
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTreeInflateDynamic
</UL>

<P><STRONG><a name="[64d]"></a>readBitsFromReversedStream</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lodepng.o(i.readBitsFromReversedStream))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = readBitsFromReversedStream &rArr; readBitFromReversedStream
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBitFromReversedStream
</UL>
<BR>[Called By]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixelColorsRGBA8
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixelColorsRGB8
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPixelColorRGBA8
</UL>

<P><STRONG><a name="[4d5]"></a>readChunk_PLTE</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, lodepng.o(i.readChunk_PLTE))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = readChunk_PLTE &rArr; lodepng_color_mode_alloc_palette &rArr; lodepng_malloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_color_mode_alloc_palette
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[4d7]"></a>readChunk_bKGD</STRONG> (Thumb, 148 bytes, Stack size 12 bytes, lodepng.o(i.readChunk_bKGD))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = readChunk_bKGD
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[4de]"></a>readChunk_cHRM</STRONG> (Thumb, 234 bytes, Stack size 12 bytes, lodepng.o(i.readChunk_cHRM))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = readChunk_cHRM
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[4dd]"></a>readChunk_gAMA</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, lodepng.o(i.readChunk_gAMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = readChunk_gAMA
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[4e0]"></a>readChunk_iCCP</STRONG> (Thumb, 242 bytes, Stack size 72 bytes, lodepng.o(i.readChunk_iCCP))
<BR><BR>[Stack]<UL><LI>Max Depth = 908<LI>Call Chain = readChunk_iCCP &rArr; zlib_decompress &rArr; lodepng_zlib_decompressv &rArr; inflatev &rArr; lodepng_inflatev &rArr; inflateHuffmanBlock &rArr; getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; HuffmanTree_makeTable &rArr; lodepng_malloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_clear_icc
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zlib_decompress
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[4da]"></a>readChunk_iTXt</STRONG> (Thumb, 426 bytes, Stack size 104 bytes, lodepng.o(i.readChunk_iTXt))
<BR><BR>[Stack]<UL><LI>Max Depth = 940<LI>Call Chain = readChunk_iTXt &rArr; zlib_decompress &rArr; lodepng_zlib_decompressv &rArr; inflatev &rArr; lodepng_inflatev &rArr; inflateHuffmanBlock &rArr; getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; HuffmanTree_makeTable &rArr; lodepng_malloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_memcpy
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_itext_sized
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zlib_decompress
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[4dc]"></a>readChunk_pHYs</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, lodepng.o(i.readChunk_pHYs))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = readChunk_pHYs
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[4df]"></a>readChunk_sRGB</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lodepng.o(i.readChunk_sRGB))
<BR><BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[4d8]"></a>readChunk_tEXt</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, lodepng.o(i.readChunk_tEXt))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = readChunk_tEXt &rArr; lodepng_add_text &rArr; lodepng_add_text_sized &rArr; lodepng_realloc &rArr; realloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_memcpy
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_text
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[4db]"></a>readChunk_tIME</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, lodepng.o(i.readChunk_tIME))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = readChunk_tIME
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[4d6]"></a>readChunk_tRNS</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, lodepng.o(i.readChunk_tRNS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = readChunk_tRNS
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[4d9]"></a>readChunk_zTXt</STRONG> (Thumb, 218 bytes, Stack size 80 bytes, lodepng.o(i.readChunk_zTXt))
<BR><BR>[Stack]<UL><LI>Max Depth = 916<LI>Call Chain = readChunk_zTXt &rArr; zlib_decompress &rArr; lodepng_zlib_decompressv &rArr; inflatev &rArr; lodepng_inflatev &rArr; inflateHuffmanBlock &rArr; getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; HuffmanTree_makeTable &rArr; lodepng_malloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_memcpy
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_malloc
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_add_text_sized
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zlib_decompress
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
</UL>

<P><STRONG><a name="[910]"></a>removePaddingBits</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, lodepng.o(i.removePaddingBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = removePaddingBits &rArr; setBitOfReversedStream
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBitFromReversedStream
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBitOfReversedStream
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postProcessScanlines
</UL>

<P><STRONG><a name="[306]"></a>reverseBits</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lodepng.o(i.reverseBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = reverseBits
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HuffmanTree_makeTable
</UL>

<P><STRONG><a name="[73a]"></a>rgba16ToPixel</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, lodepng.o(i.rgba16ToPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rgba16ToPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
</UL>

<P><STRONG><a name="[73b]"></a>rgba8ToPixel</STRONG> (Thumb, 496 bytes, Stack size 56 bytes, lodepng.o(i.rgba8ToPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rgba8ToPixel &rArr; color_tree_get
</UL>
<BR>[Calls]<UL><LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_tree_get
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addColorBits
</UL>
<BR>[Called By]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_convert
</UL>

<P><STRONG><a name="[2a3]"></a>setBitOfReversedStream</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, lodepng.o(i.setBitOfReversedStream))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = setBitOfReversedStream
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adam7_deinterlace
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removePaddingBits
</UL>

<P><STRONG><a name="[318]"></a>string_cleanup</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lodepng.o(i.string_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = string_cleanup &rArr; lodepng_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_free
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGText_cleanup
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodePNGIText_cleanup
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_clear_icc
</UL>

<P><STRONG><a name="[a2c]"></a>ucvector_init</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, lodepng.o(i.ucvector_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ucvector_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zlib_decompress
</UL>

<P><STRONG><a name="[6db]"></a>ucvector_resize</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lodepng.o(i.ucvector_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = ucvector_resize &rArr; lodepng_realloc &rArr; realloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateNoCompression
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inflateHuffmanBlock
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zlib_decompress
</UL>

<P><STRONG><a name="[90f]"></a>unfilter</STRONG> (Thumb, 116 bytes, Stack size 64 bytes, lodepng.o(i.unfilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = unfilter &rArr; unfilterScanline &rArr; paethPredictor
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_get_raw_size_idat
<LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unfilterScanline
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postProcessScanlines
</UL>

<P><STRONG><a name="[a03]"></a>unfilterScanline</STRONG> (Thumb, 790 bytes, Stack size 104 bytes, lodepng.o(i.unfilterScanline))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = unfilterScanline &rArr; paethPredictor
</UL>
<BR>[Calls]<UL><LI><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paethPredictor
</UL>
<BR>[Called By]<UL><LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unfilter
</UL>

<P><STRONG><a name="[41c]"></a>update_adler32</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, lodepng.o(i.update_adler32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = update_adler32
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adler32
</UL>

<P><STRONG><a name="[4e7]"></a>zlib_decompress</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, lodepng.o(i.zlib_decompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = zlib_decompress &rArr; lodepng_zlib_decompressv &rArr; inflatev &rArr; lodepng_inflatev &rArr; inflateHuffmanBlock &rArr; getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; HuffmanTree_makeTable &rArr; lodepng_malloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_zlib_decompressv
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_resize
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucvector_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeGeneric
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_zTXt
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iTXt
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChunk_iCCP
</UL>

<P><STRONG><a name="[4f4]"></a>convert_color_depth</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, lv_png.o(i.convert_color_depth))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = convert_color_depth
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_open
</UL>

<P><STRONG><a name="[e3]"></a>decoder_close</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_png.o(i.decoder_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = decoder_close &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_png.o(i.lv_png_init)
</UL>
<P><STRONG><a name="[e1]"></a>decoder_info</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lv_png.o(i.decoder_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = decoder_info &rArr; lv_fs_open &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_png.o(i.lv_png_init)
</UL>
<P><STRONG><a name="[e2]"></a>decoder_open</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, lv_png.o(i.decoder_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1588 + Unknown Stack Size
<LI>Call Chain = decoder_open &rArr; lodepng_decode32 &rArr; lodepng_decode_memory &rArr; lodepng_decode &rArr; decodeGeneric &rArr; readChunk_iTXt &rArr; zlib_decompress &rArr; lodepng_zlib_decompressv &rArr; inflatev &rArr; lodepng_inflatev &rArr; inflateHuffmanBlock &rArr; getTreeInflateDynamic &rArr; HuffmanTree_makeFromLengths &rArr; HuffmanTree_makeFromLengths2 &rArr; HuffmanTree_makeTable &rArr; lodepng_malloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_color_depth
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_load_file
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_error_text
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lodepng_decode32
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_png.o(i.lv_png_init)
</UL>
<P><STRONG><a name="[4bf]"></a>alloc_pool</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tjpgd.o(i.alloc_pool))
<BR><BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_qt_tbl
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_huffman_tbl
</UL>

<P><STRONG><a name="[87c]"></a>bitext</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, tjpgd.o(i.bitext))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bitext
</UL>
<BR>[Called By]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
</UL>

<P><STRONG><a name="[87d]"></a>block_idct</STRONG> (Thumb, 672 bytes, Stack size 64 bytes, tjpgd.o(i.block_idct))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = block_idct
</UL>
<BR>[Called By]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
</UL>

<P><STRONG><a name="[4be]"></a>create_huffman_tbl</STRONG> (Thumb, 590 bytes, Stack size 88 bytes, tjpgd.o(i.create_huffman_tbl))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = create_huffman_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_pool
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
</UL>

<P><STRONG><a name="[4ca]"></a>create_qt_tbl</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, tjpgd.o(i.create_qt_tbl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = create_qt_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
</UL>

<P><STRONG><a name="[87b]"></a>huffext</STRONG> (Thumb, 404 bytes, Stack size 64 bytes, tjpgd.o(i.huffext))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = huffext
</UL>
<BR>[Called By]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
</UL>

<P><STRONG><a name="[700]"></a>mcu_load</STRONG> (Thumb, 456 bytes, Stack size 56 bytes, tjpgd.o(i.mcu_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mcu_load &rArr; huffext
</UL>
<BR>[Calls]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huffext
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_idct
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitext
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
</UL>

<P><STRONG><a name="[701]"></a>mcu_output</STRONG> (Thumb, 926 bytes, Stack size 104 bytes, tjpgd.o(i.mcu_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mcu_output
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
</UL>

<P><STRONG><a name="[6ff]"></a>restart</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, tjpgd.o(i.restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = restart
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
</UL>

<P><STRONG><a name="[f4]"></a>decoder_close</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_sjpg.o(i.decoder_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = decoder_close &rArr; lv_fs_close &rArr; lv_mem_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_sjpg_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_sjpg.o(i.lv_split_jpeg_init)
</UL>
<P><STRONG><a name="[f2]"></a>decoder_info</STRONG> (Thumb, 702 bytes, Stack size 232 bytes, lv_sjpg.o(i.decoder_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = decoder_info &rArr; lv_fs_open &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_jpg
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_sjpg.o(i.lv_split_jpeg_init)
</UL>
<P><STRONG><a name="[f3]"></a>decoder_open</STRONG> (Thumb, 1540 bytes, Stack size 240 bytes, lv_sjpg.o(i.decoder_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 604 + Unknown Stack Size
<LI>Call Chain = decoder_open &rArr; lv_fs_open &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_sjpg_cleanup
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_jpg
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_sjpg.o(i.lv_split_jpeg_init)
</UL>
<P><STRONG><a name="[f5]"></a>decoder_read_line</STRONG> (Thumb, 472 bytes, Stack size 64 bytes, lv_sjpg.o(i.decoder_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = decoder_read_line &rArr; jd_decomp &rArr; mcu_load &rArr; huffext
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_sjpg.o(i.lv_split_jpeg_init)
</UL>
<P><STRONG><a name="[ab]"></a>img_data_cb</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, lv_sjpg.o(i.img_data_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = img_data_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_sjpg.o(i.decoder_read_line)
</UL>
<P><STRONG><a name="[aa]"></a>input_func</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, lv_sjpg.o(i.input_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = input_func &rArr; lv_fs_read
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_tell
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lv_sjpg.o(i.decoder_info)
<LI> lv_sjpg.o(i.decoder_open)
<LI> lv_sjpg.o(i.decoder_read_line)
</UL>
<P><STRONG><a name="[4ef]"></a>is_jpg</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lv_sjpg.o(i.is_jpg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = is_jpg &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_open
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_info
</UL>

<P><STRONG><a name="[4f5]"></a>lv_sjpg_cleanup</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_sjpg.o(i.lv_sjpg_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_sjpg_cleanup &rArr; lv_sjpg_free &rArr; lv_mem_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_sjpg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_open
</UL>

<P><STRONG><a name="[4eb]"></a>lv_sjpg_free</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lv_sjpg.o(i.lv_sjpg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = lv_sjpg_free &rArr; lv_mem_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_sjpg_cleanup
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decoder_close
</UL>

<P><STRONG><a name="[634]"></a>focus_next_core</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, lv_group.o(i.focus_next_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_to_foreground
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
</UL>

<P><STRONG><a name="[782]"></a>lv_group_refocus</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_group.o(i.lv_group_refocus))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
</UL>

<P><STRONG><a name="[638]"></a>obj_to_foreground</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lv_group.o(i.obj_to_foreground))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>

<P><STRONG><a name="[65c]"></a>get_dragged_obj</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_indev.o(i.get_dragged_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = get_dragged_obj &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag_parent
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
</UL>

<P><STRONG><a name="[396]"></a>indev_button_proc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lv_indev.o(i.indev_button_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = indev_button_proc &rArr; indev_proc_press &rArr; indev_drag &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read_task
</UL>

<P><STRONG><a name="[6b3]"></a>indev_click_focus</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, lv_indev.o(i.indev_click_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = indev_click_focus &rArr; lv_group_focus_obj &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_signal_send
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_focused_obj
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[6ba]"></a>indev_drag</STRONG> (Thumb, 844 bytes, Stack size 64 bytes, lv_indev.o(i.indev_drag))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = indev_drag &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag_dir
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_inv_buf_size
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_pop_from_inv_buf
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dragged_obj
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[6c4]"></a>indev_drag_throw</STRONG> (Thumb, 426 bytes, Stack size 40 bytes, lv_indev.o(i.indev_drag_throw))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = indev_drag_throw &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag_throw
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag_dir
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dragged_obj
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[395]"></a>indev_encoder_proc</STRONG> (Thumb, 1166 bytes, Stack size 32 bytes, lv_indev.o(i.indev_encoder_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = indev_encoder_proc &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_is_empty
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_send_data
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read_task
</UL>

<P><STRONG><a name="[6d0]"></a>indev_gesture</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, lv_indev.o(i.indev_gesture))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = indev_gesture &rArr; lv_event_send &rArr; lv_event_send_func &rArr;  lv_event_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_gesture_parent
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[394]"></a>indev_keypad_proc</STRONG> (Thumb, 818 bytes, Stack size 24 bytes, lv_indev.o(i.indev_keypad_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = indev_keypad_proc &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_send_data
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read_task
</UL>

<P><STRONG><a name="[393]"></a>indev_pointer_proc</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lv_indev.o(i.indev_pointer_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = indev_pointer_proc &rArr; indev_proc_press &rArr; indev_drag &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read_task
</UL>

<P><STRONG><a name="[6b1]"></a>indev_proc_press</STRONG> (Thumb, 1004 bytes, Stack size 24 bytes, lv_indev.o(i.indev_proc_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = indev_proc_press &rArr; indev_drag &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_gesture
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_click_focus
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_pointer_proc
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_button_proc
</UL>

<P><STRONG><a name="[6b2]"></a>indev_proc_release</STRONG> (Thumb, 428 bytes, Stack size 16 bytes, lv_indev.o(i.indev_proc_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = indev_proc_release &rArr; indev_drag_throw &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag_throw
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dragged_obj
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_pointer_proc
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_button_proc
</UL>

<P><STRONG><a name="[392]"></a>indev_proc_reset_query_handler</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, lv_indev.o(i.indev_proc_reset_query_handler))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read_task
</UL>

<P><STRONG><a name="[6b8]"></a>indev_reset_check</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_indev.o(i.indev_reset_check))
<BR><BR>[Called By]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_gesture
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_click_focus
</UL>

<P><STRONG><a name="[757]"></a>_lv_memcpy_small</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, lv_obj.o(i._lv_memcpy_small))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>

<P><STRONG><a name="[6f1]"></a>invalidate_style_cache</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, lv_obj.o(i.invalidate_style_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = invalidate_style_cache &rArr; update_style_cache_children &rArr;  update_style_cache_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_prop_is_cacheble
</UL>
<BR>[Called By]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
</UL>

<P><STRONG><a name="[804]"></a>lv_anim_set_delay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_anim_set_delay))
<BR><BR>[Called By]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[800]"></a>lv_anim_set_exec_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_anim_set_exec_cb))
<BR><BR>[Called By]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[801]"></a>lv_anim_set_ready_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_anim_set_ready_cb))
<BR><BR>[Called By]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[803]"></a>lv_anim_set_time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_anim_set_time))
<BR><BR>[Called By]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[802]"></a>lv_anim_set_values</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj.o(i.lv_anim_set_values))
<BR><BR>[Called By]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[7ff]"></a>lv_anim_set_var</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_anim_set_var))
<BR><BR>[Called By]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[756]"></a>lv_area_copy</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_area_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_area_copy &rArr; _lv_memcpy_small
</UL>
<BR>[Calls]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
</UL>

<P><STRONG><a name="[7d8]"></a>lv_area_get_height</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj.o(i.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
</UL>

<P><STRONG><a name="[7f4]"></a>lv_area_get_width</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj.o(i.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
</UL>

<P><STRONG><a name="[7ac]"></a>lv_color_hex</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, lv_obj.o(i.lv_color_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[9fd]"></a>lv_color_mix</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, lv_obj.o(i.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
</UL>

<P><STRONG><a name="[8f2]"></a>lv_event_mark_deleted</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_obj.o(i.lv_event_mark_deleted))
<BR><BR>[Called By]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[dd]"></a>lv_obj_design</STRONG> (Thumb, 640 bytes, Stack size 136 bytes, lv_obj.o(i.lv_obj_design))
<BR><BR>[Stack]<UL><LI>Max Depth = 948<LI>Call Chain = lv_obj_design &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_custom
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_radius
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_scale
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_clip_corner
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_post
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_blend_mode
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_opa
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_blend_mode
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(i.lv_obj_create)
</UL>
<P><STRONG><a name="[7c3]"></a>lv_obj_get_style_bg_blend_mode</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_bg_blend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_bg_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
</UL>

<P><STRONG><a name="[7c2]"></a>lv_obj_get_style_bg_opa</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_bg_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_bg_opa &rArr;  _lv_obj_get_style_opa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
</UL>

<P><STRONG><a name="[7c4]"></a>lv_obj_get_style_border_blend_mode</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_border_blend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_border_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
</UL>

<P><STRONG><a name="[7c6]"></a>lv_obj_get_style_border_post</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_border_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_border_post &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
</UL>

<P><STRONG><a name="[7d9]"></a>lv_obj_get_style_border_side</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_border_side))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_border_side &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[7da]"></a>lv_obj_get_style_border_width</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_border_width &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[7be]"></a>lv_obj_get_style_clip_corner</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_clip_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_clip_corner &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
</UL>

<P><STRONG><a name="[7db]"></a>lv_obj_get_style_image_blend_mode</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_image_blend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_image_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[7dc]"></a>lv_obj_get_style_image_recolor_opa</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_image_recolor_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_image_recolor_opa &rArr;  _lv_obj_get_style_opa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[7dd]"></a>lv_obj_get_style_line_blend_mode</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_line_blend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_line_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[7de]"></a>lv_obj_get_style_margin_bottom</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_margin_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_margin_bottom &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[7df]"></a>lv_obj_get_style_margin_left</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_margin_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_margin_left &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[7e0]"></a>lv_obj_get_style_margin_right</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_margin_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_margin_right &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[7e1]"></a>lv_obj_get_style_margin_top</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_margin_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_margin_top &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[7c5]"></a>lv_obj_get_style_opa_scale</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_opa_scale))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_opa_scale &rArr;  _lv_obj_get_style_opa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
</UL>

<P><STRONG><a name="[7e2]"></a>lv_obj_get_style_outline_blend_mode</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_outline_blend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_outline_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[7d5]"></a>lv_obj_get_style_outline_opa</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_outline_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_outline_opa &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[7d6]"></a>lv_obj_get_style_outline_pad</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_outline_pad))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_outline_pad &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[7d4]"></a>lv_obj_get_style_outline_width</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_outline_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_outline_width &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[7e3]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[7e4]"></a>lv_obj_get_style_pad_inner</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_pad_inner))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_pad_inner &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[7e5]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_pad_left &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[7e6]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_pad_right &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[7e7]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_pad_top &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[7e8]"></a>lv_obj_get_style_pattern_blend_mode</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_pattern_blend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_pattern_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[7e9]"></a>lv_obj_get_style_pattern_image</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_pattern_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_pattern_image &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[7ea]"></a>lv_obj_get_style_pattern_recolor</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_pattern_recolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_pattern_recolor &rArr; _lv_obj_get_style_color &rArr; lv_obj_get_state &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[7bf]"></a>lv_obj_get_style_radius</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_radius &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
</UL>

<P><STRONG><a name="[7eb]"></a>lv_obj_get_style_shadow_blend_mode</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_shadow_blend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_shadow_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[7cb]"></a>lv_obj_get_style_shadow_ofs_x</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_shadow_ofs_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_shadow_ofs_x &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[7cc]"></a>lv_obj_get_style_shadow_ofs_y</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_shadow_ofs_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_shadow_ofs_y &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[7c9]"></a>lv_obj_get_style_shadow_opa</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_shadow_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_shadow_opa &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[7ca]"></a>lv_obj_get_style_shadow_spread</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_shadow_spread))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_shadow_spread &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[7c8]"></a>lv_obj_get_style_shadow_width</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_shadow_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_shadow_width &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[7ec]"></a>lv_obj_get_style_text_blend_mode</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_text_blend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_text_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[7ed]"></a>lv_obj_get_style_text_decor</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_text_decor))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_text_decor &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[7ee]"></a>lv_obj_get_style_text_font</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_text_font &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[7ef]"></a>lv_obj_get_style_text_letter_space</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_text_letter_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_text_letter_space &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[7f0]"></a>lv_obj_get_style_text_line_space</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_text_line_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_text_line_space &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[7f1]"></a>lv_obj_get_style_transform_angle</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_transform_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_transform_angle &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[7c1]"></a>lv_obj_get_style_transform_height</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_transform_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_transform_height &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
</UL>

<P><STRONG><a name="[7c0]"></a>lv_obj_get_style_transform_width</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_transform_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_transform_width &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
</UL>

<P><STRONG><a name="[7f2]"></a>lv_obj_get_style_transform_zoom</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_transform_zoom))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_transform_zoom &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[7d1]"></a>lv_obj_get_style_value_align</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_value_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_value_align &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[7f3]"></a>lv_obj_get_style_value_blend_mode</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_value_blend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_value_blend_mode &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[7d0]"></a>lv_obj_get_style_value_font</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_value_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_value_font &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[7cf]"></a>lv_obj_get_style_value_letter_space</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_value_letter_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_value_letter_space &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[7d2]"></a>lv_obj_get_style_value_ofs_x</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_value_ofs_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_value_ofs_x &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[7d3]"></a>lv_obj_get_style_value_ofs_y</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_value_ofs_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_value_ofs_y &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[7ce]"></a>lv_obj_get_style_value_opa</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_value_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_value_opa &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[7cd]"></a>lv_obj_get_style_value_str</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_value_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
</UL>

<P><STRONG><a name="[dc]"></a>lv_obj_signal</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, lv_obj.o(i.lv_obj_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = lv_obj_signal &rArr; lv_obj_clear_state &rArr; lv_obj_set_state &rArr; style_snapshot &rArr; lv_obj_init_draw_rect_dsc &rArr; lv_obj_get_style_value_opa &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_focused_obj
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_pad
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_realign
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_handle_get_type_signal
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean_style_list
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(i.lv_obj_create)
</UL>
<P><STRONG><a name="[7b2]"></a>obj_align_core</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, lv_obj.o(i.obj_align_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = obj_align_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_align
</UL>
<BR>[Called By]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
</UL>

<P><STRONG><a name="[7b4]"></a>obj_align_mid_core</STRONG> (Thumb, 706 bytes, Stack size 72 bytes, lv_obj.o(i.obj_align_mid_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_mid
</UL>

<P><STRONG><a name="[7bd]"></a>obj_del_core</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, lv_obj.o(i.obj_del_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + In Cycle
<LI>Call Chain = obj_del_core &rArr;  obj_del_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_obj_act
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_mark_deleted
</UL>
<BR>[Called By]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[7fb]"></a>refresh_children_position</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lv_obj.o(i.refresh_children_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = refresh_children_position &rArr;  refresh_children_position (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_position
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_position
</UL>

<P><STRONG><a name="[7f8]"></a>refresh_children_style</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_obj.o(i.refresh_children_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + In Cycle
<LI>Call Chain = refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
</UL>
<BR>[Called By]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
</UL>

<P><STRONG><a name="[7fa]"></a>report_style_mod_core</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, lv_obj.o(i.report_style_mod_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + In Cycle
<LI>Call Chain = report_style_mod_core &rArr;  report_style_mod_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_mod_core
</UL>
<BR>[Called By]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_mod
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_mod_core
</UL>

<P><STRONG><a name="[6f2]"></a>style_prop_is_cacheble</STRONG> (Thumb, 272 bytes, Stack size 0 bytes, lv_obj.o(i.style_prop_is_cacheble))
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_style_cache
</UL>

<P><STRONG><a name="[7fc]"></a>style_snapshot</STRONG> (Thumb, 468 bytes, Stack size 32 bytes, lv_obj.o(i.style_snapshot))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = style_snapshot &rArr; lv_obj_init_draw_rect_dsc &rArr; lv_obj_get_style_value_opa &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_disable_style_caching
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_zoom
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_angle
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_inner
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_scale
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_top
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_right
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_left
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_bottom
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_clip_corner
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_post
</UL>
<BR>[Called By]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[7fd]"></a>style_snapshot_compare</STRONG> (Thumb, 402 bytes, Stack size 16 bytes, lv_obj.o(i.style_snapshot_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = style_snapshot_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[de]"></a>trans_anim_cb</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, lv_obj.o(i.trans_anim_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = trans_anim_cb &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_transition_style
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
<LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(i.lv_obj_set_state)
</UL>
<P><STRONG><a name="[e0]"></a>trans_anim_ready_cb</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, lv_obj.o(i.trans_anim_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = trans_anim_ready_cb &rArr; lv_style_remove_prop &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_transition_style
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(i.lv_obj_set_state)
</UL>
<P><STRONG><a name="[df]"></a>trans_anim_start_cb</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lv_obj.o(i.trans_anim_start_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = trans_anim_start_cb &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(i.lv_obj_set_state)
</UL>
<P><STRONG><a name="[7fe]"></a>trans_create</STRONG> (Thumb, 864 bytes, Stack size 72 bytes, lv_obj.o(i.trans_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = trans_create &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_transition_style
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[7b8]"></a>trans_del</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, lv_obj.o(i.trans_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = trans_del &rArr; lv_style_remove_prop &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_transition_style
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean_style_list
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[3ac]"></a>update_style_cache</STRONG> (Thumb, 760 bytes, Stack size 32 bytes, lv_obj.o(i.update_style_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_prop_is_cacheble
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_str
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_blend_mode
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_zoom
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_angle
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_decor
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_blend_mode
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_width
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_blend_mode
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_radius
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pattern_image
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pattern_blend_mode
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_width
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_blend_mode
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_scale
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_top
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_right
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_left
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_bottom
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_line_blend_mode
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_image_recolor_opa
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_image_blend_mode
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_clip_corner
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_side
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_post
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_blend_mode
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_opa
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_blend_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>

<P><STRONG><a name="[6f4]"></a>update_style_cache_children</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, lv_obj.o(i.update_style_cache_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + In Cycle
<LI>Call Chain = update_style_cache_children &rArr;  update_style_cache_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_font_normal
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_decor
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_scale
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_image_recolor_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_style_cache
</UL>

<P><STRONG><a name="[39a]"></a>lv_area_copy</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, lv_refr.o(i.lv_area_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_join_area
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
</UL>

<P><STRONG><a name="[808]"></a>lv_area_get_height</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_refr.o(i.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area
</UL>

<P><STRONG><a name="[36d]"></a>lv_area_get_width</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_refr.o(i.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area
</UL>

<P><STRONG><a name="[806]"></a>lv_refr_area</STRONG> (Thumb, 412 bytes, Stack size 48 bytes, lv_refr.o(i.lv_refr_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 1660<LI>Call Chain = lv_refr_area &rArr; lv_refr_area_part &rArr; lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr; lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_true_double_buf
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_areas
</UL>

<P><STRONG><a name="[807]"></a>lv_refr_area_part</STRONG> (Thumb, 350 bytes, Stack size 120 bytes, lv_refr.o(i.lv_refr_area_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 1612<LI>Call Chain = lv_refr_area_part &rArr; lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr; lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_true_double_buf
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_double_buf
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_flush
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area
</UL>

<P><STRONG><a name="[368]"></a>lv_refr_areas</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, lv_refr.o(i.lv_refr_areas))
<BR><BR>[Stack]<UL><LI>Max Depth = 1676<LI>Call Chain = lv_refr_areas &rArr; lv_refr_area &rArr; lv_refr_area_part &rArr; lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr; lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
</UL>

<P><STRONG><a name="[809]"></a>lv_refr_get_top_obj</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, lv_refr.o(i.lv_refr_get_top_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + In Cycle
<LI>Call Chain = lv_refr_get_top_obj &rArr;  lv_refr_get_top_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[367]"></a>lv_refr_join_area</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, lv_refr.o(i.lv_refr_join_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lv_refr_join_area &rArr; lv_area_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_join
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_on
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
</UL>

<P><STRONG><a name="[80e]"></a>lv_refr_obj</STRONG> (Thumb, 264 bytes, Stack size 64 bytes, lv_refr.o(i.lv_refr_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + In Cycle
<LI>Call Chain = lv_refr_obj &rArr;  lv_refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
</UL>

<P><STRONG><a name="[80b]"></a>lv_refr_obj_and_children</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lv_refr.o(i.lv_refr_obj_and_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = lv_refr_obj_and_children &rArr; lv_refr_obj &rArr;  lv_refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
</UL>
<BR>[Called By]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[36a]"></a>lv_refr_vdb_flush</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, lv_refr.o(i.lv_refr_vdb_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_refr_vdb_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_double_buf
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[3b5]"></a>_lv_memcpy_small</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, lv_style.o(i._lv_memcpy_small))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_ptr
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_opa
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_int
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_color
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>

<P><STRONG><a name="[65a]"></a>get_alloc_local_style</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lv_style.o(i.get_alloc_local_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = get_alloc_local_style &rArr; _lv_style_list_add_style &rArr; _lv_style_list_remove_style &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_get_style
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_style
</UL>
<BR>[Called By]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_copy
</UL>

<P><STRONG><a name="[3b9]"></a>get_next_prop_index</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lv_style.o(i.get_next_prop_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_next_prop_index
</UL>
<BR>[Calls]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_prop_size
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_mem_size
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
</UL>

<P><STRONG><a name="[663]"></a>get_prop_size</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lv_style.o(i.get_prop_size))
<BR><BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_prop_index
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
</UL>

<P><STRONG><a name="[3b4]"></a>get_property_index</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, lv_style.o(i.get_property_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = get_property_index &rArr; get_style_prop_id &rArr; get_style_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_id
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_attr
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_prop_index
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_ptr
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_opa
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_int
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_color
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>

<P><STRONG><a name="[667]"></a>get_style_prop</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, lv_style.o(i.get_style_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_id
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_attr
</UL>

<P><STRONG><a name="[3b6]"></a>get_style_prop_attr</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_style.o(i.get_style_prop_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_style_prop_attr &rArr; get_style_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_ptr
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_opa
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_int
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_color
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>

<P><STRONG><a name="[3ba]"></a>get_style_prop_id</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_style.o(i.get_style_prop_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_style_prop_id &rArr; get_style_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_mem_size
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
</UL>

<P><STRONG><a name="[3c2]"></a>lv_style_list_get_style</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lv_style.o(i.lv_style_list_get_style))
<BR><BR>[Called By]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_alloc_local_style
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_ptr
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_opa
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_int
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_color
</UL>

<P><STRONG><a name="[3c7]"></a>style_resize</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_style.o(i.style_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>

<P><STRONG><a name="[c3]"></a>color_blend_true_color_additive</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, lv_draw_blend.o(i.color_blend_true_color_additive))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = color_blend_true_color_additive &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_draw_blend.o(i.fill_blended)
<LI> lv_draw_blend.o(i.map_blended)
</UL>
<P><STRONG><a name="[c4]"></a>color_blend_true_color_subtractive</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, lv_draw_blend.o(i.color_blend_true_color_subtractive))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = color_blend_true_color_subtractive &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_draw_blend.o(i.fill_blended)
<LI> lv_draw_blend.o(i.map_blended)
</UL>
<P><STRONG><a name="[361]"></a>fill_blended</STRONG> (Thumb, 346 bytes, Stack size 80 bytes, lv_draw_blend.o(i.fill_blended))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = fill_blended &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
</UL>

<P><STRONG><a name="[360]"></a>fill_normal</STRONG> (Thumb, 924 bytes, Stack size 88 bytes, lv_draw_blend.o(i.fill_normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fill_normal &rArr; lv_color_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_fill
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix_premult
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
</UL>

<P><STRONG><a name="[35f]"></a>fill_set_px</STRONG> (Thumb, 204 bytes, Stack size 72 bytes, lv_draw_blend.o(i.fill_set_px))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fill_set_px
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
</UL>

<P><STRONG><a name="[61f]"></a>lv_area_get_height</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_blend.o(i.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_normal
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_normal
</UL>

<P><STRONG><a name="[35e]"></a>lv_area_get_width</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_blend.o(i.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_set_px
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_normal
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_blended
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_set_px
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_normal
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_blended
</UL>

<P><STRONG><a name="[4ad]"></a>lv_color_mix</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, lv_draw_blend.o(i.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_normal
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_normal
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_blended
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_blend_true_color_subtractive
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_blend_true_color_additive
</UL>

<P><STRONG><a name="[621]"></a>lv_color_mix_premult</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, lv_draw_blend.o(i.lv_color_mix_premult))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_mix_premult
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_normal
</UL>

<P><STRONG><a name="[365]"></a>map_blended</STRONG> (Thumb, 368 bytes, Stack size 80 bytes, lv_draw_blend.o(i.map_blended))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = map_blended
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
</UL>

<P><STRONG><a name="[364]"></a>map_normal</STRONG> (Thumb, 938 bytes, Stack size 80 bytes, lv_draw_blend.o(i.map_normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = map_normal &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
</UL>

<P><STRONG><a name="[363]"></a>map_set_px</STRONG> (Thumb, 284 bytes, Stack size 80 bytes, lv_draw_blend.o(i.map_set_px))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = map_set_px
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
</UL>

<P><STRONG><a name="[379]"></a>_lv_img_buf_transform</STRONG> (Thumb, 458 bytes, Stack size 72 bytes, lv_draw_img.o(i._lv_img_buf_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = _lv_img_buf_transform &rArr; _lv_img_buf_transform_anti_alias &rArr; lv_img_buf_get_px_color &rArr; _lv_memcpy_small
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_color
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_alpha
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_anti_alias
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[37a]"></a>_lv_memcpy_small</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, lv_draw_img.o(i._lv_memcpy_small))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform
</UL>

<P><STRONG><a name="[758]"></a>lv_area_copy</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_draw_img.o(i.lv_area_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_area_copy &rArr; _lv_memcpy_small
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[772]"></a>lv_area_get_height</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_img.o(i.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[771]"></a>lv_area_get_width</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_img.o(i.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[773]"></a>lv_color_mix_premult</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, lv_draw_img.o(i.lv_color_mix_premult))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_mix_premult
</UL>
<BR>[Called By]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[770]"></a>lv_draw_map</STRONG> (Thumb, 1442 bytes, Stack size 248 bytes, lv_draw_img.o(i.lv_draw_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = lv_draw_map &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_get_cnt
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_ff
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_init
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix_premult
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
</UL>

<P><STRONG><a name="[767]"></a>lv_img_draw_core</STRONG> (Thumb, 472 bytes, Stack size 104 bytes, lv_draw_img.o(i.lv_img_draw_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 1468<LI>Call Chain = lv_img_draw_core &rArr; show_error &rArr; lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_read_line
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_height
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_is_chroma_keyed
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_has_alpha
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
</UL>

<P><STRONG><a name="[766]"></a>show_error</STRONG> (Thumb, 66 bytes, Stack size 144 bytes, lv_draw_img.o(i.show_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 1364<LI>Call Chain = show_error &rArr; lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
</UL>

<P><STRONG><a name="[590]"></a>draw_letter_normal</STRONG> (Thumb, 786 bytes, Stack size 152 bytes, lv_draw_label.o(i.draw_letter_normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = draw_letter_normal &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_get_cnt
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
</UL>

<P><STRONG><a name="[592]"></a>draw_letter_subpx</STRONG> (Thumb, 1140 bytes, Stack size 176 bytes, lv_draw_label.o(i.draw_letter_subpx))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = draw_letter_subpx &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_get_cnt
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
</UL>

<P><STRONG><a name="[76a]"></a>hex_char_to_num</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, lv_draw_label.o(i.hex_char_to_num))
<BR><BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[591]"></a>lv_area_get_width</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_label.o(i.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_subpx
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
</UL>

<P><STRONG><a name="[76c]"></a>lv_draw_letter</STRONG> (Thumb, 254 bytes, Stack size 80 bytes, lv_draw_label.o(i.lv_draw_letter))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = lv_draw_letter &rArr; draw_letter_subpx &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_bitmap
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_subpx
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
</UL>
<BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[593]"></a>draw_line_hor</STRONG> (Thumb, 608 bytes, Stack size 128 bytes, lv_draw_line.o(i.draw_line_hor))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = draw_line_hor &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_get_cnt
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_ff
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
</UL>

<P><STRONG><a name="[595]"></a>draw_line_skew</STRONG> (Thumb, 1228 bytes, Stack size 336 bytes, lv_draw_line.o(i.draw_line_skew))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = draw_line_skew &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_ff
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_points_init
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
</UL>

<P><STRONG><a name="[598]"></a>draw_line_ver</STRONG> (Thumb, 580 bytes, Stack size 120 bytes, lv_draw_line.o(i.draw_line_ver))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = draw_line_ver &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_get_cnt
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_ff
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
</UL>

<P><STRONG><a name="[594]"></a>lv_area_get_width</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_line.o(i.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
</UL>

<P><STRONG><a name="[70c]"></a>line_mask_flat</STRONG> (Thumb, 482 bytes, Stack size 56 bytes, lv_draw_mask.o(i.line_mask_flat))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = line_mask_flat &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mask_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line
</UL>

<P><STRONG><a name="[70e]"></a>line_mask_steep</STRONG> (Thumb, 676 bytes, Stack size 80 bytes, lv_draw_mask.o(i.line_mask_steep))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = line_mask_steep &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mask_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line
</UL>

<P><STRONG><a name="[774]"></a>lv_area_copy</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, lv_draw_mask.o(i.lv_area_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
</UL>

<P><STRONG><a name="[776]"></a>lv_area_get_height</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_mask.o(i.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
</UL>

<P><STRONG><a name="[775]"></a>lv_area_get_width</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_mask.o(i.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
</UL>

<P><STRONG><a name="[d3]"></a>lv_draw_mask_line</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, lv_draw_mask.o(i.lv_draw_mask_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = lv_draw_mask_line &rArr; line_mask_steep &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_mask_steep
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_mask_flat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_mask.o(i.lv_draw_mask_line_points_init)
</UL>
<P><STRONG><a name="[d4]"></a>lv_draw_mask_radius</STRONG> (Thumb, 1394 bytes, Stack size 120 bytes, lv_draw_mask.o(i.lv_draw_mask_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_draw_mask_radius &rArr; lv_area_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_sqrt
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mask_mix
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_mask.o(i.lv_draw_mask_radius_init)
</UL>
<P><STRONG><a name="[70d]"></a>mask_mix</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lv_draw_mask.o(i.mask_mix))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_mask_steep
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_mask_flat
</UL>

<P><STRONG><a name="[582]"></a>draw_bg</STRONG> (Thumb, 1330 bytes, Stack size 184 bytes, lv_draw_rect.o(i.draw_bg))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = draw_bg &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_get_cnt
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grad_get
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[58d]"></a>draw_border</STRONG> (Thumb, 828 bytes, Stack size 208 bytes, lv_draw_rect.o(i.draw_border))
<BR><BR>[Stack]<UL><LI>Max Depth = 796<LI>Call Chain = draw_border &rArr; draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_ff
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[58e]"></a>draw_full_border</STRONG> (Thumb, 1218 bytes, Stack size 216 bytes, lv_draw_rect.o(i.draw_full_border))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_get_cnt
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_ff
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_outline
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
</UL>

<P><STRONG><a name="[599]"></a>draw_outline</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, lv_draw_rect.o(i.draw_outline))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = draw_outline &rArr; draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
</UL>
<BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[59a]"></a>draw_pattern</STRONG> (Thumb, 686 bytes, Stack size 152 bytes, lv_draw_rect.o(i.draw_pattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + In Cycle
<LI>Call Chain = draw_pattern &rArr;  lv_draw_label (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_size
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
</UL>
<BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[5a0]"></a>draw_shadow</STRONG> (Thumb, 3808 bytes, Stack size 216 bytes, lv_draw_rect.o(i.draw_shadow))
<BR><BR>[Stack]<UL><LI>Max Depth = 740<LI>Call Chain = draw_shadow &rArr; shadow_draw_corner_buf &rArr; shadow_blur_corner &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_get_cnt
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[5a2]"></a>draw_value_str</STRONG> (Thumb, 242 bytes, Stack size 80 bytes, lv_draw_rect.o(i.draw_value_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + In Cycle
<LI>Call Chain = draw_value_str &rArr;  lv_draw_label (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_size
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_align
</UL>
<BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[589]"></a>grad_get</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, lv_draw_rect.o(i.grad_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = grad_get &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[583]"></a>lv_area_copy</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, lv_draw_rect.o(i.lv_area_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_outline
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[586]"></a>lv_area_get_height</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_rect.o(i.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[584]"></a>lv_area_get_width</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_rect.o(i.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[673]"></a>lv_color_mix</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, lv_draw_rect.o(i.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grad_get
</UL>

<P><STRONG><a name="[9b8]"></a>shadow_blur_corner</STRONG> (Thumb, 372 bytes, Stack size 48 bytes, lv_draw_rect.o(i.shadow_blur_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = shadow_blur_corner &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
</UL>

<P><STRONG><a name="[5a1]"></a>shadow_draw_corner_buf</STRONG> (Thumb, 452 bytes, Stack size 104 bytes, lv_draw_rect.o(i.shadow_draw_corner_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = shadow_draw_corner_buf &rArr; shadow_blur_corner &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_ff
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
</UL>

<P><STRONG><a name="[37e]"></a>_lv_memcpy_small</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, lv_img_buf.o(i._lv_memcpy_small))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_color
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_anti_alias
</UL>

<P><STRONG><a name="[37f]"></a>lv_color_mix</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, lv_img_buf.o(i.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_anti_alias
</UL>

<P><STRONG><a name="[793]"></a>lv_color_make</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, lv_img_decoder.o(i.lv_color_make))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
</UL>

<P><STRONG><a name="[790]"></a>lv_img_decoder_built_in_line_alpha</STRONG> (Thumb, 458 bytes, Stack size 104 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_line_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = lv_img_decoder_built_in_line_alpha &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
</UL>

<P><STRONG><a name="[791]"></a>lv_img_decoder_built_in_line_indexed</STRONG> (Thumb, 422 bytes, Stack size 72 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_line_indexed))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = lv_img_decoder_built_in_line_indexed &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
</UL>

<P><STRONG><a name="[792]"></a>lv_img_decoder_built_in_line_true_color</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_line_true_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_img_decoder_built_in_line_true_color &rArr; lv_fs_read
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
</UL>

<P><STRONG><a name="[4f9]"></a>bits_write</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, lv_font_fmt_txt.o(i.bits_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bits_write
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompress
</UL>

<P><STRONG><a name="[4f7]"></a>decompress</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, lv_font_fmt_txt.o(i.decompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = decompress &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompress_line
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bits_write
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_bitmap_fmt_txt
</UL>

<P><STRONG><a name="[4f8]"></a>decompress_line</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lv_font_fmt_txt.o(i.decompress_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = decompress_line &rArr; rle_next &rArr; get_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rle_next
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompress
</UL>

<P><STRONG><a name="[91d]"></a>get_bits</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, lv_font_fmt_txt.o(i.get_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rle_next
</UL>

<P><STRONG><a name="[660]"></a>get_glyph_dsc_id</STRONG> (Thumb, 402 bytes, Stack size 40 bytes, lv_font_fmt_txt.o(i.get_glyph_dsc_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_glyph_dsc_id &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_utils_bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc_fmt_txt
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_bitmap_fmt_txt
</UL>

<P><STRONG><a name="[662]"></a>get_kern_value</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, lv_font_fmt_txt.o(i.get_kern_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = get_kern_value &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_utils_bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc_fmt_txt
</UL>

<P><STRONG><a name="[c8]"></a>kern_pair_16_compare</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, lv_font_fmt_txt.o(i.kern_pair_16_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = kern_pair_16_compare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(i.get_kern_value)
</UL>
<P><STRONG><a name="[c7]"></a>kern_pair_8_compare</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, lv_font_fmt_txt.o(i.kern_pair_8_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = kern_pair_8_compare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(i.get_kern_value)
</UL>
<P><STRONG><a name="[4fa]"></a>rle_next</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, lv_font_fmt_txt.o(i.rle_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rle_next &rArr; get_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompress_line
</UL>

<P><STRONG><a name="[c6]"></a>unicode_list_compare</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(i.unicode_list_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(i.get_glyph_dsc_id)
</UL>
<P><STRONG><a name="[353]"></a>anim_mark_list_change</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_anim.o(i.anim_mark_list_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = anim_mark_list_change &rArr; lv_task_set_prio &rArr; _lv_ll_move_before &rArr; _lv_ll_remove &rArr; node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_set_prio
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_ready_handler
</UL>

<P><STRONG><a name="[422]"></a>anim_ready_handler</STRONG> (Thumb, 180 bytes, Stack size 80 bytes, lv_anim.o(i.anim_ready_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = anim_ready_handler &rArr; lv_mem_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
</UL>

<P><STRONG><a name="[9e]"></a>anim_task</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, lv_anim.o(i.anim_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = anim_task &rArr; anim_ready_handler &rArr; lv_mem_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_ready_handler
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_linear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_anim.o(i._lv_anim_core_init)
</UL>
<P><STRONG><a name="[356]"></a>lv_area_get_height</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_area.o(i.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_align
</UL>

<P><STRONG><a name="[355]"></a>lv_area_get_width</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_area.o(i.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_align
</UL>

<P><STRONG><a name="[359]"></a>lv_point_within_circle</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, lv_area.o(i.lv_point_within_circle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_point_within_circle
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>

<P><STRONG><a name="[759]"></a>lv_color_mix</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, lv_color.o(i.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_lighten
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_darken
</UL>

<P><STRONG><a name="[77f]"></a>lv_fs_get_real_path</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lv_fs.o(i.lv_fs_get_real_path))
<BR><BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
</UL>

<P><STRONG><a name="[39e]"></a>node_set_next</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lv_ll.o(i.node_set_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = node_set_next
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_chg_list
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_move_before
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_prev
</UL>

<P><STRONG><a name="[39d]"></a>node_set_prev</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, lv_ll.o(i.node_set_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = node_set_prev
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_chg_list
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_move_before
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_prev
</UL>

<P><STRONG><a name="[814]"></a>lv_task_exec</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lv_task.o(i.lv_task_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = lv_task_exec &rArr; lv_task_del &rArr; lv_mem_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_del
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_time_remaining
</UL>
<BR>[Called By]<UL><LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
</UL>

<P><STRONG><a name="[815]"></a>lv_task_time_remaining</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lv_task.o(i.lv_task_time_remaining))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_task_time_remaining &rArr; lv_tick_elaps
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
</UL>
<BR>[Called By]<UL><LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_exec
</UL>

<P><STRONG><a name="[82a]"></a>_lv_memcpy_small</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, lv_txt.o(i._lv_memcpy_small))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_utf8_conv_wc
</UL>

<P><STRONG><a name="[3ce]"></a>lv_txt_get_next_word</STRONG> (Thumb, 326 bytes, Stack size 72 bytes, lv_txt.o(i.lv_txt_get_next_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_is_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
</UL>

<P><STRONG><a name="[16]"></a>lv_txt_unicode_to_utf8</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, lv_txt.o(i.lv_txt_unicode_to_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_txt_unicode_to_utf8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>lv_txt_utf8_conv_wc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lv_txt.o(i.lv_txt_utf8_conv_wc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_txt_utf8_conv_wc &rArr; _lv_memcpy_small
</UL>
<BR>[Calls]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>lv_txt_utf8_get_byte_id</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lv_txt.o(i.lv_txt_utf8_get_byte_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_get_byte_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>lv_txt_utf8_get_char_id</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lv_txt.o(i.lv_txt_utf8_get_char_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_get_char_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>lv_txt_utf8_get_length</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_txt.o(i.lv_txt_utf8_get_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_txt_utf8_get_length
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>lv_txt_utf8_next</STRONG> (Thumb, 328 bytes, Stack size 8 bytes, lv_txt.o(i.lv_txt_utf8_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_txt_utf8_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>lv_txt_utf8_prev</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, lv_txt.o(i.lv_txt_utf8_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_txt_utf8_prev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>lv_txt_utf8_size</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, lv_txt.o(i.lv_txt_utf8_size))
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[423]"></a>apply_theme</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lv_theme.o(i.apply_theme))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = apply_theme &rArr;  apply_theme (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme
</UL>
<BR>[Called By]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme
</UL>

<P><STRONG><a name="[480]"></a>clear_styles</STRONG> (Thumb, 856 bytes, Stack size 16 bytes, lv_theme.o(i.clear_styles))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = clear_styles &rArr; lv_obj_clean_style_list &rArr; trans_del &rArr; lv_style_remove_prop &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean_style_list
</UL>
<BR>[Called By]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
</UL>

<P><STRONG><a name="[424]"></a>arc_init</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, lv_theme_material.o(i.arc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = arc_init &rArr; lv_style_set_line_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_width
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_rounded
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_color
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[430]"></a>bar_init</STRONG> (Thumb, 430 bytes, Stack size 24 bytes, lv_theme_material.o(i.bar_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = bar_init &rArr; lv_style_set_value_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_value_color
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_time
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_prop_6
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_width
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_opa
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_color
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[43a]"></a>basic_init</STRONG> (Thumb, 4728 bytes, Stack size 32 bytes, lv_theme_material.o(i.basic_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = basic_init &rArr; lv_style_set_value_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_size_category
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_darken
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_value_font
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_value_color
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_time
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_prop_6
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_prop_5
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_delay
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_inner
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_width
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_opa
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_color
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_width
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_color
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_image_recolor
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_opa
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[818]"></a>btn_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_theme_material.o(i.btn_init))
<BR><BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[81f]"></a>btnmatrix_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_theme_material.o(i.btnmatrix_init))
<BR><BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[451]"></a>calendar_init</STRONG> (Thumb, 1814 bytes, Stack size 32 bytes, lv_theme_material.o(i.calendar_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = calendar_init &rArr; lv_style_set_text_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_size_category
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_inner
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_margin_top
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_margin_bottom
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_side
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[46f]"></a>chart_init</STRONG> (Thumb, 592 bytes, Stack size 24 bytes, lv_theme_material.o(i.chart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = chart_init &rArr; lv_style_set_text_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_size
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_inner
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_width
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_color
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[47d]"></a>checkbox_init</STRONG> (Thumb, 832 bytes, Stack size 24 bytes, lv_theme_material.o(i.checkbox_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = checkbox_init &rArr; lv_style_set_outline_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_time
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_prop_6
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pattern_opa
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_inner
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_width
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_pad
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_opa
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_color
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[817]"></a>cont_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_theme_material.o(i.cont_init))
<BR><BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[4b9]"></a>cpicker_init</STRONG> (Thumb, 628 bytes, Stack size 24 bytes, lv_theme_material.o(i.cpicker_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = cpicker_init &rArr; lv_style_set_border_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_width
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_inner
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[4cc]"></a>ddlist_init</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, lv_theme_material.o(i.ddlist_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = ddlist_init &rArr; lv_style_set_text_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_line_space
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_clip_corner
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[645]"></a>gauge_init</STRONG> (Thumb, 1228 bytes, Stack size 32 bytes, lv_theme_material.o(i.gauge_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = gauge_init &rArr; lv_style_set_scale_grad_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_size
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_width
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_grad_color
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_end_line_width
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_end_color
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_inner
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_width
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_color
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[81a]"></a>img_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_theme_material.o(i.img_init))
<BR><BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[702]"></a>keyboard_init</STRONG> (Thumb, 490 bytes, Stack size 16 bytes, lv_theme_material.o(i.keyboard_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = keyboard_init &rArr; lv_style_set_border_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_inner
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_side
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[819]"></a>label_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_theme_material.o(i.label_init))
<BR><BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[706]"></a>led_init</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, lv_theme_material.o(i.led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = led_init &rArr; lv_style_set_shadow_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_lighten
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_width
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_color
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_opa
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[81b]"></a>line_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_theme_material.o(i.line_init))
<BR><BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[70f]"></a>linemeter_init</STRONG> (Thumb, 554 bytes, Stack size 16 bytes, lv_theme_material.o(i.linemeter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = linemeter_init &rArr; lv_style_set_scale_grad_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_width
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_grad_color
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_end_line_width
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_end_color
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_inner
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_width
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_color
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[719]"></a>list_init</STRONG> (Thumb, 1898 bytes, Stack size 16 bytes, lv_theme_material.o(i.list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = list_init &rArr; lv_style_set_text_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_size_category
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_darken
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_time
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_prop_6
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_prop_5
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transform_width
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_inner
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_width
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_pad
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_color
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_image_recolor
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_clip_corner
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_side
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[42a]"></a>lv_color_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_color_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_color_hex &rArr; lv_color_make
</UL>
<BR>[Calls]<UL><LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textarea_init
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_init
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddlist_init
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>

<P><STRONG><a name="[439]"></a>lv_color_hex3</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_color_hex3))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_color_hex3 &rArr; lv_color_make
</UL>
<BR>[Calls]<UL><LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textarea_init
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_init
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgbox_init
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddlist_init
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
</UL>

<P><STRONG><a name="[75a]"></a>lv_color_make</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, lv_theme_material.o(i.lv_color_make))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>

<P><STRONG><a name="[445]"></a>lv_color_mix</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, lv_theme_material.o(i.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[432]"></a>lv_style_set_bg_color</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, lv_theme_material.o(i.lv_style_set_bg_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = lv_style_set_bg_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_init
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spinbox_init
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roller_init
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_init
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddlist_init
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
</UL>

<P><STRONG><a name="[431]"></a>lv_style_set_bg_opa</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_bg_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_style_set_bg_opa &rArr; _lv_style_set_opa &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_init
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spinbox_init
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roller_init
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_init
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddlist_init
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
</UL>

<P><STRONG><a name="[43d]"></a>lv_style_set_border_color</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, lv_theme_material.o(i.lv_style_set_border_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = lv_style_set_border_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textarea_init
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[446]"></a>lv_style_set_border_opa</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_border_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_style_set_border_opa &rArr; _lv_style_set_opa &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[454]"></a>lv_style_set_border_side</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_border_side))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_style_set_border_side &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textarea_init
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
</UL>

<P><STRONG><a name="[43e]"></a>lv_style_set_border_width</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_style_set_border_width &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textarea_init
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[4ce]"></a>lv_style_set_clip_corner</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_clip_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_style_set_clip_corner &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddlist_init
</UL>

<P><STRONG><a name="[43f]"></a>lv_style_set_image_recolor</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, lv_theme_material.o(i.lv_style_set_image_recolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = lv_style_set_image_recolor &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[426]"></a>lv_style_set_line_color</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, lv_theme_material.o(i.lv_style_set_line_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = lv_style_set_line_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>

<P><STRONG><a name="[429]"></a>lv_style_set_line_rounded</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_line_rounded))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_style_set_line_rounded &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>

<P><STRONG><a name="[428]"></a>lv_style_set_line_width</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_line_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_style_set_line_width &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>

<P><STRONG><a name="[453]"></a>lv_style_set_margin_bottom</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_margin_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_style_set_margin_bottom &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
</UL>

<P><STRONG><a name="[452]"></a>lv_style_set_margin_top</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_margin_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_style_set_margin_top &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
</UL>

<P><STRONG><a name="[434]"></a>lv_style_set_outline_color</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, lv_theme_material.o(i.lv_style_set_outline_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = lv_style_set_outline_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
</UL>

<P><STRONG><a name="[435]"></a>lv_style_set_outline_opa</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_outline_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_style_set_outline_opa &rArr; _lv_style_set_opa &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
</UL>

<P><STRONG><a name="[47e]"></a>lv_style_set_outline_pad</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_outline_pad))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_style_set_outline_pad &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
</UL>

<P><STRONG><a name="[436]"></a>lv_style_set_outline_width</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_outline_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_style_set_outline_width &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
</UL>

<P><STRONG><a name="[42d]"></a>lv_style_set_pad_bottom</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_style_set_pad_bottom &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_init
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spinbox_init
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_init
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>

<P><STRONG><a name="[441]"></a>lv_style_set_pad_inner</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_pad_inner))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_style_set_pad_inner &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[42e]"></a>lv_style_set_pad_left</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_style_set_pad_left &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textarea_init
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_init
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>

<P><STRONG><a name="[42f]"></a>lv_style_set_pad_right</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_style_set_pad_right &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_init
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_init
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>

<P><STRONG><a name="[42c]"></a>lv_style_set_pad_top</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_style_set_pad_top &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_init
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spinbox_init
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>

<P><STRONG><a name="[47f]"></a>lv_style_set_pattern_opa</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_pattern_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_style_set_pattern_opa &rArr; _lv_style_set_opa &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
</UL>

<P><STRONG><a name="[42b]"></a>lv_style_set_radius</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_style_set_radius &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_init
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_init
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>

<P><STRONG><a name="[647]"></a>lv_style_set_scale_end_color</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, lv_theme_material.o(i.lv_style_set_scale_end_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = lv_style_set_scale_end_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
</UL>

<P><STRONG><a name="[648]"></a>lv_style_set_scale_end_line_width</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_scale_end_line_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_style_set_scale_end_line_width &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
</UL>

<P><STRONG><a name="[646]"></a>lv_style_set_scale_grad_color</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, lv_theme_material.o(i.lv_style_set_scale_grad_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = lv_style_set_scale_grad_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
</UL>

<P><STRONG><a name="[4ba]"></a>lv_style_set_scale_width</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_scale_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_style_set_scale_width &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
</UL>

<P><STRONG><a name="[709]"></a>lv_style_set_shadow_color</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, lv_theme_material.o(i.lv_style_set_shadow_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = lv_style_set_shadow_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgbox_init
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
</UL>

<P><STRONG><a name="[708]"></a>lv_style_set_shadow_width</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_shadow_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_style_set_shadow_width &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgbox_init
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
</UL>

<P><STRONG><a name="[470]"></a>lv_style_set_size</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_style_set_size &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_init
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
</UL>

<P><STRONG><a name="[43b]"></a>lv_style_set_text_color</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, lv_theme_material.o(i.lv_style_set_text_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = lv_style_set_text_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textarea_init
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spinbox_init
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roller_init
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddlist_init
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[4cd]"></a>lv_style_set_text_line_space</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_text_line_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_style_set_text_line_space &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roller_init
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddlist_init
</UL>

<P><STRONG><a name="[71a]"></a>lv_style_set_transform_width</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_transform_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_style_set_transform_width &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
</UL>

<P><STRONG><a name="[447]"></a>lv_style_set_transition_delay</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_transition_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_style_set_transition_delay &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[444]"></a>lv_style_set_transition_prop_5</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_transition_prop_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_style_set_transition_prop_5 &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[438]"></a>lv_style_set_transition_prop_6</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_transition_prop_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_style_set_transition_prop_6 &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
</UL>

<P><STRONG><a name="[437]"></a>lv_style_set_transition_time</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_transition_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_style_set_transition_time &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
</UL>

<P><STRONG><a name="[433]"></a>lv_style_set_value_color</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, lv_theme_material.o(i.lv_style_set_value_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = lv_style_set_value_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
</UL>

<P><STRONG><a name="[43c]"></a>lv_style_set_value_font</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_value_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_style_set_value_font &rArr; _lv_style_set_ptr &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[820]"></a>msgbox_init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, lv_theme_material.o(i.msgbox_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = msgbox_init &rArr; lv_style_set_shadow_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_width
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_color
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[821]"></a>page_init</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, lv_theme_material.o(i.page_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = page_init &rArr; lv_style_set_bg_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_size
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[824]"></a>roller_init</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, lv_theme_material.o(i.roller_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = roller_init &rArr; lv_style_set_text_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_line_space
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[81c]"></a>slider_init</STRONG> (Thumb, 682 bytes, Stack size 32 bytes, lv_theme_material.o(i.slider_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = slider_init &rArr; lv_style_set_value_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_value_color
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_margin_top
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_margin_bottom
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[823]"></a>spinbox_init</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, lv_theme_material.o(i.spinbox_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = spinbox_init &rArr; lv_style_set_text_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[81e]"></a>spinner_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_theme_material.o(i.spinner_init))
<BR><BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[425]"></a>style_init_reset</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_theme_material.o(i.style_init_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = style_init_reset &rArr; lv_style_reset &rArr; lv_mem_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
</UL>
<BR>[Called By]<UL><LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textarea_init
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_init
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spinbox_init
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roller_init
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_init
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgbox_init
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddlist_init
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>

<P><STRONG><a name="[81d]"></a>switch_init</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, lv_theme_material.o(i.switch_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = switch_init &rArr; lv_style_set_bg_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[827]"></a>table_init</STRONG> (Thumb, 582 bytes, Stack size 16 bytes, lv_theme_material.o(i.table_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = table_init &rArr; lv_style_set_border_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_size_category
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_side
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[825]"></a>tabview_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_theme_material.o(i.tabview_init))
<BR><BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[829]"></a>tabview_win_shared_init</STRONG> (Thumb, 1500 bytes, Stack size 16 bytes, lv_theme_material.o(i.tabview_win_shared_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = tabview_win_shared_init &rArr; lv_style_set_text_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_size_category
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_size
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_inner
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_image_recolor
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_side
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[822]"></a>textarea_init</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, lv_theme_material.o(i.textarea_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = textarea_init &rArr; lv_style_set_text_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init_reset
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_side
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[f6]"></a>theme_apply</STRONG> (Thumb, 2186 bytes, Stack size 24 bytes, lv_theme_material.o(i.theme_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = theme_apply &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_style
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_material.o(i.lv_theme_material_init)
</UL>
<P><STRONG><a name="[826]"></a>tileview_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_theme_material.o(i.tileview_init))
<BR><BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[828]"></a>win_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_theme_material.o(i.win_init))
<BR><BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[da]"></a>lv_img_design</STRONG> (Thumb, 1604 bytes, Stack size 200 bytes, lv_img.o(i.lv_img_design))
<BR><BR>[Stack]<UL><LI>Max Depth = 1692<LI>Call Chain = lv_img_design &rArr; lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr; lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; malloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_custom
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_zoom
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_angle
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_clip_corner
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img.o(i.lv_img_create)
</UL>
<P><STRONG><a name="[7a5]"></a>lv_img_get_style</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_img.o(i.lv_img_get_style))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
</UL>

<P><STRONG><a name="[d9]"></a>lv_img_signal</STRONG> (Thumb, 784 bytes, Stack size 80 bytes, lv_img.o(i.lv_img_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = lv_img_signal &rArr; lv_img_set_src &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_point_on_coords
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_handle_get_type_signal
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_zoom
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_angle
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_get_style
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img.o(i.lv_img_create)
</UL>
<P><STRONG><a name="[798]"></a>lv_obj_get_style_border_post</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lv_img.o(i.lv_obj_get_style_border_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_border_post &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[794]"></a>lv_obj_get_style_clip_corner</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lv_img.o(i.lv_obj_get_style_clip_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_clip_corner &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[79c]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_img.o(i.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[799]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_img.o(i.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_pad_left &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[79a]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_img.o(i.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_pad_right &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[79b]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_img.o(i.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_pad_top &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[795]"></a>lv_obj_get_style_transform_angle</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_img.o(i.lv_obj_get_style_transform_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_transform_angle &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[796]"></a>lv_obj_get_style_transform_zoom</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_img.o(i.lv_obj_get_style_transform_zoom))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_transform_zoom &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[703]"></a>color_to16_maybe</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, littlevgl2rtt.o(i.color_to16_maybe))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fb_flush
</UL>

<P><STRONG><a name="[704]"></a>color_to24</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, littlevgl2rtt.o(i.color_to24))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fb_flush
</UL>

<P><STRONG><a name="[cd]"></a>input_read</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, littlevgl2rtt.o(i.input_read))
<BR>[Address Reference Count : 1]<UL><LI> littlevgl2rtt.o(i.littlevgl2rtt_init)
</UL>
<P><STRONG><a name="[cc]"></a>lcd_fb_flush</STRONG> (Thumb, 476 bytes, Stack size 80 bytes, littlevgl2rtt.o(i.lcd_fb_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lcd_fb_flush &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_flush_ready
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_to24
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_to16_maybe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> littlevgl2rtt.o(i.littlevgl2rtt_init)
</UL>
<P><STRONG><a name="[cb]"></a>lcd_flush</STRONG> (Thumb, 198 bytes, Stack size 64 bytes, littlevgl2rtt.o(i.lcd_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lcd_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_flush_ready
</UL>
<BR>[Address Reference Count : 1]<UL><LI> littlevgl2rtt.o(i.littlevgl2rtt_init)
</UL>
<P><STRONG><a name="[728]"></a>lvgl_task_handler_init</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, littlevgl2rtt.o(i.lvgl_task_handler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = lvgl_task_handler_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;littlevgl2rtt_init
</UL>

<P><STRONG><a name="[f7]"></a>lvgl_task_run</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, littlevgl2rtt.o(i.lvgl_task_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = lvgl_task_run &rArr; lv_task_handler &rArr; lv_task_exec &rArr; lv_task_del &rArr; lv_mem_free &rArr; free &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> littlevgl2rtt.o(i.lvgl_task_handler_init)
</UL>
<P><STRONG><a name="[727]"></a>lvgl_tick_handler_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, littlevgl2rtt.o(i.lvgl_tick_handler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = lvgl_tick_handler_init &rArr; rt_timer_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;littlevgl2rtt_init
</UL>

<P><STRONG><a name="[f8]"></a>lvgl_tick_run</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, littlevgl2rtt.o(i.lvgl_tick_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lvgl_tick_run
</UL>
<BR>[Calls]<UL><LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_inc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> littlevgl2rtt.o(i.lvgl_tick_handler_init)
</UL>
<P><STRONG><a name="[e5]"></a>fs_close</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_port_fs.o(i.fs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = fs_close &rArr; f_close &rArr; f_sync &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_fs.o(i.lv_port_fs_init)
</UL>
<P><STRONG><a name="[ef]"></a>fs_dir_close</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lv_port_fs.o(i.fs_dir_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = fs_dir_close &rArr; f_closedir &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_fs.o(i.lv_port_fs_init)
</UL>
<P><STRONG><a name="[f0]"></a>fs_dir_open</STRONG> (Thumb, 108 bytes, Stack size 280 bytes, lv_port_fs.o(i.fs_dir_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = fs_dir_open &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_fs.o(i.lv_port_fs_init)
</UL>
<P><STRONG><a name="[f1]"></a>fs_dir_read</STRONG> (Thumb, 44 bytes, Stack size 304 bytes, lv_port_fs.o(i.fs_dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 740<LI>Call Chain = fs_dir_read &rArr; f_readdir &rArr; dir_read &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_fs.o(i.lv_port_fs_init)
</UL>
<P><STRONG><a name="[ea]"></a>fs_free</STRONG> (Thumb, 196 bytes, Stack size 64 bytes, lv_port_fs.o(i.fs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = fs_free &rArr; f_getfree &rArr; mount_volume &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_fs.o(i.lv_port_fs_init)
</UL>
<P><STRONG><a name="[805]"></a>fs_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_port_fs.o(i.fs_init))
<BR><BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_fs_init
</UL>

<P><STRONG><a name="[e4]"></a>fs_open</STRONG> (Thumb, 148 bytes, Stack size 160 bytes, lv_port_fs.o(i.fs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = fs_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_fs.o(i.lv_port_fs_init)
</UL>
<P><STRONG><a name="[e6]"></a>fs_read</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, lv_port_fs.o(i.fs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = fs_read &rArr; f_read &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_fs.o(i.lv_port_fs_init)
</UL>
<P><STRONG><a name="[ec]"></a>fs_remove</STRONG> (Thumb, 94 bytes, Stack size 280 bytes, lv_port_fs.o(i.fs_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = fs_remove &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_fs.o(i.lv_port_fs_init)
</UL>
<P><STRONG><a name="[ed]"></a>fs_rename</STRONG> (Thumb, 142 bytes, Stack size 536 bytes, lv_port_fs.o(i.fs_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 1156<LI>Call Chain = fs_rename &rArr; f_rename &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; dir_clear &rArr; ff_memalloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_fs.o(i.lv_port_fs_init)
</UL>
<P><STRONG><a name="[e8]"></a>fs_seek</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lv_port_fs.o(i.fs_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = fs_seek &rArr; f_lseek &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_fs.o(i.lv_port_fs_init)
</UL>
<P><STRONG><a name="[eb]"></a>fs_size</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_port_fs.o(i.fs_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_fs.o(i.lv_port_fs_init)
</UL>
<P><STRONG><a name="[e9]"></a>fs_tell</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_port_fs.o(i.fs_tell))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_tell
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_fs.o(i.lv_port_fs_init)
</UL>
<P><STRONG><a name="[ee]"></a>fs_trunc</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_port_fs.o(i.fs_trunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = fs_trunc &rArr; f_truncate &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_fs.o(i.lv_port_fs_init)
</UL>
<P><STRONG><a name="[e7]"></a>fs_write</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, lv_port_fs.o(i.fs_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = fs_write &rArr; f_write &rArr; validate &rArr; unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_fs.o(i.lv_port_fs_init)
</UL>
<P><STRONG><a name="[1ed]"></a>fal_elmfat_sample</STRONG> (Thumb, 222 bytes, Stack size 144 bytes, fal_sample.o(i.fal_elmfat_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = fal_elmfat_sample &rArr; dfs_mount &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statfs
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_blk_device_create
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_sample.o(FSymTab)
</UL>
<P><STRONG><a name="[1ec]"></a>fal_sample</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, fal_sample.o(i.fal_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 1300<LI>Call Chain = fal_sample &rArr; fal_test &rArr; fal_partition_erase_all &rArr; fal_partition_erase &rArr; fal_flash_device_find &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_sample.o(FSymTab)
</UL>
<P><STRONG><a name="[610]"></a>fal_test</STRONG> (Thumb, 486 bytes, Stack size 1064 bytes, fal_sample.o(i.fal_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 1292<LI>Call Chain = fal_test &rArr; fal_partition_erase_all &rArr; fal_partition_erase &rArr; fal_flash_device_find &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase_all
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_sample
</UL>

<P><STRONG><a name="[412]"></a>addRandom</STRONG> (Thumb, 154 bytes, Stack size 64 bytes, 2048.o(i.addRandom))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = addRandom &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_2048
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[642]"></a>countEmpty</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, 2048.o(i.countEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = countEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameEnded
</UL>

<P><STRONG><a name="[580]"></a>drawBoard</STRONG> (Thumb, 306 bytes, Stack size 88 bytes, 2048.o(i.drawBoard))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = drawBoard &rArr; getColor &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getColor
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_2048
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[643]"></a>findPairDown</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, 2048.o(i.findPairDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = findPairDown
</UL>
<BR>[Called By]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameEnded
</UL>

<P><STRONG><a name="[9bb]"></a>findTarget</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, 2048.o(i.findTarget))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = findTarget
</UL>
<BR>[Called By]<UL><LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slideArray
</UL>

<P><STRONG><a name="[641]"></a>gameEnded</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, 2048.o(i.gameEnded))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gameEnded &rArr; rotateBoard
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotateBoard
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findPairDown
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_2048
</UL>

<P><STRONG><a name="[581]"></a>getColor</STRONG> (Thumb, 140 bytes, Stack size 136 bytes, 2048.o(i.getColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = getColor &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawBoard
</UL>

<P><STRONG><a name="[6e1]"></a>initBoard</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, 2048.o(i.initBoard))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = initBoard &rArr; drawBoard &rArr; getColor &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawBoard
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addRandom
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_2048
</UL>

<P><STRONG><a name="[1ee]"></a>main_2048</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, 2048.o(i.main_2048))
<BR><BR>[Stack]<UL><LI>Max Depth = 508 + Unknown Stack Size
<LI>Call Chain = main_2048 &rArr; setBufferedInput &rArr; tcsetattr &rArr; ioctl &rArr; fcntl &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBufferedInput
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveUp
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveRight
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveLeft
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveDown
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameEnded
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawBoard
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addRandom
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 2048.o(FSymTab)
</UL>
<P><STRONG><a name="[879]"></a>moveDown</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, 2048.o(i.moveDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = moveDown &rArr; moveUp &rArr; slideArray &rArr; findTarget
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotateBoard
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveUp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_2048
</UL>

<P><STRONG><a name="[876]"></a>moveLeft</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, 2048.o(i.moveLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = moveLeft &rArr; moveUp &rArr; slideArray &rArr; findTarget
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotateBoard
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveUp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_2048
</UL>

<P><STRONG><a name="[877]"></a>moveRight</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, 2048.o(i.moveRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = moveRight &rArr; moveUp &rArr; slideArray &rArr; findTarget
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotateBoard
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveUp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_2048
</UL>

<P><STRONG><a name="[878]"></a>moveUp</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, 2048.o(i.moveUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = moveUp &rArr; slideArray &rArr; findTarget
</UL>
<BR>[Calls]<UL><LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slideArray
</UL>
<BR>[Called By]<UL><LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveRight
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveLeft
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveDown
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_2048
</UL>

<P><STRONG><a name="[644]"></a>rotateBoard</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, 2048.o(i.rotateBoard))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rotateBoard
</UL>
<BR>[Called By]<UL><LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveRight
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveLeft
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveDown
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameEnded
</UL>

<P><STRONG><a name="[875]"></a>setBufferedInput</STRONG> (Thumb, 86 bytes, Stack size 72 bytes, 2048.o(i.setBufferedInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = setBufferedInput &rArr; tcsetattr &rArr; ioctl &rArr; fcntl &rArr; fd_put &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcsetattr
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcgetattr
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_2048
</UL>

<P><STRONG><a name="[8b6]"></a>slideArray</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, 2048.o(i.slideArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = slideArray &rArr; findTarget
</UL>
<BR>[Calls]<UL><LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findTarget
</UL>
<BR>[Called By]<UL><LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moveUp
</UL>

<P><STRONG><a name="[874]"></a>test</STRONG> (Thumb, 234 bytes, Stack size 136 bytes, 2048.o(i.test))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = test &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slideArray
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_2048
</UL>

<P><STRONG><a name="[716]"></a>list_find_init</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, vt_monitor.o(i.list_find_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = list_find_init
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_list_thread
</UL>

<P><STRONG><a name="[717]"></a>list_get_next</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, vt_monitor.o(i.list_get_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = list_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt_list_thread
</UL>

<P><STRONG><a name="[ca]"></a>gt917s_entry</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, gt917s_sample.o(i.gt917s_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = gt917s_entry &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;littlevgl2rtt_send_input_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt917s_sample.o(i.gt917s_sample)
</UL>
<P><STRONG><a name="[c9]"></a>rx_callback</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gt917s_sample.o(i.rx_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rx_callback &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gt917s_sample.o(i.gt917s_sample)
</UL>
<P><STRONG><a name="[123]"></a>lvgl_demo_run</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, littlevgl2rtt_demo.o(i.lvgl_demo_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = lvgl_demo_run &rArr; lv_demo_img_test &rArr; lv_img_create &rArr; lv_img_set_src &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_img_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> littlevgl2rtt_demo.o(i.rt_lvgl_demo_init)
</UL>
<P><STRONG><a name="[271]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[7f]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[81]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
